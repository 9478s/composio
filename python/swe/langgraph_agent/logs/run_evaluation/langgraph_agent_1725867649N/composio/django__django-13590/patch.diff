diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 4648daf3..3a8de14d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1077,10 +1077,14 @@ class Query(BaseExpression):
         elif isinstance(value, (list, tuple)):
             # The items of the iterable may be expressions and therefore need
             # to be resolved independently.
-            return type(value)(
+            resolved_values = [
                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
                 for sub_value in value
-            )
+            ]
+            # Handle named tuples separately to maintain their structure
+            if isinstance(value, tuple) and hasattr(value, '_fields'):  # Check if it's a named tuple
+                return type(value)(*resolved_values)  # Unpack the list when creating named tuple
+            return type(value)(resolved_values)
         return value
 
     def solve_lookup_type(self, lookup):
diff --git a/tests/queries/test_named_tuple_range.py b/tests/queries/test_named_tuple_range.py
new file mode 100644
index 00000000..2c2eb73f
--- /dev/null
+++ b/tests/queries/test_named_tuple_range.py
@@ -0,0 +1,64 @@
+from collections import namedtuple
+from datetime import date
+
+from django.test import TestCase
+from django.db.models import Q
+
+from .models import Article
+
+class NamedTupleRangeTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        Article.objects.bulk_create([
+            Article(headline='Article 1', pub_date=date(2005, 7, 26)),
+            Article(headline='Article 2', pub_date=date(2005, 7, 27)),
+            Article(headline='Article 3', pub_date=date(2005, 7, 28)),
+            Article(headline='Article 4', pub_date=date(2005, 7, 29)),
+        ])
+
+    def test_date_range_named_tuple(self):
+        DateRange = namedtuple('DateRange', ['start', 'end'])
+        date_range = DateRange(start=date(2005, 7, 26), end=date(2005, 7, 28))
+        
+        articles = Article.objects.filter(pub_date__range=date_range)
+        self.assertEqual(articles.count(), 3)
+        self.assertQuerysetEqual(
+            articles.values_list('headline', flat=True),
+            ['Article 1', 'Article 2', 'Article 3'],
+            ordered=False
+        )
+
+    def test_date_range_regular_tuple(self):
+        date_range = (date(2005, 7, 26), date(2005, 7, 28))
+        
+        articles = Article.objects.filter(pub_date__range=date_range)
+        self.assertEqual(articles.count(), 3)
+        self.assertQuerysetEqual(
+            articles.values_list('headline', flat=True),
+            ['Article 1', 'Article 2', 'Article 3'],
+            ordered=False
+        )
+
+    def test_date_range_list(self):
+        date_range = [date(2005, 7, 26), date(2005, 7, 28)]
+        
+        articles = Article.objects.filter(pub_date__range=date_range)
+        self.assertEqual(articles.count(), 3)
+        self.assertQuerysetEqual(
+            articles.values_list('headline', flat=True),
+            ['Article 1', 'Article 2', 'Article 3'],
+            ordered=False
+        )
+
+    def test_complex_q_object_with_named_tuple(self):
+        DateRange = namedtuple('DateRange', ['start', 'end'])
+        date_range = DateRange(start=date(2005, 7, 26), end=date(2005, 7, 28))
+        
+        q = Q(pub_date__range=date_range) | Q(headline__contains='4')
+        articles = Article.objects.filter(q)
+        self.assertEqual(articles.count(), 4)
+        self.assertQuerysetEqual(
+            articles.values_list('headline', flat=True),
+            ['Article 1', 'Article 2', 'Article 3', 'Article 4'],
+            ordered=False
+        )
