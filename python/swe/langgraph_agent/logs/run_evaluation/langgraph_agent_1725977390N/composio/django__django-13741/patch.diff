diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b9eb3332..9a6614a8 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):
 
     def __init__(self, *args, **kwargs):
         kwargs.setdefault("required", False)
+        kwargs.setdefault("disabled", True)
         super().__init__(*args, **kwargs)
 
     def bound_data(self, data, initial):
diff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt
index 6ab83054..64a15bb1 100644
--- a/docs/topics/auth/customizing.txt
+++ b/docs/topics/auth/customizing.txt
@@ -1182,3 +1182,45 @@ Finally, specify the custom model as the default user model for your project
 using the :setting:`AUTH_USER_MODEL` setting in your ``settings.py``::
 
     AUTH_USER_MODEL = 'customauth.MyUser'
+ReadOnlyPasswordHashField
+------------------------
+
+The ``ReadOnlyPasswordHashField`` is a form field used to display a hashed
+password in forms, typically in the admin interface. As of Django [VERSION],
+this field is now disabled by default to prevent accidental changes to the
+password hash.
+
+Key features of ``ReadOnlyPasswordHashField``:
+
+* It is disabled by default, meaning users cannot modify the field's value
+  through the form.
+* It is not a required field by default.
+* It displays the password hash, not the actual password.
+
+When using ``ReadOnlyPasswordHashField`` in your forms, you no longer need to
+implement a ``clean_password`` method to prevent accidental changes. The field's
+disabled state ensures that the password hash cannot be modified through the form.
+
+Example usage in a custom UserChangeForm::
+
+    from django import forms
+    from django.contrib.auth.forms import ReadOnlyPasswordHashField
+    from django.contrib.auth.models import User
+
+    class CustomUserChangeForm(forms.ModelForm):
+        password = ReadOnlyPasswordHashField()
+
+        class Meta:
+            model = User
+            fields = ('username', 'email', 'password', 'is_active', 'is_staff')
+
+In this example, the password field will be displayed as a read-only field,
+showing the hashed password value without allowing changes through the form.
+
+If you need to allow password changes, you should use a separate form or view
+specifically for password changes, rather than including an editable password
+field in your main user edit form.
+
+.. versionchanged:: [VERSION]
+   ``ReadOnlyPasswordHashField`` is now disabled by default.
+
diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 88b4b326..81eda86b 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -1086,3 +1086,47 @@ class AdminPasswordChangeFormTest(TestDataMixin, TestCase):
         for field_name, autocomplete in tests:
             with self.subTest(field_name=field_name, autocomplete=autocomplete):
                 self.assertEqual(form.fields[field_name].widget.attrs['autocomplete'], autocomplete)
+from django import forms
+
+class ReadOnlyPasswordHashFieldTest(SimpleTestCase):
+    def test_readonly_password_hash_field_disabled_by_default(self):
+        field = ReadOnlyPasswordHashField()
+        self.assertTrue(field.disabled)
+
+    def test_readonly_password_hash_field_not_required_by_default(self):
+        field = ReadOnlyPasswordHashField()
+        self.assertFalse(field.required)
+
+    def test_readonly_password_hash_field_custom_attributes(self):
+        field = ReadOnlyPasswordHashField(disabled=False, required=True)
+        self.assertFalse(field.disabled)
+        self.assertTrue(field.required)
+
+    def test_readonly_password_hash_field_immutable(self):
+        class TestForm(forms.Form):
+            password = ReadOnlyPasswordHashField(initial="test_hash")
+
+        form = TestForm(data={"password": "new_value"})
+        self.assertTrue(form.is_valid())
+        self.assertEqual(form.cleaned_data["password"], "test_hash")
+
+    def test_readonly_password_hash_field_renders_initial_value(self):
+        field = ReadOnlyPasswordHashField(initial="test_hash")
+        rendered = field.widget.render("password", "test_hash")
+        self.assertIn("test_hash", rendered)
+        self.assertIn("disabled", rendered)
+
+    def test_user_change_form_password_field(self):
+        user = User.objects.create_user(username="testuser", password="testpass")
+        form = UserChangeForm(instance=user)
+        password_field = form.fields["password"]
+        
+        self.assertIsInstance(password_field, ReadOnlyPasswordHashField)
+        self.assertTrue(password_field.disabled)
+        self.assertNotIn("password", form.initial)
+
+    def test_readonly_password_hash_field_has_not_changed(self):
+        field = ReadOnlyPasswordHashField(initial="test_hash")
+        self.assertFalse(field.has_changed("test_hash", "new_value"))
+        self.assertFalse(field.has_changed("test_hash", "test_hash"))
+        self.assertFalse(field.has_changed(None, "new_value"))
