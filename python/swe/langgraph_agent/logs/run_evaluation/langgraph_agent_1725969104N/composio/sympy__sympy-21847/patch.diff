diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403..078671e 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -25,6 +25,9 @@ def itermonomials(variables, max_degrees, min_degrees=None):
     ``min_degrees[i] <= degree_list(monom)[i] <= max_degrees[i]``,
     for all ``i``.
 
+    When ``max_degrees`` and ``min_degrees`` are integers, the function returns
+    all monomials with total degree between ``min_degree`` and ``max_degree``, inclusive.
+
     Case I. ``max_degrees`` and ``min_degrees`` are both integers
     =============================================================
 
@@ -127,7 +130,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_comm.append(Mul(*item))
             yield from set(monomials_list_comm)
         else:
diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py
index 482cbee..fb2c0c6 100644
--- a/sympy/polys/tests/test_monomials.py
+++ b/sympy/polys/tests/test_monomials.py
@@ -252,3 +252,8 @@ def test_Monomial():
     raises(ValueError, lambda: m**-1)
     raises(TypeError, lambda: m.gcd(3))
     raises(TypeError, lambda: m.lcm(3))
+
+def test_itermonomials_min_max_degrees():
+    assert set(itermonomials([x, y], 3, 2)) == {x**2, y**2, x*y, x**3, x**2*y, x*y**2, y**3}
+    assert set(itermonomials([x, y], 4, 2)) == {x**2, y**2, x*y, x**3, x**2*y, x*y**2, y**3, x**4, x**3*y, x**2*y**2, x*y**3, y**4}
+    assert set(itermonomials([x, y, z], 2, 1)) == {x, y, z, x*y, x*z, y*z, x**2, y**2, z**2}
