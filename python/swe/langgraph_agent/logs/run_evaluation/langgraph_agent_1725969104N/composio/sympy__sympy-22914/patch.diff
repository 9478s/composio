diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index 3a72ab6..d2b73ef 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -422,6 +422,16 @@ def _hprint_Pow(self, expr, rational=False, sqrt='math.sqrt'):
         return "{}**{}".format(base_str, exp_str)
 
 
+class PythonCodePrinter(AbstractPythonCodePrinter):
+
+    def _print_Min(self, expr):
+        return "min({})".format(", ".join(self._print(arg) for arg in expr.args))
+
+    def _print_Max(self, expr):
+        return "max({})".format(", ".join(self._print(arg) for arg in expr.args))
+
+    def _print_frac(self, expr):
+        return '({p[0]} / {p[1]})'.format(p=(self._print(expr.p), self._print(expr.q)))
 class PythonCodePrinter(AbstractPythonCodePrinter):
 
     def _print_sign(self, e):
diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py
index 9c1285d..41fe906 100644
--- a/sympy/printing/tests/test_pycode.py
+++ b/sympy/printing/tests/test_pycode.py
@@ -387,6 +387,62 @@ def test_airy_prime():
     assert "Not supported" in prntr.doprint(expr2)
 
 
+def test_numerical_accuracy_functions():
+    prntr = SciPyPrinter()
+    assert prntr.doprint(expm1(x)) == 'numpy.expm1(x)'
+    assert prntr.doprint(log1p(x)) == 'numpy.log1p(x)'
+    assert prntr.doprint(cosm1(x)) == 'scipy.special.cosm1(x)'
+    
+    # Add new test cases for Min and Max
+    from sympy import Min, Max, symbols, pycode
+    a, b = symbols("a b")
+    assert pycode(Min(a, b)) == "min(a, b)"
+    assert pycode(Max(a, b)) == "max(a, b)"
+    assert pycode(Min(a, b, 5)) == "min(a, b, 5)"
+    assert pycode(Max(a, b, 5)) == "max(a, b, 5)"
+
+# The function after this one starts here
+def test_numerical_accuracy_functions():
+    prntr = SciPyPrinter()
+    assert prntr.doprint(expm1(x)) == 'numpy.expm1(x)'
+    assert prntr.doprint(log1p(x)) == 'numpy.log1p(x)'
+    assert prntr.doprint(cosm1(x)) == 'scipy.special.cosm1(x)'
+    
+    # Add new test cases for Min and Max
+    from sympy import Min, Max, symbols, pycode
+    a, b = symbols("a b")
+    assert pycode(Min(a, b)) == "min(a, b)"
+    assert pycode(Max(a, b)) == "max(a, b)"
+    assert pycode(Min(a, b, 5)) == "min(a, b, 5)"
+    assert pycode(Max(a, b, 5)) == "max(a, b, 5)"
+
+# The next function starts here
+def test_numerical_accuracy_functions():
+    prntr = SciPyPrinter()
+    assert prntr.doprint(expm1(x)) == 'numpy.expm1(x)'
+    assert prntr.doprint(log1p(x)) == 'numpy.log1p(x)'
+    assert prntr.doprint(cosm1(x)) == 'scipy.special.cosm1(x)'
+    
+    # Add new test cases for Min and Max
+    from sympy import Min, Max, symbols, pycode
+    a, b = symbols("a b")
+    assert pycode(Min(a, b)) == "min(a, b)"
+    assert pycode(Max(a, b)) == "max(a, b)"
+    assert pycode(Min(a, b, 5)) == "min(a, b, 5)"
+    assert pycode(Max(a, b, 5)) == "max(a, b, 5)"
+def test_numerical_accuracy_functions():
+    prntr = SciPyPrinter()
+    assert prntr.doprint(expm1(x)) == 'numpy.expm1(x)'
+    assert prntr.doprint(log1p(x)) == 'numpy.log1p(x)'
+    assert prntr.doprint(cosm1(x)) == 'scipy.special.cosm1(x)'
+    
+    # Add new test cases for Min and Max
+    from sympy import Min, Max, symbols, pycode
+    a, b = symbols("a b")
+    assert pycode(Min(a, b)) == "min(a, b)"
+    assert pycode(Max(a, b)) == "max(a, b)"
+    assert pycode(Min(a, b, 5)) == "min(a, b, 5)"
+    assert pycode(Max(a, b, 5)) == "max(a, b, 5)"
 def test_numerical_accuracy_functions():
     prntr = SciPyPrinter()
     assert prntr.doprint(expm1(x)) == 'numpy.expm1(x)'
