diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py
index 12bd2fc..4f81743 100644
--- a/sympy/polys/rings.py
+++ b/sympy/polys/rings.py
@@ -616,8 +616,9 @@ def set_ring(self, new_ring):
             return new_ring.from_dict(self, self.ring.domain)
 
     def as_expr(self, *symbols):
-        if symbols and len(symbols) != self.ring.ngens:
-            raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
+        if symbols:
+            if len(symbols) != self.ring.ngens:
+                raise ValueError("not enough symbols, expected %s got %s" % (self.ring.ngens, len(symbols)))
         else:
             symbols = self.ring.symbols
 
diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py
index b396213..60ede5c 100644
--- a/sympy/polys/tests/test_rings.py
+++ b/sympy/polys/tests/test_rings.py
@@ -1419,4 +1419,24 @@ def test_PolyElement_factor_list():
 def test_issue_21410():
     R, x = ring('x', FF(2))
     p = x**6 + x**5 + x**4 + x**3 + 1
-    assert p._pow_multinomial(4) == x**24 + x**20 + x**16 + x**12 + 1
+def test_PolyElement_as_expr():
+    from sympy import expand, sympify, Symbol, symbols
+    from sympy.testing.pytest import raises
+    R, x, y, z = ring("x,y,z", ZZ)
+    f = 3*x**2*y - x*y*z + 7*z**3 + 1
+
+    print("f.as_expr() =", f.as_expr())
+    x_sym, y_sym, z_sym = Symbol('x'), Symbol('y'), Symbol('z')
+    expected = 3*x_sym**2*y_sym - x_sym*y_sym*z_sym + 7*z_sym**3 + 1
+    print("Expected =", expected)
+    assert f.as_expr() == expected
+    assert f.as_expr(x_sym, y_sym, z_sym) == expected
+
+    U, V, W = symbols("u,v,w")
+    print("f.as_expr(U, V, W) =", f.as_expr(U, V, W))
+    expected_uvw = 3*U**2*V - U*V*W + 7*W**3 + 1
+    print("Expected =", expected_uvw)
+    assert f.as_expr(U, V, W) == expected_uvw
+
+    with raises(ValueError):
+        f.as_expr(U, V)
