diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928..0c0d8cb4 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -99,6 +99,7 @@ class Aggregate(Func):
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
     name = 'Avg'
+    allow_distinct = True
 
 
 class Count(Aggregate):
@@ -112,7 +113,11 @@ class Count(Aggregate):
             expression = Star()
         if isinstance(expression, Star) and filter is not None:
             raise ValueError('Star cannot be used with filter. Please specify a field.')
-        super().__init__(expression, filter=filter, **extra)
+class Sum(FixDurationInputMixin, Aggregate):
+    function = 'SUM'
+    name = 'Sum'
+    allow_distinct = True
+
 
     def convert_value(self, value, expression, connection):
         return 0 if value is None else value
@@ -121,11 +126,13 @@ class Count(Aggregate):
 class Max(Aggregate):
     function = 'MAX'
     name = 'Max'
+    allow_distinct = True
 
 
 class Min(Aggregate):
     function = 'MIN'
     name = 'Min'
+    allow_distinct = True
 
 
 class StdDev(NumericOutputFieldMixin, Aggregate):
diff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py
index 9bd5b70a..b032f2e2 100644
--- a/tests/postgres_tests/test_aggregates.py
+++ b/tests/postgres_tests/test_aggregates.py
@@ -412,4 +412,30 @@ class TestStatisticsAggregate(PostgreSQLTestCase):
         number as argument works as expected.
         """
         values = StatTestModel.objects.aggregate(complex_regravgx=RegrAvgX(y=5, x='related_field__integer_field'))
+    def test_distinct_array_agg(self):
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=2, char_field='Bar')
+        values = AggregateTestModel.objects.aggregate(
+            distinct_array=ArrayAgg('integer_field', distinct=True)
+        )
+        self.assertEqual(values, {'distinct_array': [0, 1, 2]})
+
+    def test_distinct_string_agg(self):
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=2, char_field='Bar')
+        values = AggregateTestModel.objects.aggregate(
+            distinct_string=StringAgg('char_field', delimiter=',', distinct=True)
+        )
+        self.assertEqual(values, {'distinct_string': 'Bar,Foo,Foo1,Foo2,Foo3,Foo4'})
+
+    def test_distinct_jsonb_agg(self):
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=2, char_field='Bar')
+        values = AggregateTestModel.objects.aggregate(
+            distinct_json=JSONBAgg('char_field', distinct=True)
+        )
+        self.assertEqual(values, {'distinct_json': ['Bar', 'Foo', 'Foo1', 'Foo2', 'Foo3', 'Foo4']})
         self.assertEqual(values, {'complex_regravgx': 1.0})
