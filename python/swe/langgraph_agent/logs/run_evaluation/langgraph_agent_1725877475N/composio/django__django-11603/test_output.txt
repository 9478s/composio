+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/aggregates.py
	modified:   tests/postgres_tests/test_aggregates.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit f618e033acd37d59b536d6e6126e6c5be18037f6
Author: Nick Pope <nick.pope@flightdataservices.com>
Date:   Tue Feb 5 22:00:56 2019 +0000

    Fixed #30160 -- Added support for LZMA and XZ templates to startapp/startproject management commands.

diff --git a/django/utils/archive.py b/django/utils/archive.py
index c94ca4950b..235809f2ad 100644
--- a/django/utils/archive.py
+++ b/django/utils/archive.py
@@ -220,5 +220,7 @@ extension_map = dict.fromkeys((
     '.tar',
     '.tar.bz2', '.tbz2', '.tbz', '.tz2',
     '.tar.gz', '.tgz', '.taz',
+    '.tar.lzma', '.tlz',
+    '.tar.xz', '.txz',
 ), TarArchive)
 extension_map['.zip'] = ZipArchive
diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index be007c8cdf..b5572cd5c7 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -1223,7 +1223,8 @@ For example::
 
 Provides the path to a directory with a custom app template file, or a path to
 an uncompressed archive (``.tar``) or a compressed archive (``.tar.gz``,
-``.tar.bz2``, ``.tgz``, ``.tbz2``, ``.zip``) containing the app template files.
+``.tar.bz2``, ``.tar.xz``, ``.tar.lzma``, ``.tgz``, ``.tbz2``, ``.txz``,
+``.tlz``, ``.zip``) containing the app template files.
 
 For example, this would look for an app template in the given directory when
 creating the ``myapp`` app::
@@ -1239,6 +1240,11 @@ zip files, you can use a URL like::
 
     django-admin startapp --template=https://github.com/githubuser/django-app-template/archive/master.zip myapp
 
+.. versionchanged:: 3.0
+
+    Support for XZ archives (``.tar.xz``, ``.txz``) and LZMA archives
+    (``.tar.lzma``, ``.tlz``) was added.
+
 .. django-admin-option:: --extension EXTENSIONS, -e EXTENSIONS
 
 Specifies which file extensions in the app template should be rendered with the
diff --git a/docs/releases/3.0.txt b/docs/releases/3.0.txt
index 30f70e0bcf..4bfebba73b 100644
--- a/docs/releases/3.0.txt
+++ b/docs/releases/3.0.txt
@@ -250,6 +250,10 @@ Management Commands
 * The new :option:`--skip-checks` option skips running system checks prior to
   running the command.
 
+* The :option:`startapp --template` and :option:`startproject --template`
+  options now support templates stored in XZ archives (``.tar.xz``, ``.txz``)
+  and LZMA archives (``.tar.lzma``, ``.tlz``).
+
 Migrations
 ~~~~~~~~~~
 
diff --git a/tests/utils_tests/archives/foobar.tar.lzma b/tests/utils_tests/archives/foobar.tar.lzma
new file mode 100644
index 0000000000..758518e1fd
Binary files /dev/null and b/tests/utils_tests/archives/foobar.tar.lzma differ
diff --git a/tests/utils_tests/archives/foobar.tar.xz b/tests/utils_tests/archives/foobar.tar.xz
new file mode 100644
index 0000000000..f50d54371a
Binary files /dev/null and b/tests/utils_tests/archives/foobar.tar.xz differ
diff --git a/tests/utils_tests/archives/leadpath_foobar.tar.lzma b/tests/utils_tests/archives/leadpath_foobar.tar.lzma
new file mode 100644
index 0000000000..bf1af30589
Binary files /dev/null and b/tests/utils_tests/archives/leadpath_foobar.tar.lzma differ
diff --git a/tests/utils_tests/archives/leadpath_foobar.tar.xz b/tests/utils_tests/archives/leadpath_foobar.tar.xz
new file mode 100644
index 0000000000..9fc7a1b82a
Binary files /dev/null and b/tests/utils_tests/archives/leadpath_foobar.tar.xz differ
+ git diff f618e033acd37d59b536d6e6126e6c5be18037f6
diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928aa..0c0d8cb47f 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -99,6 +99,7 @@ class Aggregate(Func):
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
     name = 'Avg'
+    allow_distinct = True
 
 
 class Count(Aggregate):
@@ -112,7 +113,11 @@ class Count(Aggregate):
             expression = Star()
         if isinstance(expression, Star) and filter is not None:
             raise ValueError('Star cannot be used with filter. Please specify a field.')
-        super().__init__(expression, filter=filter, **extra)
+class Sum(FixDurationInputMixin, Aggregate):
+    function = 'SUM'
+    name = 'Sum'
+    allow_distinct = True
+
 
     def convert_value(self, value, expression, connection):
         return 0 if value is None else value
@@ -121,11 +126,13 @@ class Count(Aggregate):
 class Max(Aggregate):
     function = 'MAX'
     name = 'Max'
+    allow_distinct = True
 
 
 class Min(Aggregate):
     function = 'MIN'
     name = 'Min'
+    allow_distinct = True
 
 
 class StdDev(NumericOutputFieldMixin, Aggregate):
diff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py
index 9bd5b70a9e..b032f2e2e1 100644
--- a/tests/postgres_tests/test_aggregates.py
+++ b/tests/postgres_tests/test_aggregates.py
@@ -412,4 +412,30 @@ class TestStatisticsAggregate(PostgreSQLTestCase):
         number as argument works as expected.
         """
         values = StatTestModel.objects.aggregate(complex_regravgx=RegrAvgX(y=5, x='related_field__integer_field'))
+    def test_distinct_array_agg(self):
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=2, char_field='Bar')
+        values = AggregateTestModel.objects.aggregate(
+            distinct_array=ArrayAgg('integer_field', distinct=True)
+        )
+        self.assertEqual(values, {'distinct_array': [0, 1, 2]})
+
+    def test_distinct_string_agg(self):
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=2, char_field='Bar')
+        values = AggregateTestModel.objects.aggregate(
+            distinct_string=StringAgg('char_field', delimiter=',', distinct=True)
+        )
+        self.assertEqual(values, {'distinct_string': 'Bar,Foo,Foo1,Foo2,Foo3,Foo4'})
+
+    def test_distinct_jsonb_agg(self):
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=1, char_field='Foo')
+        AggregateTestModel.objects.create(integer_field=2, char_field='Bar')
+        values = AggregateTestModel.objects.aggregate(
+            distinct_json=JSONBAgg('char_field', distinct=True)
+        )
+        self.assertEqual(values, {'distinct_json': ['Bar', 'Foo', 'Foo1', 'Foo2', 'Foo3', 'Foo4']})
         self.assertEqual(values, {'complex_regravgx': 1.0})
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190731080213) (2024.1)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190731080213) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190731080213) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.0.dev20190731080213) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190731080213
    Uninstalling Django-3.0.dev20190731080213:
      Successfully uninstalled Django-3.0.dev20190731080213
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190731080213
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout f618e033acd37d59b536d6e6126e6c5be18037f6 tests/aggregation/tests.py
Updated 0 paths from 576985d959
+ git apply -v -
Checking patch tests/aggregation/tests.py...
Applied patch tests/aggregation/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 aggregation.tests
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_add_implementation (aggregation.tests.AggregateTestCase) ... ok
test_aggregate_alias (aggregation.tests.AggregateTestCase) ... ok
test_aggregate_annotation (aggregation.tests.AggregateTestCase) ... ERROR
test_aggregate_in_order_by (aggregation.tests.AggregateTestCase) ... ok
test_aggregate_multi_join (aggregation.tests.AggregateTestCase) ... ok
test_aggregate_over_complex_annotation (aggregation.tests.AggregateTestCase) ... ok
test_aggregation_expressions (aggregation.tests.AggregateTestCase) ... ERROR
test_aggregation_subquery_annotation (aggregation.tests.AggregateTestCase)
Subquery annotations are excluded from the GROUP BY if they are ... ERROR
test_annotate_basic (aggregation.tests.AggregateTestCase) ... ok
test_annotate_defer (aggregation.tests.AggregateTestCase) ... ok
test_annotate_defer_select_related (aggregation.tests.AggregateTestCase) ... ok
test_annotate_m2m (aggregation.tests.AggregateTestCase) ... ERROR
test_annotate_ordering (aggregation.tests.AggregateTestCase) ... ok
test_annotate_over_annotate (aggregation.tests.AggregateTestCase) ... ok
test_annotate_values (aggregation.tests.AggregateTestCase) ... ERROR
test_annotate_values_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_annotate_values_list (aggregation.tests.AggregateTestCase) ... ERROR
test_annotated_aggregate_over_annotated_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_annotation (aggregation.tests.AggregateTestCase) ... ERROR
test_annotation_expressions (aggregation.tests.AggregateTestCase) ... ok
test_arguments_must_be_expressions (aggregation.tests.AggregateTestCase) ... ok
test_avg_decimal_field (aggregation.tests.AggregateTestCase) ... ok
test_avg_duration_field (aggregation.tests.AggregateTestCase) ... ok
test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase) ... ERROR
test_combine_different_types (aggregation.tests.AggregateTestCase) ... ok
test_complex_aggregations_require_kwarg (aggregation.tests.AggregateTestCase) ... ok
test_complex_values_aggregation (aggregation.tests.AggregateTestCase) ... ERROR
test_count (aggregation.tests.AggregateTestCase) ... ERROR
test_count_distinct_expression (aggregation.tests.AggregateTestCase) ... ERROR
test_count_star (aggregation.tests.AggregateTestCase) ... ERROR
test_dates_with_aggregation (aggregation.tests.AggregateTestCase) ... ERROR
test_decimal_max_digits_has_no_effect (aggregation.tests.AggregateTestCase) ... ok
test_distinct_on_aggregate (aggregation.tests.AggregateTestCase) ... test_empty_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_even_more_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_expression_on_aggregation (aggregation.tests.AggregateTestCase) ... ok
test_filter_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_filtering (aggregation.tests.AggregateTestCase) ... ERROR
test_fkey_aggregate (aggregation.tests.AggregateTestCase) ... ERROR
test_group_by_exists_annotation (aggregation.tests.AggregateTestCase) ... ERROR
test_group_by_subquery_annotation (aggregation.tests.AggregateTestCase) ... ERROR
test_grouped_annotation_in_group_by (aggregation.tests.AggregateTestCase) ... ERROR
test_missing_output_field_raises_error (aggregation.tests.AggregateTestCase) ... ok
test_more_aggregation (aggregation.tests.AggregateTestCase) ... ERROR
test_multi_arg_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_multiple_aggregates (aggregation.tests.AggregateTestCase) ... ok
test_non_grouped_annotation_not_in_group_by (aggregation.tests.AggregateTestCase) ... ERROR
test_nonaggregate_aggregation_throws (aggregation.tests.AggregateTestCase) ... ok
test_nonfield_annotation (aggregation.tests.AggregateTestCase) ... ok
test_order_of_precedence (aggregation.tests.AggregateTestCase) ... ok
test_related_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_reverse_fkey_annotate (aggregation.tests.AggregateTestCase) ... ok
test_single_aggregate (aggregation.tests.AggregateTestCase) ... ok
test_sum_distinct_aggregate (aggregation.tests.AggregateTestCase) ... ERROR
test_sum_duration_field (aggregation.tests.AggregateTestCase) ... ok
test_ticket11881 (aggregation.tests.AggregateTestCase) ... ok
test_ticket12886 (aggregation.tests.AggregateTestCase) ... ok
test_ticket17424 (aggregation.tests.AggregateTestCase) ... ERROR
test_values_aggregation (aggregation.tests.AggregateTestCase) ... ERROR
test_values_annotation_with_expression (aggregation.tests.AggregateTestCase) ... ERROR

======================================================================
ERROR: test_aggregate_annotation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 467, in test_aggregate_annotation
    vals = Book.objects.annotate(num_authors=Count("authors__id")).aggregate(Avg("num_authors"))
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_aggregation_expressions (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 874, in test_aggregation_expressions
    a1 = Author.objects.aggregate(av_age=Sum('age') / Count('*'))
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 381, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 454, in resolve_expression
    c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_aggregation_subquery_annotation (aggregation.tests.AggregateTestCase)
Subquery annotations are excluded from the GROUP BY if they are
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 1137, in test_aggregation_subquery_annotation
    ).annotate(count=Count('book'))
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_annotate_m2m (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 212, in test_annotate_m2m
    books = Book.objects.annotate(num_authors=Count("authors")).order_by("name")
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_annotate_values (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 343, in test_annotate_values
    .annotate(n_authors=Count("authors__id"), mean_age=Avg("authors__age"))
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_annotate_values_list (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 731, in test_annotate_values_list
    books = Book.objects.values_list("price").annotate(count=Count("price")).order_by("-count", "price")
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_annotation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/db/models/query.py", line 374, in aggregate
    arg.default_alias
  File "/testbed/django/db/models/aggregates.py", line 62, in default_alias
    expressions = self.get_source_expressions()
  File "/testbed/django/db/models/aggregates.py", line 36, in get_source_expressions
    source_expressions = super().get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 594, in get_source_expressions
    return self.source_expressions
AttributeError: 'Count' object has no attribute 'source_expressions'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 605, in test_annotation
    vals = Author.objects.filter(pk=self.a1.pk).aggregate(Count("friends__id"))
  File "/testbed/django/db/models/query.py", line 376, in aggregate
    raise TypeError("Complex aggregates require an alias")
TypeError: Complex aggregates require an alias

======================================================================
ERROR: test_backwards_m2m_annotate (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 239, in test_backwards_m2m_annotate
    authors = Author.objects.annotate(num_books=Count("book")).order_by("name")
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_complex_values_aggregation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 1092, in test_complex_values_aggregation
    books_per_rating=Count('id') + 5
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/expressions.py", line 453, in resolve_expression
    c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_count (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/db/models/query.py", line 374, in aggregate
    arg.default_alias
  File "/testbed/django/db/models/aggregates.py", line 62, in default_alias
    expressions = self.get_source_expressions()
  File "/testbed/django/db/models/aggregates.py", line 36, in get_source_expressions
    source_expressions = super().get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 594, in get_source_expressions
    return self.source_expressions
AttributeError: 'Count' object has no attribute 'source_expressions'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 388, in test_count
    vals = Book.objects.aggregate(Count("rating"))
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 376, in aggregate
    raise TypeError("Complex aggregates require an alias")
TypeError: Complex aggregates require an alias

======================================================================
ERROR: test_count_distinct_expression (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 399, in test_count_distinct_expression
    distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 381, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_count_star (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 393, in test_count_star
    Book.objects.aggregate(n=Count("*"))
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 381, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_dates_with_aggregation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 752, in test_dates_with_aggregation
    dates = Book.objects.annotate(num_authors=Count("authors")).dates('pubdate', 'year')
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_distinct_on_aggregate (aggregation.tests.AggregateTestCase) (aggregate='Count')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 410, in test_distinct_on_aggregate
    books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 381, in aggregate
    query.add_annotation(aggregate_expr, alias, is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_distinct_on_aggregate (aggregation.tests.AggregateTestCase) (aggregate='Sum')
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 410, in test_distinct_on_aggregate
    books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))
  File "/testbed/django/db/models/aggregates.py", line 26, in __init__
    raise TypeError("%s does not allow distinct." % self.__class__.__name__)
TypeError: Sum does not allow distinct.

======================================================================
ERROR: test_filtering (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 535, in test_filtering
    publishers = Publisher.objects.annotate(num_books=Count("book__id")).filter(num_books__gt=1).order_by("pk")
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_fkey_aggregate (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 441, in test_fkey_aggregate
    explicit = list(Author.objects.annotate(Count('book__id')))
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1037, in annotate
    if arg.default_alias in kwargs:
  File "/testbed/django/db/models/aggregates.py", line 62, in default_alias
    expressions = self.get_source_expressions()
  File "/testbed/django/db/models/aggregates.py", line 36, in get_source_expressions
    source_expressions = super().get_source_expressions()
  File "/testbed/django/db/models/expressions.py", line 594, in get_source_expressions
    return self.source_expressions
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_group_by_exists_annotation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1229, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/aggregation/tests.py", line 1171, in test_group_by_exists_annotation
    ).annotate(total=Count('*'))
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_group_by_subquery_annotation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1229, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/aggregation/tests.py", line 1153, in test_group_by_subquery_annotation
    ).annotate(count=Count('pk')).values('count')
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_grouped_annotation_in_group_by (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 431, in test_grouped_annotation_in_group_by
    .annotate(count=Count('publisher_id', distinct=True)).values('count', 'rating').order_by('count')
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_more_aggregation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 655, in test_more_aggregation
    .annotate(num_authors=Count("authors__id"))
  File "/testbed/django/db/models/manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_non_grouped_annotation_not_in_group_by (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 420, in test_non_grouped_annotation_not_in_group_by
    .annotate(count=Count('publisher_id', distinct=True)).values('count', 'rating').order_by('count')
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_sum_distinct_aggregate (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 493, in test_sum_distinct_aggregate
    self.assertEqual(authors.count(), 3)
  File "/testbed/django/db/models/query.py", line 397, in count
    return self.query.get_count(using=self.db)
  File "/testbed/django/db/models/sql/query.py", line 510, in get_count
    obj.add_annotation(Count('*'), alias='__count', is_summary=True)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_ticket17424 (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 778, in test_ticket17424
    annotated_books = Book.objects.order_by('pk').annotate(one=Count("id"))
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_values_aggregation (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 767, in test_values_aggregation
    books_per_rating=Count('id')
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

======================================================================
ERROR: test_values_annotation_with_expression (aggregation.tests.AggregateTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/aggregation/tests.py", line 956, in test_values_annotation_with_expression
    qs = qs.annotate(friend_count=Count('friends'))
  File "/testbed/django/db/models/query.py", line 1061, in annotate
    clone.query.add_annotation(annotation, alias, is_summary=False)
  File "/testbed/django/db/models/sql/query.py", line 1010, in add_annotation
    summarize=is_summary)
  File "/testbed/django/db/models/aggregates.py", line 47, in resolve_expression
    c = super().resolve_expression(query, allow_joins, reuse, summarize)
  File "/testbed/django/db/models/expressions.py", line 600, in resolve_expression
    c = self.copy()
  File "/testbed/django/db/models/expressions.py", line 629, in copy
    copy.source_expressions = self.source_expressions[:]
AttributeError: 'Count' object has no attribute 'source_expressions'

----------------------------------------------------------------------
Ran 60 tests in 0.084s

FAILED (errors=26)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application aggregation
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: aggregation, auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table aggregation_author
    Creating table aggregation_publisher
    Creating table aggregation_book
    Creating table aggregation_store
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
+ git checkout f618e033acd37d59b536d6e6126e6c5be18037f6 tests/aggregation/tests.py
Updated 1 path from 576985d959
