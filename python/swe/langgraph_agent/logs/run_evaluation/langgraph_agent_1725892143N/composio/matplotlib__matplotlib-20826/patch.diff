diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 802fd3c..265ece2 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -1470,9 +1470,59 @@ class _AxesBase(martist.Artist):
         return self.ArtistList(self, 'texts', 'add_text',
                                valid_types=mtext.Text)
 
-    def clear(self):
-        """Clear the axes."""
+def clear(self):
+        """Clear the axes while preserving shared axis information."""
+        # Store shared axis information
+        shared_x = self.get_shared_x_axes()
+        shared_y = self.get_shared_y_axes()
+        
+        # Store visibility and text of x and y axis labels
+        x_label = self.xaxis.get_label_text()
+        y_label = self.yaxis.get_label_text()
+        x_label_visible = self.xaxis.get_label().get_visible()
+        y_label_visible = self.yaxis.get_label().get_visible()
+        
+        # Call the original cla method
         self.cla()
+        
+        # Restore shared axis information
+        self._shared_x_axes = shared_x
+        self._shared_y_axes = shared_y
+        
+        # Update axis artists to respect shared settings
+        self._update_shared_axes(x_label, y_label, x_label_visible, y_label_visible)
+
+def _update_shared_axes(self, x_label, y_label, x_label_visible, y_label_visible):
+    """Update axis artists to respect shared axis settings."""
+    for axis, label, label_visible in [(self.xaxis, x_label, x_label_visible),
+                                       (self.yaxis, y_label, y_label_visible)]:
+        siblings = axis.get_shared_axis().get_siblings(self)
+        if len(siblings) > 1:
+            is_last = self == siblings[-1]
+            is_first = self == siblings[0]
+            if axis.axis_name == 'x':
+                axis.set_tick_params(which='both', labelbottom=is_last, labeltop=False)
+                if is_last:
+                    axis.set_label_text(label)
+                    axis.label.set_visible(label_visible)
+                else:
+                    axis.set_label_text('')
+                    axis.label.set_visible(False)
+            elif axis.axis_name == 'y':
+                axis.set_tick_params(which='both', labelleft=is_first, labelright=False)
+                if is_first:
+                    axis.set_label_text(label)
+                    axis.label.set_visible(label_visible)
+                else:
+                    axis.set_label_text('')
+                    axis.label.set_visible(False)
+    
+    # Ensure spines are visible
+    for spine in self.spines.values():
+        spine.set_visible(True)
+    
+    # Update the figure
+    self.figure.canvas.draw_idle()
 
     def get_facecolor(self):
         """Get the facecolor of the Axes."""
