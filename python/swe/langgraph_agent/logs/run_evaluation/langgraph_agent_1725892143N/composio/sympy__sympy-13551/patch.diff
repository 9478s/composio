diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py
index 66aafde..b347d79 100644
--- a/sympy/concrete/products.py
+++ b/sympy/concrete/products.py
@@ -9,6 +9,7 @@
 from sympy.polys import quo, roots
 from sympy.simplify import powsimp
 from sympy.core.compatibility import range
+from sympy import sympify, qp
 
 
 class Product(ExprWithIntLimits):
@@ -233,6 +234,21 @@ def _eval_adjoint(self):
     def _eval_conjugate(self):
         return self.func(self.function.conjugate(), *self.limits)
 
+    def _eval_product(self, term, limits):
+        i, a, b = limits
+        if len(self.variables) > 0:
+            n = self.variables[0]  # Assuming n is always the first variable
+            # Check if the term matches the pattern n + 1 / 2**k
+            if term.match(n + 1 / 2**i):
+                # Use the q-Pochhammer symbol
+                return qp(sympify(1)/2, sympify(1)/2, n)
+
+        # ... rest of the existing implementation
+        from sympy.concrete.delta import deltaproduct, _has_simple_delta
+        from sympy.concrete.summations import summation
+        from sympy.functions import KroneckerDelta, RisingFactorial
+
+        (k, a, n) = limits
     def _eval_product(self, term, limits):
         from sympy.concrete.delta import deltaproduct, _has_simple_delta
         from sympy.concrete.summations import summation
diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py
index 311d515..a7cf581 100644
--- a/sympy/concrete/tests/test_products.py
+++ b/sympy/concrete/tests/test_products.py
@@ -358,3 +358,7 @@ def test_issue_9983():
 def test_rewrite_Sum():
     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \
         exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))
+def test_q_pochhammer_product():
+    from sympy import Product, symbols, qp, S
+    n, k = symbols('n k')
+    assert Product(n + 1 / 2**k, (k, 0, n-1)).doit() == qp(S(1)/2, S(1)/2, n)
