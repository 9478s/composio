diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 2dc26a3..796943d 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -1,3 +1,73 @@
+from typing import Any, Dict, Iterable, List, Tuple, Union, cast, Optional
+from docutils import nodes
+from docutils.nodes import Element, Node
+from docutils.parsers.rst import directives
+
+from sphinx import addnodes
+from sphinx.addnodes import desc_signature, pending_xref
+from sphinx.builders import Builder
+from sphinx.directives import ObjectDescription
+from sphinx.domains import Domain, ObjType
+from sphinx.environment import BuildEnvironment
+from sphinx.locale import _, __
+from sphinx.roles import XRefRole
+from sphinx.util import logging
+from sphinx.util.docfields import Field, GroupedField, TypedField
+from sphinx.util.nodes import make_refnode
+from sphinx.util.typing import OptionSpec
+
+if False:
+    # For type annotation
+    from typing import Type  # NOQA
+
+logger = logging.getLogger(__name__)
+
+class PythonDomain(Domain):
+    """Python language domain."""
+    name = 'py'
+    label = 'Python'
+    # ... (keep existing attributes)
+
+    initial_data = {
+        'objects': {},  # fullname -> docname, objtype
+        'modules': {},  # modname -> docname, synopsis, platform, deprecated
+        'labels': {},  # labelname -> docname, labelid, sectionname
+        'anonlabels': {},  # labelname -> docname, labelid
+        'mocked_bases': {},  # base_name -> class_name
+    }
+
+    def __init__(self, env: BuildEnvironment) -> None:
+        super().__init__(env)
+        self.data['mocked_bases'] = {}  # Initialize mocked_bases
+
+    # ... (keep existing methods)
+
+    def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,
+                     type: str, target: str, node: pending_xref, contnode: Element
+                     ) -> Optional[Element]:
+        modname = node.get('py:module')
+        clsname = node.get('py:class')
+        searchmode = 1 if node.hasattr('refspecific') else 0
+        matches = self.find_obj(env, modname, clsname, target,
+                                type, searchmode)
+
+        if not matches:
+            # Check if the target is a mocked base class
+            mocked_base = self.data['mocked_bases'].get(target)
+            if mocked_base:
+                return self._make_mocked_base_refnode(builder, fromdocname, mocked_base, contnode)
+
+        # ... (keep the rest of the existing method)
+
+    def _make_mocked_base_refnode(self, builder: Builder, fromdocname: str, 
+                                  mocked_base: str, contnode: Element) -> Element:
+        todocname = 'mocked_classes'  # You might want to create a special page for mocked classes
+        return make_refnode(builder, fromdocname, todocname, mocked_base, contnode, mocked_base)
+
+    def register_mocked_base(self, class_name: str, base_name: str) -> None:
+        self.data['mocked_bases'][base_name] = class_name
+
+# ... (keep the rest of the file unchanged)
 """
     sphinx.domains.python
     ~~~~~~~~~~~~~~~~~~~~~
