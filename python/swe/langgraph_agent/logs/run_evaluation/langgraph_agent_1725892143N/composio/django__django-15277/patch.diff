diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f30b5233..88c9ca9f 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1010,7 +1010,8 @@ class CharField(Field):
     def __init__(self, *args, db_collation=None, **kwargs):
         super().__init__(*args, **kwargs)
         self.db_collation = db_collation
-        self.validators.append(validators.MaxLengthValidator(self.max_length))
+        if self.max_length is not None:
+            self.validators.append(validators.MaxLengthValidator(self.max_length))
 
     def check(self, **kwargs):
         databases = kwargs.get('databases') or []
diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py
index 17c230c7..07ee2fb5 100644
--- a/tests/model_fields/test_charfield.py
+++ b/tests/model_fields/test_charfield.py
@@ -16,6 +16,13 @@ class TestCharField(TestCase):
         cf2 = models.CharField(max_length=1234)
         self.assertIsNone(cf1.formfield().max_length)
         self.assertEqual(1234, cf2.formfield().max_length)
+    def test_max_length_validator_added_only_when_not_none(self):
+        cf1 = models.CharField()
+        cf2 = models.CharField(max_length=100)
+        self.assertEqual(len(cf1.validators), 0)
+        self.assertEqual(len(cf2.validators), 1)
+        self.assertIsInstance(cf2.validators[0], models.validators.MaxLengthValidator)
+
 
     def test_lookup_integer_in_charfield(self):
         self.assertEqual(Post.objects.filter(title=9).count(), 0)
