diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401..90322ee1 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -399,7 +399,14 @@ class BaseDatabaseSchemaEditor:
             fields = [model._meta.get_field(field) for field in field_names]
             self.execute(self._create_index_sql(model, fields, suffix="_idx"))
 
+    # This method now handles multiple constraints for the same set of fields,
+    # which can occur when both index_together and unique_together are used
+    # on the same fields.
     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
+        """
+        Delete constraints for a composed index (e.g., unique_together or index_together).
+        This method now handles cases where multiple constraints exist for the same fields.
+        """
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
@@ -407,13 +414,13 @@ class BaseDatabaseSchemaEditor:
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
-        if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
+        if not constraint_names:
+            raise ValueError("Found no constraints for %s(%s)" % (
                 model._meta.db_table,
                 ", ".join(columns),
             ))
-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
+        for constraint_name in constraint_names:
+            self.execute(self._delete_constraint_sql(sql, model, constraint_name))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
         """Rename the table a model points to."""
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index 55c20213..b55902c6 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -3023,3 +3023,44 @@ class FieldOperationTests(SimpleTestCase):
         self.assertIs(operation.references_field('Through', 'whatever', 'migrations'), False)
         self.assertIs(operation.references_field('Through', 'first', 'migrations'), True)
         self.assertIs(operation.references_field('Through', 'second', 'migrations'), True)
+        self.assertIs(operation.references_field('Through', 'second', 'migrations'), True)
+
+    def test_delete_composed_index_with_multiple_constraints(self):
+        """
+        Test that deleting a composed index works when multiple constraints
+        (e.g., from index_together and unique_together) exist on the same fields.
+        """
+        # Create a model with both index_together and unique_together on the same fields
+        class TestModel(models.Model):
+            field1 = models.CharField(max_length=100)
+            field2 = models.CharField(max_length=100)
+
+            class Meta:
+                index_together = [('field1', 'field2')]
+                unique_together = [('field1', 'field2')]
+
+        # Create the table and indexes
+        with connection.schema_editor() as editor:
+            editor.create_model(TestModel)
+
+        # Now try to delete the index_together
+        old_meta = TestModel._meta
+        new_meta = type(old_meta)(
+            'Meta',
+            (old_meta,),
+            {'index_together': [], 'unique_together': [('field1', 'field2')]}
+        )
+        new_model = type(TestModel)(TestModel.__name__, TestModel.__bases__, {'Meta': new_meta, '__module__': TestModel.__module__})
+
+        with connection.schema_editor() as editor:
+            editor.alter_index_together(new_model, old_meta.index_together, new_meta.index_together)
+
+        # Check that the index was deleted but the unique constraint remains
+        with connection.cursor() as cursor:
+            constraints = connection.introspection.get_constraints(cursor, TestModel._meta.db_table)
+            self.assertTrue(any(c['unique'] and not c['index'] for c in constraints.values()))
+            self.assertFalse(any(c['index'] and not c['unique'] for c in constraints.values()))
+
+        # Clean up
+        with connection.schema_editor() as editor:
+            editor.delete_model(TestModel)
