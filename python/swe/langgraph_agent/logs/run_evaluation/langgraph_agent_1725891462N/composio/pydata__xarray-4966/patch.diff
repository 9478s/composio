diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..245bd5e 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -285,6 +285,23 @@ class CFScaleOffsetCoder(VariableCoder):
 
 
 class UnsignedIntegerCoder(VariableCoder):
+    """Decode and encode unsigned integers according to CF conventions and OPeNDAP hack.
+
+    This coder handles the following cases:
+    1. For signed integers with '_Unsigned' attribute set to "true":
+       Converts the data to unsigned integers of the same bit size.
+    2. For unsigned integers with '_Unsigned' attribute set to "false":
+       Converts the data to signed integers of the same bit size.
+
+    The '_Unsigned' attribute is moved from the variable's attributes to its encoding
+    during decoding, and vice versa during encoding.
+
+    When decoding, if a '_FillValue' attribute is present, it is also converted
+    to maintain consistency with the new data type.
+
+    This coder implements both the CF convention for storing unsigned integers
+    and the OPeNDAP hack for storing signed bytes.
+    """
     def encode(self, variable, name=None):
         dims, data, attrs, encoding = unpack_for_encoding(variable)
 
@@ -301,25 +318,31 @@ class UnsignedIntegerCoder(VariableCoder):
             data = duck_array_ops.around(data).astype(signed_dtype)
 
         return Variable(dims, data, attrs, encoding)
-
     def decode(self, variable, name=None):
         dims, data, attrs, encoding = unpack_for_decoding(variable)
 
         if "_Unsigned" in attrs:
             unsigned = pop_to(attrs, encoding, "_Unsigned")
 
-            if data.dtype.kind == "i":
-                if unsigned == "true":
-                    unsigned_dtype = np.dtype("u%s" % data.dtype.itemsize)
+            if data.dtype.kind in ["i", "u"]:
+                if unsigned == "true" and data.dtype.kind == "i":
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
                     transform = partial(np.asarray, dtype=unsigned_dtype)
                     data = lazy_elemwise_func(data, transform, unsigned_dtype)
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+                elif unsigned == "false" and data.dtype.kind == "u":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
             else:
                 warnings.warn(
-                    "variable %r has _Unsigned attribute but is not "
-                    "of integer type. Ignoring attribute." % name,
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Ignoring attribute.",
                     SerializationWarning,
                     stacklevel=3,
                 )
