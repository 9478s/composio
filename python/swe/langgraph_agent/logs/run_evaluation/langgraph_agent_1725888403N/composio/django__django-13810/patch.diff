diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da0..4537223c 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -1,3 +1,6 @@
+import logging
+
+logger = logging.getLogger('django.request')
 import asyncio
 import logging
 import types
@@ -20,9 +23,6 @@ logger = logging.getLogger('django.request')
 class BaseHandler:
     _view_middleware = None
     _template_response_middleware = None
-    _exception_middleware = None
-    _middleware_chain = None
-
     def load_middleware(self, is_async=False):
         """
         Populate middleware lists from settings.MIDDLEWARE.
@@ -45,6 +45,13 @@ class BaseHandler:
                     'Middleware %s must have at least one of '
                     'sync_capable/async_capable set to True.' % middleware_path
                 )
+            elif is_async and not middleware_can_async:
+                if settings.DEBUG:
+                    logger.warning(
+                        'Middleware %s is not async-capable and is being skipped in ASGI mode.',
+                        middleware_path
+                    )
+                continue
             elif not handler_is_async and middleware_can_sync:
                 middleware_is_async = False
             else:
@@ -93,6 +100,9 @@ class BaseHandler:
         # We only assign to this when initialization is complete as it is used
         # as a flag for initialization being complete.
         self._middleware_chain = handler
+        # We only assign to this when initialization is complete as it is used
+        # as a flag for initialization being complete.
+        self._middleware_chain = handler
 
     def adapt_method_mode(
         self, is_async, method, method_is_async=None, debug=False, name=None,
diff --git a/docs/topics/http/middleware.txt b/docs/topics/http/middleware.txt
index 1626d169..678f138c 100644
--- a/docs/topics/http/middleware.txt
+++ b/docs/topics/http/middleware.txt
@@ -165,6 +165,81 @@ can add three other special methods to class-based middleware:
 
 ``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is
 the Python function that Django is about to use. (It's the actual function
+Middleware in ASGI applications
+===============================
+
+When running Django as an ASGI application, middleware must be async-capable to
+function correctly. Middleware that is not async-capable will be skipped in ASGI
+mode, and a warning will be logged if ``DEBUG`` is ``True``.
+
+To make your middleware async-capable, ensure it has ``async_capable = True``
+set as a class attribute, and implement its methods as coroutines using ``async
+def``. For example:
+
+.. code-block:: python
+
+    class SimpleMiddleware:
+        async_capable = True
+
+        async def __init__(self, get_response):
+            self.get_response = get_response
+
+        async def __call__(self, request):
+            # Code to be executed for each request before
+            # the view (and later middleware) are called.
+
+            response = await self.get_response(request)
+
+            # Code to be executed for each request/response after
+            # the view is called.
+
+            return response
+
+If your middleware needs to support both synchronous and asynchronous
+operation, you can implement both synchronous and asynchronous versions of its
+methods. Django will use the appropriate version based on the current running
+mode.
+
+.. code-block:: python
+
+    class CompatibleMiddleware:
+        sync_capable = True
+        async_capable = True
+
+        def __init__(self, get_response):
+            self.get_response = get_response
+
+        def __call__(self, request):
+            if asyncio.iscoroutinefunction(self.get_response):
+                return self.__acall__(request)
+            return self.__scall__(request)
+
+        def __scall__(self, request):
+            # Synchronous version
+            response = self.get_response(request)
+            return response
+
+        async def __acall__(self, request):
+            # Asynchronous version
+            response = await self.get_response(request)
+            return response
+
+Remember to thoroughly test your middleware in both WSGI and ASGI environments
+to ensure compatibility.
+
+Writing your own middleware
+Writing your own middleware
+===========================
+
+.. note::
+   When writing middleware for use in ASGI applications, ensure your middleware
+   is async-capable. See the "Middleware in ASGI applications" section for more
+   details.
+
+A middleware factory is a callable that takes a ``get_response`` callable and
+returns a middleware. A middleware is a callable that takes a request and
+returns a response, just like a view.
+===========================
 object, not the name of the function as a string.) ``view_args`` is a list of
 positional arguments that will be passed to the view, and ``view_kwargs`` is a
 dictionary of keyword arguments that will be passed to the view. Neither
