diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c3..390594d2 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2500,32 +2500,24 @@ class AutoFieldMixin:
 
 
 class AutoFieldMeta(type):
-    """
-    Metaclass to maintain backward inheritance compatibility for AutoField.
-
-    It is intended that AutoFieldMixin become public API when it is possible to
-    create a non-integer automatically-generated field using column defaults
-    stored in the database.
-
-    In many areas Django also relies on using isinstance() to check for an
-    automatically-generated field as a subclass of AutoField. A new flag needs
-    to be implemented on Field to be used instead.
-
-    When these issues have been addressed, this metaclass could be used to
-    deprecate inheritance from AutoField and use of isinstance() with AutoField
-    for detecting automatically-generated fields.
-    """
-
     @property
     def _subclasses(self):
-        return (BigAutoField, SmallAutoField)
+        return {
+            AutoField,
+            BigAutoField,
+            SmallAutoField,
+            # Include any other relevant AutoField subclasses here
+        }
 
     def __instancecheck__(self, instance):
-        return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
+        return isinstance(instance, self._subclasses)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
-
+        return (
+            subclass in self._subclasses
+            or issubclass(subclass, tuple(self._subclasses))
+            or super().__subclasscheck__(subclass)
+        )
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
 
