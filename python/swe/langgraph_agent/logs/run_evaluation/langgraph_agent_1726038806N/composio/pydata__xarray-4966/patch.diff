diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..5794925 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -310,18 +310,37 @@ class UnsignedIntegerCoder(VariableCoder):
 
             if data.dtype.kind == "i":
                 if unsigned == "true":
-                    unsigned_dtype = np.dtype("u%s" % data.dtype.itemsize)
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
                     transform = partial(np.asarray, dtype=unsigned_dtype)
                     data = lazy_elemwise_func(data, transform, unsigned_dtype)
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+            elif data.dtype.kind == "u":
+                if unsigned == "false":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
             else:
                 warnings.warn(
-                    "variable %r has _Unsigned attribute but is not "
-                    "of integer type. Ignoring attribute." % name,
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Ignoring attribute.",
                     SerializationWarning,
                     stacklevel=3,
                 )
 
         return Variable(dims, data, attrs, encoding)
+
+    def encode(self, variable, name=None):
+        dims, data, attrs, encoding = unpack_for_encoding(variable)
+
+        if "dtype" in encoding:
+            if encoding["dtype"].kind == "u":
+                attrs["_Unsigned"] = "true"
+            elif encoding["dtype"].kind == "i" and data.dtype.kind == "u":
+                attrs["_Unsigned"] = "false"
+
+        return Variable(dims, data, attrs, encoding)
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
index e0df778..624e904 100644
--- a/xarray/tests/test_coding.py
+++ b/xarray/tests/test_coding.py
@@ -117,3 +117,45 @@ def test_scaling_offset_as_list(scale_factor, add_offset):
     encoded = coder.encode(original)
     roundtripped = coder.decode(encoded)
     assert_allclose(original, roundtripped)
+
+def test_unsigned_integer_coder_with_signed_bytes():
+    coder = variables.UnsignedIntegerCoder()
+    
+    # Test decoding unsigned data with _Unsigned="false"
+    original = xr.Variable(['x'], np.array([0, 127, 128, 255], dtype='u1'),
+                        attrs={'_Unsigned': 'false'})
+    decoded = coder.decode(original)
+    assert decoded.dtype == np.dtype('i1')
+    np.testing.assert_array_equal(decoded.values, 
+                                  np.array([0, 127, -128, -1], dtype='i1'))
+
+    # Test encoding signed data back to unsigned
+    encoded = coder.encode(decoded)
+    assert '_Unsigned' in encoded.attrs
+    assert encoded.attrs['_Unsigned'] == 'false'
+    assert encoded.dtype == np.dtype('i1')
+    np.testing.assert_array_equal(encoded.values, 
+                                  np.array([0, 127, -128, -1], dtype='i1'))
+
+    # Test decoding signed data with _Unsigned="true"
+    original_signed = xr.Variable(['x'], np.array([-128, -1, 0, 127], dtype='i1'),
+                               attrs={'_Unsigned': 'true'})
+    decoded_unsigned = coder.decode(original_signed)
+    assert decoded_unsigned.dtype == np.dtype('u1')
+    np.testing.assert_array_equal(decoded_unsigned.values,
+                                  np.array([128, 255, 0, 127], dtype='u1'))
+
+    # Test encoding unsigned data
+    encoded_unsigned = coder.encode(decoded_unsigned)
+    assert '_Unsigned' in encoded_unsigned.attrs
+    assert encoded_unsigned.attrs['_Unsigned'] == 'true'
+    assert encoded_unsigned.dtype == np.dtype('u1')
+    np.testing.assert_array_equal(encoded_unsigned.values,
+                                  np.array([128, 255, 0, 127], dtype='u1'))
+
+    # Test with non-integer data (should raise a warning)
+    with pytest.warns(variables.SerializationWarning):
+        non_integer = xr.Variable(['x'], np.array([1.0, 2.0, 3.0], dtype='f4'),
+                               attrs={'_Unsigned': 'true'})
+        result = coder.decode(non_integer)
+        assert result.identical(non_integer)
