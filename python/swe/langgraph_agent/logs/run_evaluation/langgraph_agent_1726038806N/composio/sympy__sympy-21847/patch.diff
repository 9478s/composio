diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403..952276e 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -25,6 +25,9 @@ def itermonomials(variables, max_degrees, min_degrees=None):
     ``min_degrees[i] <= degree_list(monom)[i] <= max_degrees[i]``,
     for all ``i``.
 
+    Note: When ``min_degrees`` is an integer, it represents a constraint
+    on the total degree of the monomial, not on individual variable degrees.
+
     Case I. ``max_degrees`` and ``min_degrees`` are both integers
     =============================================================
 
@@ -127,7 +130,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_comm.append(Mul(*item))
             yield from set(monomials_list_comm)
         else:
@@ -139,7 +142,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if sum(powers.values()) >= min_degree:
                     monomials_list_non_comm.append(Mul(*item))
             yield from set(monomials_list_non_comm)
     else:
diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py
index 482cbee..8e79575 100644
--- a/sympy/polys/tests/test_monomials.py
+++ b/sympy/polys/tests/test_monomials.py
@@ -251,4 +251,9 @@ def test_Monomial():
     raises(NotImplementedError, lambda: m/1)
     raises(ValueError, lambda: m**-1)
     raises(TypeError, lambda: m.gcd(3))
+    # Test for the fixed behavior with min_degrees as an integer
+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y*z}
+
+    # Test for the fixed behavior with min_degrees as a list
+    assert set(itermonomials([x, y], [2, 4], [1, 2])) == {x**2*y**4, x**2*y**3, x**2*y**2, x*y**4, x*y**3, x*y**2}
     raises(TypeError, lambda: m.lcm(3))
