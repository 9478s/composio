diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..346cd8b 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -310,16 +310,26 @@ class UnsignedIntegerCoder(VariableCoder):
 
             if data.dtype.kind == "i":
                 if unsigned == "true":
-                    unsigned_dtype = np.dtype("u%s" % data.dtype.itemsize)
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
                     transform = partial(np.asarray, dtype=unsigned_dtype)
                     data = lazy_elemwise_func(data, transform, unsigned_dtype)
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+            elif data.dtype.kind == "u":
+                if unsigned == "false":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
             else:
+                # For non-integer types, preserve the _Unsigned attribute
+                encoding["_Unsigned"] = unsigned
                 warnings.warn(
-                    "variable %r has _Unsigned attribute but is not "
-                    "of integer type. Ignoring attribute." % name,
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Preserving attribute in encoding.",
                     SerializationWarning,
                     stacklevel=3,
                 )
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
index e0df778..bc128b8 100644
--- a/xarray/tests/test_coding.py
+++ b/xarray/tests/test_coding.py
@@ -116,4 +116,31 @@ def test_scaling_offset_as_list(scale_factor, add_offset):
     coder = variables.CFScaleOffsetCoder()
     encoded = coder.encode(original)
     roundtripped = coder.decode(encoded)
-    assert_allclose(original, roundtripped)
+def test_UnsignedIntegerCoder():
+    coder = variables.UnsignedIntegerCoder()
+    
+    # Test unsigned to signed conversion
+    original_unsigned = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"), 
+                                    attrs={"_Unsigned": "false"})
+    expected_signed = xr.Variable(("x",), np.array([0, -128, -1], dtype="i1"))
+    decoded = coder.decode(original_unsigned)
+    assert_identical(expected_signed, decoded)
+    
+    # Test signed to unsigned conversion
+    original_signed = xr.Variable(("x",), np.array([-128, 0, 127], dtype="i1"), 
+                                  attrs={"_Unsigned": "true"})
+    expected_unsigned = xr.Variable(("x",), np.array([128, 0, 127], dtype="u1"))
+    decoded = coder.decode(original_signed)
+    assert_identical(expected_unsigned, decoded)
+    
+    # Test no conversion for non-integer types
+    original_float = xr.Variable(("x",), np.array([0.0, 1.0, 2.0], dtype="f4"), 
+                                 attrs={"_Unsigned": "true"})
+    decoded = coder.decode(original_float)
+    assert_identical(original_float, decoded)
+    assert "_Unsigned" in decoded.encoding
+    assert decoded.encoding["_Unsigned"] == "true"
+
+    # Test roundtrip
+    roundtripped = coder.decode(coder.encode(original_unsigned))
+    assert_identical(original_unsigned, roundtripped)
