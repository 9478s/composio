diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py
index c580043..7bd2321 100644
--- a/lib/matplotlib/stackplot.py
+++ b/lib/matplotlib/stackplot.py
@@ -7,6 +7,8 @@ https://stackoverflow.com/q/2225995/
 """
 
 import numpy as np
+from matplotlib import _api
+from matplotlib.colors import to_rgba
 
 from matplotlib import _api
 
@@ -67,10 +69,10 @@ def stackplot(axes, x, *args,
     """
 
     y = np.row_stack(args)
-
-    labels = iter(labels)
     if colors is not None:
+        colors = [to_rgba(c) for c in colors]
         axes.set_prop_cycle(color=colors)
+    labels = iter(labels)
 
     # Assume data passed has not been 'stacked', so stack it here.
     # We'll need a float buffer for the upcoming calculations.
diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py
index 0d7d360..d357fa3 100644
--- a/lib/matplotlib/tests/test_axes.py
+++ b/lib/matplotlib/tests/test_axes.py
@@ -8161,3 +8161,23 @@ def test_bar_leading_nan():
         for b in rest:
             assert np.isfinite(b.xy).all()
             assert np.isfinite(b.get_width())
+
+def test_stackplot_with_color_aliases():
+    fig, ax = plt.subplots()
+    x = [1, 2, 3, 4, 5]
+    y1 = [1, 1, 2, 3, 5]
+    y2 = [0, 4, 2, 6, 8]
+    y3 = [1, 3, 5, 7, 9]
+    
+    # Test with color aliases
+    ax.stackplot(x, y1, y2, y3, colors=['C0', 'C1', 'C2'])
+    
+    # Check if the stackplot was created without errors
+    assert len(ax.collections) == 3
+    
+    # Check if the colors are correctly applied
+    assert ax.collections[0].get_facecolor()[0][0:3] == mcolors.to_rgb('C0')
+    assert ax.collections[1].get_facecolor()[0][0:3] == mcolors.to_rgb('C1')
+    assert ax.collections[2].get_facecolor()[0][0:3] == mcolors.to_rgb('C2')
+
+    plt.close(fig)  # Clean up
