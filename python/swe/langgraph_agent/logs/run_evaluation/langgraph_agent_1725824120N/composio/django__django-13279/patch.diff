diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160..3d497cb5 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -1,4 +1,13 @@
 import base64
+from django.conf import settings
+from django.contrib.sessions.exceptions import SuspiciousSession
+from django.core import signing
+
+class SessionBase:
+    # This setting allows for a smooth transition between Django 3.0 and 3.1
+    # It determines which session encoding method to use
+    DEFAULT_HASHING_ALGORITHM = getattr(settings, 'DEFAULT_HASHING_ALGORITHM', 'sha256')
+import base64
 import logging
 import string
 import warnings
@@ -107,19 +116,57 @@ class SessionBase:
         return salted_hmac(key_salt, value).hexdigest()
 
     def encode(self, session_dict):
-        "Return the given session dictionary serialized and encoded as a string."
+        if self.DEFAULT_HASHING_ALGORITHM == 'sha1':
+            return self._legacy_encode(session_dict)
         return signing.dumps(
             session_dict, salt=self.key_salt, serializer=self.serializer,
             compress=True,
         )
 
     def decode(self, session_data):
+        if self.DEFAULT_HASHING_ALGORITHM == 'sha1':
+            try:
+                return self._legacy_decode(session_data)
+            except Exception:
+                # If legacy decode fails, try the new format
+                pass
+        
+        try:
+            return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
+        except Exception:
+            # If both methods fail, raise an exception or handle it as appropriate
+            raise SuspiciousSession("Session data corrupted")
+
+    def _legacy_encode(self, session_dict):
+        """Encode using the pre-Django 3.1 format."""
+        warnings.warn(
+            "The _legacy_encode method is deprecated and will be removed in Django 4.0.",
+            RemovedInDjango40Warning,
+            stacklevel=2,
+        )
+        serialized = self.serializer().dumps(session_dict)
+        hash = self._hash(serialized)
+        return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')
+
+    def _legacy_decode(self, session_data):
+        """Decode the pre-Django 3.1 session format."""
+        warnings.warn(
+            "The _legacy_decode method is deprecated and will be removed in Django 4.0.",
+            RemovedInDjango40Warning,
+            stacklevel=2,
+        )
+        # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
+        encoded_data = base64.b64decode(session_data.encode('ascii'))
         try:
             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
-        # RemovedInDjango40Warning: when the deprecation ends, handle here
-        # exceptions similar to what _legacy_decode() does now.
         except Exception:
-            return self._legacy_decode(session_data)
+            # If both methods fail, raise an exception or handle it as appropriate
+            raise SuspiciousSession("Session data corrupted")
+    def _legacy_encode(self, session_dict):
+        """Encode using the pre-Django 3.1 format."""
+        serialized = self.serializer().dumps(session_dict)
+        hash = self._hash(serialized)
+        return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')
 
     def _legacy_decode(self, session_data):
         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.
diff --git a/docs/howto/upgrade-version.txt b/docs/howto/upgrade-version.txt
index bde9b18c..5f755503 100644
--- a/docs/howto/upgrade-version.txt
+++ b/docs/howto/upgrade-version.txt
@@ -99,6 +99,45 @@ If you installed Django with pip_, you can use the ``--upgrade`` or ``-U`` flag:
 
 .. _pip: https://pip.pypa.io/
 
+Upgrading Django 3.0 to 3.1
+===========================
+
+Session encoding transition
+---------------------------
+
+Django 3.1 introduces a new session encoding format using SHA-256 instead of
+SHA-1. To facilitate a smooth transition, follow these steps:
+
+1. Upgrade to Django 3.1 without changing your session configuration.
+
+2. Set the :setting:`DEFAULT_HASHING_ALGORITHM` setting to ``'sha1'`` in your
+   settings file:
+
+   .. code-block:: python
+
+       DEFAULT_HASHING_ALGORITHM = 'sha1'
+
+   This allows Django to read both old (SHA-1) and new (SHA-256) session formats.
+
+3. Deploy your project with this setting and run it for a period of time to
+   allow active sessions to naturally expire and be replaced with new ones.
+
+4. Once you are confident that all or most sessions have been replaced
+   (typically after your session expiry time has passed), remove the
+   :setting:`DEFAULT_HASHING_ALGORITHM` setting or set it to ``'sha256'``.
+
+5. Deploy your project again with the updated setting.
+
+.. warning::
+
+    The ``'sha1'`` option is provided only for backwards compatibility and will
+    be removed in Django 4.0. It's recommended to complete this transition
+    before upgrading to Django 4.0.
+
+For more details on this transition, refer to the :ref:`sessions documentation
+<configuring-sessions>`.
+.. _pip: https://pip.pypa.io/
+
 Testing
 =======
 
diff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt
index db090de3..e5afdf89 100644
--- a/docs/releases/3.1.txt
+++ b/docs/releases/3.1.txt
@@ -97,6 +97,38 @@ transforms are left as a reference to the new ones and are :ref:`deprecated as
 of this release <deprecated-jsonfield>`.
 
 .. _default-hashing-algorithm-usage:
+DEFAULT_HASHING_ALGORITHM for transitioning between session encodings
+----------------------------------------------------------------------
+
+A new setting, :setting:`DEFAULT_HASHING_ALGORITHM`, has been introduced to
+facilitate a smooth transition between Django 3.0 and 3.1 session encodings.
+This setting determines which hashing algorithm is used for encoding session
+data.
+
+By default, Django 3.1+ uses SHA-256 for session data hashing. However, if you
+need to maintain compatibility with Django 3.0 during a transition period, you
+can set :setting:`DEFAULT_HASHING_ALGORITHM` to ``'sha1'`` in your settings:
+
+.. code-block:: python
+
+    DEFAULT_HASHING_ALGORITHM = 'sha1'
+
+This allows Django to read both old (SHA-1) and new (SHA-256) session formats,
+ensuring that your application continues to work correctly during the
+transition.
+
+.. warning::
+
+    The ``'sha1'`` option is provided only for backwards compatibility and will
+    be removed in Django 4.0. It's recommended to transition to the new session
+    format as soon as possible.
+
+Once you've fully transitioned to Django 3.1 and ensured that all active
+sessions are using the new format, you should remove the
+:setting:`DEFAULT_HASHING_ALGORITHM` setting or set it to ``'sha256'``.
+
+For more details on this transition, refer to the :ref:`sessions documentation
+<configuring-sessions>`.
 
 ``DEFAULT_HASHING_ALGORITHM`` settings
 --------------------------------------
diff --git a/docs/topics/http/sessions.txt b/docs/topics/http/sessions.txt
index 41c2c499..2c945a7b 100644
--- a/docs/topics/http/sessions.txt
+++ b/docs/topics/http/sessions.txt
@@ -95,6 +95,37 @@ session data be expunged from time to time, the ``cache`` backend is for you.
 If you use the ``cached_db`` session backend, you also need to follow the
 configuration instructions for the `using database-backed sessions`_.
 
+Using file-based sessions
+-------------------------
+Transitioning between Django 3.0 and 3.1 session encoding
+----------------------------------------------------------
+
+Django 3.1 introduces a new session encoding format for improved security.
+To facilitate a smooth transition between Django 3.0 and 3.1, a new setting
+`DEFAULT_HASHING_ALGORITHM` has been introduced.
+
+By default, Django 3.1+ uses the new session encoding format with SHA-256.
+However, if you need to maintain compatibility with Django 3.0 during a
+transition period, you can set `DEFAULT_HASHING_ALGORITHM` to 'sha1' in your
+settings:
+
+.. code-block:: python
+
+    DEFAULT_HASHING_ALGORITHM = 'sha1'
+
+This will allow Django to read both old and new session formats, ensuring
+that your application continues to work correctly during the transition.
+
+.. warning::
+
+    The 'sha1' option is provided only for backwards compatibility and will
+    be removed in Django 4.0. It's recommended to transition to the new
+    session format as soon as possible.
+
+Once you've fully transitioned to Django 3.1 and ensured that all active
+sessions are using the new format, you should remove the
+`DEFAULT_HASHING_ALGORITHM` setting or set it to 'sha256'.
+
 Using file-based sessions
 -------------------------
 
