diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py
index 4c9bd635..317c557f 100644
--- a/django/db/backends/postgresql/client.py
+++ b/django/db/backends/postgresql/client.py
@@ -23,18 +23,24 @@ class DatabaseClient(BaseDatabaseClient):
         sslcert = options.get("sslcert")
         sslkey = options.get("sslkey")
 
-        if not dbname and not service:
-            # Connect to the default 'postgres' db.
-            dbname = "postgres"
         if user:
             args += ["-U", user]
         if host:
             args += ["-h", host]
         if port:
             args += ["-p", str(port)]
+
+        # Add parameters before the database name to fix issue with PostgreSQL
+        # expecting all options to precede the database name. This ensures that
+        # additional parameters passed to the 'dbshell' command are correctly
+        # placed in the psql command line.
+        args.extend(parameters)
+
+        if not dbname and not service:
+            # Connect to the default 'postgres' db.
+            dbname = "postgres"
         if dbname:
             args += [dbname]
-        args.extend(parameters)
 
         env = {}
         if passwd:
diff --git a/docs/releases/4.2.txt b/docs/releases/4.2.txt
index 413e9a94..16f127f2 100644
--- a/docs/releases/4.2.txt
+++ b/docs/releases/4.2.txt
@@ -66,12 +66,16 @@ Minor features
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 * The new :lookup:`trigram_strict_word_similar` lookup, and the
-  :class:`TrigramStrictWordSimilarity()
+  :class:`TrigramStrictWordSimilarity()`
   <django.contrib.postgres.search.TrigramStrictWordSimilarity>` and
-  :class:`TrigramStrictWordDistance()
+  :class:`TrigramStrictWordDistance()`
   <django.contrib.postgres.search.TrigramStrictWordDistance>` expressions allow
   using trigram strict word similarity.
 
+* The :djadmin:`dbshell` command now correctly handles additional parameters
+  for PostgreSQL, ensuring they are placed before the database name in the
+  ``psql`` command.
+
 :mod:`django.contrib.redirects`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py
index 02924d0b..5c86f8d8 100644
--- a/tests/dbshell/test_postgresql.py
+++ b/tests/dbshell/test_postgresql.py
@@ -183,4 +183,38 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):
         args[0:1] = [sys.executable, str(fake_client)]
         with self.assertRaises(subprocess.CalledProcessError) as ctx:
             subprocess.run(args, check=True, env=env)
-        self.assertNotIn("somepassword", str(ctx.exception))
+    def test_parameters_ordering(self):
+        self.assertEqual(
+            self.settings_to_cmd_args_env(
+                {
+                    "NAME": "dbname",
+                    "USER": "someuser",
+                    "PASSWORD": "somepassword",
+                    "HOST": "somehost",
+                    "PORT": "444",
+                },
+                ["-c", "SELECT 1;"]
+            ),
+            (
+                ["psql", "-U", "someuser", "-h", "somehost", "-p", "444", "-c", "SELECT 1;", "dbname"],
+                {"PGPASSWORD": "somepassword"},
+            ),
+        )
+
+    def test_parameters_multiple_ordering(self):
+        self.assertEqual(
+            self.settings_to_cmd_args_env(
+                {
+                    "NAME": "dbname",
+                    "USER": "someuser",
+                    "PASSWORD": "somepassword",
+                    "HOST": "somehost",
+                    "PORT": "444",
+                },
+                ["-c", "SELECT 1;", "--pset", "pager=off"]
+            ),
+            (
+                ["psql", "-U", "someuser", "-h", "somehost", "-p", "444", "-c", "SELECT 1;", "--pset", "pager=off", "dbname"],
+                {"PGPASSWORD": "somepassword"},
+            ),
+        )
