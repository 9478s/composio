diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 2ff8b0ee..325b7818 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -243,19 +243,12 @@ class BoundField:
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
 
 
+@html_safe
 @html_safe
 class BoundWidget:
     """
     A container class used for iterating over widgets. This is useful for
-    widgets that have choices. For example, the following can be used in a
-    template:
-
-    {% for radio in myform.beatles %}
-      <label for="{{ radio.id_for_label }}">
-        {{ radio.choice_label }}
-        <span class="radio">{{ radio.tag }}</span>
-      </label>
-    {% endfor %}
+    widgets that have choices and thus produce multiple widgets.
     """
     def __init__(self, parent_widget, data, renderer):
         self.parent_widget = parent_widget
@@ -263,22 +256,26 @@ class BoundWidget:
         self.renderer = renderer
 
     def __str__(self):
-        return self.tag(wrap_label=True)
+        return self.tag()
 
     def tag(self, wrap_label=False):
-        context = {'widget': {**self.data, 'wrap_label': wrap_label}}
+        context = self.parent_widget.get_context(self.data['name'], self.data['value'],
+                                                 self.data['attrs'])
+        context['wrap_label'] = wrap_label
         return self.parent_widget._render(self.template_name, context, self.renderer)
 
     @property
     def template_name(self):
-        if 'template_name' in self.data:
-            return self.data['template_name']
         return self.parent_widget.template_name
 
     @property
     def id_for_label(self):
-        return 'id_%s_%s' % (self.data['name'], self.data['index'])
+        return self.data['attrs'].get('id') or 'id_%s_%s' % (self.data['name'], self.data['index'])
 
     @property
     def choice_label(self):
         return self.data['label']
+
+    def __bool__(self):
+        # BoundWidget evaluates to True even if its value is empty.
+        return True
diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py
index f3ee64ce..61620f09 100644
--- a/tests/forms_tests/tests/test_forms.py
+++ b/tests/forms_tests/tests/test_forms.py
@@ -3,6 +3,52 @@ import datetime
 import json
 import uuid
 
+from django.core.exceptions import NON_FIELD_ERRORS
+from django.core.files.uploadedfile import SimpleUploadedFile
+from django.core.validators import MaxValueValidator, RegexValidator
+from django.forms import (
+    BooleanField, CharField, CheckboxSelectMultiple, ChoiceField, DateField,
+    DateTimeField, EmailField, FileField, FileInput, FloatField, Form,
+    HiddenInput, ImageField, IntegerField, MultipleChoiceField,
+    MultipleHiddenInput, MultiValueField, NullBooleanField, PasswordInput,
+    RadioSelect, Select, SplitDateTimeField, SplitHiddenDateTimeWidget,
+    Textarea, TextInput, TimeField, ValidationError, forms,
+)
+from django.forms.renderers import DjangoTemplates, get_default_renderer
+from django.forms.utils import ErrorList
+from django.http import QueryDict
+from django.template import Context, Template
+from django.test import SimpleTestCase
+from django.utils.datastructures import MultiValueDict
+from django.utils.safestring import mark_safe
+import copy
+import datetime
+import json
+import uuid
+
+from django.core.exceptions import NON_FIELD_ERRORS
+from django.core.files.uploadedfile import SimpleUploadedFile
+from django.core.validators import MaxValueValidator, RegexValidator
+from django.forms import (
+    BooleanField, CharField, CheckboxSelectMultiple, ChoiceField, DateField,
+    DateTimeField, EmailField, FileField, FileInput, FloatField, Form,
+    HiddenInput, ImageField, IntegerField, MultipleChoiceField,
+    MultipleHiddenInput, MultiValueField, NullBooleanField, PasswordInput,
+    RadioSelect, Select, SplitDateTimeField, SplitHiddenDateTimeWidget,
+    Textarea, TextInput, TimeField, ValidationError, forms,
+)
+from django.forms.renderers import DjangoTemplates, get_default_renderer
+from django.forms.utils import ErrorList
+from django.http import QueryDict
+from django.template import Context, Template
+from django.test import SimpleTestCase
+from django.utils.datastructures import MultiValueDict
+from django.utils.safestring import mark_safe
+import copy
+import datetime
+import json
+import uuid
+
 from django.core.exceptions import NON_FIELD_ERRORS
 from django.core.files.uploadedfile import SimpleUploadedFile
 from django.core.validators import MaxValueValidator, RegexValidator
