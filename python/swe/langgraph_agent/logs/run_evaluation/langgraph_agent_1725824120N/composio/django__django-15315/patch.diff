diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 88c9ca9f..fcea1597 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -542,11 +542,7 @@ class Field(RegisterLookupMixin):
         return NotImplemented
 
     def __hash__(self):
-        return hash((
-            self.creation_counter,
-            self.model._meta.app_label if hasattr(self, 'model') else None,
-            self.model._meta.model_name if hasattr(self, 'model') else None,
-        ))
+        return hash(self.creation_counter)
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py
index 5208b40d..2dd013c6 100644
--- a/tests/model_fields/tests.py
+++ b/tests/model_fields/tests.py
@@ -11,6 +11,20 @@ from .models import (
     WhizIter, WhizIterEmpty,
 )
 
+class FieldHashTestCase(TestCase):
+    def test_field_hash_immutability(self):
+        f = models.CharField(max_length=200)
+        initial_hash = hash(f)
+        
+        class Book(models.Model):
+            title = f
+        
+        self.assertEqual(hash(f), initial_hash, "Field hash should not change when assigned to a model")
+        
+        d = {f: 1}
+        self.assertIn(f, d, "Field should still be found in dict after assignment to model")
+
+
 
 class Nested:
     class Field(models.Field):
