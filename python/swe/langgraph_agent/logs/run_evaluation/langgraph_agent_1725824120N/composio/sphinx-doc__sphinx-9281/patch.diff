diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 5035ce2..31d095a 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -43,6 +43,27 @@ from sphinx.util.typing import OptionSpec, TextlikeNode
 logger = logging.getLogger(__name__)
 
 
+def format_enum_value(value: str) -> str:
+    """Format Enum values for better rendering in signatures."""
+    if value.startswith('<') and value.endswith('>'):
+        # This looks like an Enum value
+        parts = value[1:-1].split('.')
+        if len(parts) > 1:
+            return parts[-2] + '.' + parts[-1]
+    return value
+
+
+# REs for Python signatures
+py_sig_re = re.compile(
+    r'''^ ([\w.]*\.)?            # class name(s)
+          (\w+)  \s*             # thing name
+          (?: \(\s*(.*)\s*\)     # optional: arguments
+           (?:\s* -> \s* (.*))?  #           return annotation
+          )? $                   # and nothing more
+          ''', re.VERBOSE)
+logger = logging.getLogger(__name__)
+
+
 # REs for Python signatures
 py_sig_re = re.compile(
     r'''^ ([\w.]*\.)?            # class name(s)
@@ -181,6 +202,33 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
         return [type_to_xref(annotation, env)]
 
 
+def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_parameterlist:
+    """Parse a list of arguments using AST parser"""
+    params = addnodes.desc_parameterlist(arglist)
+    sig = signature_from_str('(%s)' % arglist)
+    last_kind = None
+    for param in sig.parameters.values():
+        if param.kind != last_kind:
+            if param.kind == Parameter.POSITIONAL_ONLY:
+                params += addnodes.desc_parameter('', '', addnodes.desc_sig_operator('', '/'))
+            elif param.kind == Parameter.VAR_POSITIONAL:
+                params += addnodes.desc_parameter('', '', addnodes.desc_sig_operator('', '*'))
+            elif param.kind == Parameter.KEYWORD_ONLY:
+                if last_kind in {Parameter.POSITIONAL_ONLY, Parameter.POSITIONAL_OR_KEYWORD}:
+                    params += addnodes.desc_parameter('', '', addnodes.desc_sig_operator('', '*'))
+            elif param.kind == Parameter.VAR_KEYWORD:
+                params += addnodes.desc_parameter('', '', addnodes.desc_sig_operator('', '**'))
+        
+        node = addnodes.desc_parameter()
+        _parse_annotation(param.name, env, node)
+        if param.default is not param.empty:
+            node += nodes.Text('=')
+            default = str(param.default)
+            node += nodes.emphasis(default, format_enum_value(default))
+        params += node
+        last_kind = param.kind
+    
+    return params
 def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_parameterlist:
     """Parse a list of arguments using AST parser"""
     params = addnodes.desc_parameterlist(arglist)
