diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 3a4a64ee..c583c4d9 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -150,3 +150,10 @@ class AbstractBaseUser(models.Model):
     @classmethod
     def normalize_username(cls, username):
         return unicodedata.normalize('NFKC', username) if isinstance(username, str) else username
+
+
+class_obj:AbstractBaseUser = cal()
+class_obj.
+
+class_obj:BaseUserManager = cal()
+class_obj.
\ No newline at end of file
diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py
index 65fc266f..f10a07ef 100644
--- a/django/contrib/auth/checks.py
+++ b/django/contrib/auth/checks.py
@@ -4,6 +4,7 @@ from types import MethodType
 from django.apps import apps
 from django.conf import settings
 from django.core import checks
+from django.db.models import UniqueConstraint
 
 from .management import _get_builtin_permissions
 
@@ -50,31 +51,39 @@ def check_user_model(app_configs=None, **kwargs):
                 id='auth.E002',
             )
         )
-
     # Check that the username field is unique
-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:
-        if (settings.AUTHENTICATION_BACKENDS ==
-                ['django.contrib.auth.backends.ModelBackend']):
-            errors.append(
-                checks.Error(
-                    "'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'." % (
-                        cls._meta.object_name, cls.USERNAME_FIELD
-                    ),
-                    obj=cls,
-                    id='auth.E003',
+    username_field = cls._meta.get_field(cls.USERNAME_FIELD)
+    if not username_field.unique:
+        # Check if there's a UniqueConstraint for the USERNAME_FIELD
+        has_unique_constraint = any(
+            isinstance(constraint, UniqueConstraint) and cls.USERNAME_FIELD in constraint.fields
+            for constraint in cls._meta.constraints
+        )
+        
+        if not has_unique_constraint:
+            if (settings.AUTHENTICATION_BACKENDS ==
+                    ['django.contrib.auth.backends.ModelBackend']):
+                errors.append(
+                    checks.Error(
+                        "'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'." % (
+                            cls._meta.object_name, cls.USERNAME_FIELD
+                        ),
+                        hint="Add a UniqueConstraint for '%s' or set unique=True on the field." % cls.USERNAME_FIELD,
+                        obj=cls,
+                        id='auth.E003',
+                    )
                 )
-            )
-        else:
-            errors.append(
-                checks.Warning(
-                    "'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique." % (
-                        cls._meta.object_name, cls.USERNAME_FIELD
-                    ),
-                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',
-                    obj=cls,
-                    id='auth.W004',
+            else:
+                errors.append(
+                    checks.Warning(
+                        "'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique." % (
+                            cls._meta.object_name, cls.USERNAME_FIELD
+                        ),
+                        hint='Ensure that your authentication backend(s) can handle non-unique usernames.',
+                        obj=cls,
+                        id='auth.W004',
+                    )
                 )
-            )
 
     if isinstance(cls().is_anonymous, MethodType):
         errors.append(
diff --git a/django/contrib/auth/models.py b/django/contrib/auth/models.py
index 5f092f0a..3c0a0a87 100644
--- a/django/contrib/auth/models.py
+++ b/django/contrib/auth/models.py
@@ -467,3 +467,10 @@ class AnonymousUser:
 
     def get_username(self):
         return self.username
+
+
+class_obj:User = cal()
+class_obj.
+
+class_obj:AbstractUser = cal()
+class_obj.
\ No newline at end of file
