+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/patches.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit f06c2c3abdaf4b90285ce5ca7fedbb8ace715911
Merge: 756420e442 855332acc9
Author: Thomas A Caswell <tcaswell@gmail.com>
Date:   Sat Jul 9 13:45:31 2022 -0400

    Merge pull request #23350 from tfpf/svgastext-nofail-fix
    
    TST: Fixed SVG-as-text image comparison tests.

+ git diff f06c2c3abdaf4b90285ce5ca7fedbb8ace715911
diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py
index e062249589..06ed5b9d38 100644
--- a/lib/matplotlib/patches.py
+++ b/lib/matplotlib/patches.py
@@ -529,35 +529,30 @@ class Patch(artist.Artist):
         """Return the hatching pattern."""
         return self._hatch
 
+    @contextlib.contextmanager
     @contextlib.contextmanager
     def _bind_draw_path_function(self, renderer):
         """
-        ``draw()`` helper factored out for sharing with `FancyArrowPatch`.
+        Context manager to temporarily bind a renderer's draw_path function.
 
-        Yields a callable ``dp`` such that calling ``dp(*args, **kwargs)`` is
-        equivalent to calling ``renderer1.draw_path(gc, *args, **kwargs)``
-        where ``renderer1`` and ``gc`` have been suitably set from ``renderer``
-        and the artist's properties.
-        """
+        This is used to customize the draw_path function for different types of
+        patches. For example, filled patches might use a different draw_path
+        function than unfilled patches.
 
+        The context manager yields the bound draw_path function.
+        """
         renderer.open_group('patch', self.get_gid())
         gc = renderer.new_gc()
 
         gc.set_foreground(self._edgecolor, isRGBA=True)
-
-        lw = self._linewidth
-        if self._edgecolor[3] == 0 or self._linestyle == 'None':
-            lw = 0
-        gc.set_linewidth(lw)
+        gc.set_linewidth(self._linewidth)
         gc.set_dashes(*self._dash_pattern)
         gc.set_capstyle(self._capstyle)
         gc.set_joinstyle(self._joinstyle)
-
         gc.set_antialiased(self._antialiased)
         self._set_gc_clip(gc)
         gc.set_url(self._url)
         gc.set_snap(self.get_snap())
-
         gc.set_alpha(self._alpha)
 
         if self._hatch:
@@ -571,25 +566,26 @@ class Patch(artist.Artist):
             from matplotlib.patheffects import PathEffectRenderer
             renderer = PathEffectRenderer(self.get_path_effects(), renderer)
 
-        # In `with _bind_draw_path_function(renderer) as draw_path: ...`
-        # (in the implementations of `draw()` below), calls to `draw_path(...)`
-        # will occur as if they took place here with `gc` inserted as
-        # additional first argument.
-        yield functools.partial(renderer.draw_path, gc)
+        # Define a new draw_path function that uses the patch's properties
+        def draw_path(path, transform, rgbFace=None):
+            renderer.draw_path(gc, path, transform, rgbFace)
+
+        try:
+            # Yield the new draw_path function
+            yield draw_path
+        finally:
+            # Clean up
+            gc.restore()
+            renderer.close_group('patch')
 
-        gc.restore()
-        renderer.close_group('patch')
         self.stale = False
 
+    @artist.allow_rasterization
     @artist.allow_rasterization
     def draw(self, renderer):
-        # docstring inherited
         if not self.get_visible():
             return
-        # Patch has traditionally ignored the dashoffset.
-        with cbook._setattr_cm(
-                 self, _dash_pattern=(0, self._dash_pattern[1])), \
-             self._bind_draw_path_function(renderer) as draw_path:
+        with self._bind_draw_path_function(renderer) as draw_path:
             path = self.get_path()
             transform = self.get_transform()
             tpath = transform.transform_path_non_affine(path)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (1.4.5)
Requirement already satisfied: numpy>=1.19 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (10.0.0)
Requirement already satisfied: pyparsing>=2.2.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (2.8.2)
Requirement already satisfied: setuptools_scm>=4 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools_scm>=4->matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909) (4.7.1)
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.6.0.dev2664+gf06c2c3abd
    Uninstalling matplotlib-3.6.0.dev2664+gf06c2c3abd:
      Successfully uninstalled matplotlib-3.6.0.dev2664+gf06c2c3abd
  DEPRECATION: Legacy editable install of matplotlib==3.6.0.dev2664+gf06c2c3abd.d20240909 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for matplotlib
Successfully installed matplotlib-3.6.0.dev2664+gf06c2c3abd.d20240909
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout f06c2c3abdaf4b90285ce5ca7fedbb8ace715911 lib/matplotlib/tests/test_patches.py
Updated 0 paths from b79bbd2e88
+ git apply -v -
Checking patch lib/matplotlib/tests/test_patches.py...
Applied patch lib/matplotlib/tests/test_patches.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_patches.py
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: cov-5.0.0, xdist-3.6.1, timeout-2.3.1, rerunfailures-14.0
collected 55 items

lib/matplotlib/tests/test_patches.py ...FF.FFsFFsFFs.FFsFF.FFs.FFsFFF... [ 63%]
.F..ss...FFF........                                                     [100%]

=================================== FAILURES ===================================
__________________________ test_rotate_rect_draw[png] __________________________

ext = 'png'
request = <FixtureRequest for <Function test_rotate_rect_draw[png]>>, args = ()
kwargs = {}, file_name = 'test_rotate_rect_draw[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_patches/test_rotate_rect_draw[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_patches/test_rotate_rect_draw[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae43c54d0>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
_______________________ test_dash_offset_patch_draw[png] _______________________

ext = 'png'
request = <FixtureRequest for <Function test_dash_offset_patch_draw[png]>>
args = (), kwargs = {}, file_name = 'test_dash_offset_patch_draw[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_patches/test_dash_offset_patch_draw[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_patches/test_dash_offset_patch_draw[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4ca6ed0>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
____________________________ test_clip_to_bbox[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_clip_to_bbox[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae494e010>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
____________________________ test_clip_to_bbox[pdf] ____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_clip_to_bbox[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2799: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4cbdb90>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
________________________ test_patch_alpha_coloring[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_patch_alpha_coloring[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaadcab7f90>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
________________________ test_patch_alpha_coloring[pdf] ________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_patch_alpha_coloring[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2799: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4f738d0>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
________________________ test_patch_alpha_override[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_patch_alpha_override[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae478f890>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
________________________ test_patch_alpha_override[pdf] ________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_patch_alpha_override[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2799: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4f023d0>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
_______________________ test_patch_custom_linestyle[png] _______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_patch_custom_linestyle[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaadc96fc10>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
_______________________ test_patch_custom_linestyle[pdf] _______________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_patch_custom_linestyle[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2799: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4fe7890>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
_________________________ test_patch_linestyle_accents _________________________

    def test_patch_linestyle_accents():
        #: Test if linestyle can also be specified with short mnemonics like "--"
        #: c.f. GitHub issue #2136
        star = mpath.Path.unit_regular_star(6)
        circle = mpath.Path.unit_circle()
        # concatenate the star with an internal cutout of the circle
        verts = np.concatenate([circle.vertices, star.vertices[::-1]])
        codes = np.concatenate([circle.codes, star.codes])
    
        linestyles = ["-", "--", "-.", ":",
                      "solid", "dashed", "dashdot", "dotted"]
    
        fig, ax = plt.subplots()
        for i, ls in enumerate(linestyles):
            star = mpath.Path(verts + i, codes)
            patch = mpatches.PathPatch(star,
                                       linewidth=3, linestyle=ls,
                                       facecolor=(1, 0, 0),
                                       edgecolor=(0, 0, 1))
            ax.add_patch(patch)
    
        ax.set_xlim([-1, i + 1])
        ax.set_ylim([-1, i + 1])
>       fig.canvas.draw()

lib/matplotlib/tests/test_patches.py:345: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4acc3d0>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
________________________ test_patch_linestyle_none[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_patch_linestyle_none[png]>>
args = (), kwargs = {}, file_name = 'test_patch_linestyle_none[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_patches/test_patch_linestyle_none[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_patches/test_patch_linestyle_none[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae6777890>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
____________________________ test_wedge_range[png] _____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_wedge_range[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae687c610>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
____________________________ test_wedge_range[pdf] _____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_wedge_range[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2799: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae50e1a10>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
_________________________ test_multi_color_hatch[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_multi_color_hatch[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4f00190>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
_________________________ test_multi_color_hatch[pdf] __________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_multi_color_hatch[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2799: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4ae1a10>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
__________________________ test_units_rectangle[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_units_rectangle[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae683fa90>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
__________________________ test_connection_patch[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_connection_patch[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae6908190>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
________________________ test_connection_patch_fig[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_connection_patch_fig[png]>>
args = (), kwargs = {}, file_name = 'test_connection_patch_fig[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 2 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_patches/test_connection_patch_fig[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_patches/test_connection_patch_fig[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4ae8190>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
_______________________________ test_shadow[png] _______________________________

ext = 'png', request = <FixtureRequest for <Function test_shadow[png]>>
args = (), kwargs = {}, file_name = 'test_shadow[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_patches/test_shadow[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_patches/test_shadow[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:476: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaadcbd8190>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
______________________________ test_annulus[png] _______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_annulus[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaadcb95110>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
__________________________ test_annulus_setters[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_annulus_setters[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae726b8d0>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
__________________________ test_annulus_setters2[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_annulus_setters2[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3172: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2292: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2158: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/_api/deprecation.py:410: in wrapper
    return func(*inner_args, **inner_kwargs)
lib/matplotlib/backends/backend_agg.py:520: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:466: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:408: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:74: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:2963: in draw
    self.patch.draw(renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/artist.py:51: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/patches.py:588: in draw
    with self._bind_draw_path_function(renderer) as draw_path:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x2aaae4a03a10>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
        del self.args, self.kwds, self.func
        try:
>           return next(self.gen)
E           TypeError: '_GeneratorContextManager' object is not an iterator

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:137: TypeError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_patches.py::test_Polygon_close
PASSED lib/matplotlib/tests/test_patches.py::test_corner_center
PASSED lib/matplotlib/tests/test_patches.py::test_rotate_rect
PASSED lib/matplotlib/tests/test_patches.py::test_negative_rect
PASSED lib/matplotlib/tests/test_patches.py::test_patch_color_none
PASSED lib/matplotlib/tests/test_patches.py::test_wedge_movement
PASSED lib/matplotlib/tests/test_patches.py::test_patch_str
PASSED lib/matplotlib/tests/test_patches.py::test_datetime_rectangle
PASSED lib/matplotlib/tests/test_patches.py::test_datetime_datetime_fails
PASSED lib/matplotlib/tests/test_patches.py::test_contains_point
PASSED lib/matplotlib/tests/test_patches.py::test_contains_points
PASSED lib/matplotlib/tests/test_patches.py::test_fancyarrow_units
PASSED lib/matplotlib/tests/test_patches.py::test_fancyarrow_setdata
PASSED lib/matplotlib/tests/test_patches.py::test_fancyarrow_shape_error
PASSED lib/matplotlib/tests/test_patches.py::test_boxstyle_errors[foo-Unknown style: 'foo']
PASSED lib/matplotlib/tests/test_patches.py::test_boxstyle_errors[Round,foo-Incorrect style argument: 'Round,foo']
PASSED lib/matplotlib/tests/test_patches.py::test_degenerate_polygon
PASSED lib/matplotlib/tests/test_patches.py::test_color_override_warning[edgecolor]
PASSED lib/matplotlib/tests/test_patches.py::test_color_override_warning[facecolor]
PASSED lib/matplotlib/tests/test_patches.py::test_empty_verts
PASSED lib/matplotlib/tests/test_patches.py::test_default_antialiased
PASSED lib/matplotlib/tests/test_patches.py::test_default_linestyle
PASSED lib/matplotlib/tests/test_patches.py::test_default_capstyle
PASSED lib/matplotlib/tests/test_patches.py::test_default_joinstyle
SKIPPED [8] ../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files on this system
FAILED lib/matplotlib/tests/test_patches.py::test_rotate_rect_draw[png] - Typ...
FAILED lib/matplotlib/tests/test_patches.py::test_dash_offset_patch_draw[png]
FAILED lib/matplotlib/tests/test_patches.py::test_clip_to_bbox[png] - TypeErr...
FAILED lib/matplotlib/tests/test_patches.py::test_clip_to_bbox[pdf] - TypeErr...
FAILED lib/matplotlib/tests/test_patches.py::test_patch_alpha_coloring[png]
FAILED lib/matplotlib/tests/test_patches.py::test_patch_alpha_coloring[pdf]
FAILED lib/matplotlib/tests/test_patches.py::test_patch_alpha_override[png]
FAILED lib/matplotlib/tests/test_patches.py::test_patch_alpha_override[pdf]
FAILED lib/matplotlib/tests/test_patches.py::test_patch_custom_linestyle[png]
FAILED lib/matplotlib/tests/test_patches.py::test_patch_custom_linestyle[pdf]
FAILED lib/matplotlib/tests/test_patches.py::test_patch_linestyle_accents - T...
FAILED lib/matplotlib/tests/test_patches.py::test_patch_linestyle_none[png]
FAILED lib/matplotlib/tests/test_patches.py::test_wedge_range[png] - TypeErro...
FAILED lib/matplotlib/tests/test_patches.py::test_wedge_range[pdf] - TypeErro...
FAILED lib/matplotlib/tests/test_patches.py::test_multi_color_hatch[png] - Ty...
FAILED lib/matplotlib/tests/test_patches.py::test_multi_color_hatch[pdf] - Ty...
FAILED lib/matplotlib/tests/test_patches.py::test_units_rectangle[png] - Type...
FAILED lib/matplotlib/tests/test_patches.py::test_connection_patch[png] - Typ...
FAILED lib/matplotlib/tests/test_patches.py::test_connection_patch_fig[png]
FAILED lib/matplotlib/tests/test_patches.py::test_shadow[png] - TypeError: '_...
FAILED lib/matplotlib/tests/test_patches.py::test_annulus[png] - TypeError: '...
FAILED lib/matplotlib/tests/test_patches.py::test_annulus_setters[png] - Type...
FAILED lib/matplotlib/tests/test_patches.py::test_annulus_setters2[png] - Typ...
================== 23 failed, 24 passed, 8 skipped in 37.56s ===================
+ git checkout f06c2c3abdaf4b90285ce5ca7fedbb8ace715911 lib/matplotlib/tests/test_patches.py
Updated 1 path from b79bbd2e88
