diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py
index e062249..06ed5b9 100644
--- a/lib/matplotlib/patches.py
+++ b/lib/matplotlib/patches.py
@@ -529,35 +529,30 @@ class Patch(artist.Artist):
         """Return the hatching pattern."""
         return self._hatch
 
+    @contextlib.contextmanager
     @contextlib.contextmanager
     def _bind_draw_path_function(self, renderer):
         """
-        ``draw()`` helper factored out for sharing with `FancyArrowPatch`.
+        Context manager to temporarily bind a renderer's draw_path function.
 
-        Yields a callable ``dp`` such that calling ``dp(*args, **kwargs)`` is
-        equivalent to calling ``renderer1.draw_path(gc, *args, **kwargs)``
-        where ``renderer1`` and ``gc`` have been suitably set from ``renderer``
-        and the artist's properties.
-        """
+        This is used to customize the draw_path function for different types of
+        patches. For example, filled patches might use a different draw_path
+        function than unfilled patches.
 
+        The context manager yields the bound draw_path function.
+        """
         renderer.open_group('patch', self.get_gid())
         gc = renderer.new_gc()
 
         gc.set_foreground(self._edgecolor, isRGBA=True)
-
-        lw = self._linewidth
-        if self._edgecolor[3] == 0 or self._linestyle == 'None':
-            lw = 0
-        gc.set_linewidth(lw)
+        gc.set_linewidth(self._linewidth)
         gc.set_dashes(*self._dash_pattern)
         gc.set_capstyle(self._capstyle)
         gc.set_joinstyle(self._joinstyle)
-
         gc.set_antialiased(self._antialiased)
         self._set_gc_clip(gc)
         gc.set_url(self._url)
         gc.set_snap(self.get_snap())
-
         gc.set_alpha(self._alpha)
 
         if self._hatch:
@@ -571,25 +566,26 @@ class Patch(artist.Artist):
             from matplotlib.patheffects import PathEffectRenderer
             renderer = PathEffectRenderer(self.get_path_effects(), renderer)
 
-        # In `with _bind_draw_path_function(renderer) as draw_path: ...`
-        # (in the implementations of `draw()` below), calls to `draw_path(...)`
-        # will occur as if they took place here with `gc` inserted as
-        # additional first argument.
-        yield functools.partial(renderer.draw_path, gc)
+        # Define a new draw_path function that uses the patch's properties
+        def draw_path(path, transform, rgbFace=None):
+            renderer.draw_path(gc, path, transform, rgbFace)
+
+        try:
+            # Yield the new draw_path function
+            yield draw_path
+        finally:
+            # Clean up
+            gc.restore()
+            renderer.close_group('patch')
 
-        gc.restore()
-        renderer.close_group('patch')
         self.stale = False
 
+    @artist.allow_rasterization
     @artist.allow_rasterization
     def draw(self, renderer):
-        # docstring inherited
         if not self.get_visible():
             return
-        # Patch has traditionally ignored the dashoffset.
-        with cbook._setattr_cm(
-                 self, _dash_pattern=(0, self._dash_pattern[1])), \
-             self._bind_draw_path_function(renderer) as draw_path:
+        with self._bind_draw_path_function(renderer) as draw_path:
             path = self.get_path()
             transform = self.get_transform()
             tpath = transform.transform_path_non_affine(path)
