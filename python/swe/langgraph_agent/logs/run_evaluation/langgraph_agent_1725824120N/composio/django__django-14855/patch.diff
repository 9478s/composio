diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72..f36dc6ae 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -204,12 +204,27 @@ class AdminReadonlyField:
         return format_html('<label{}>{}{}</label>', flatatt(attrs), capfirst(label), self.form.label_suffix)
 
     def get_admin_url(self, remote_field, remote_obj):
+        import warnings
+        from django.utils.deprecation import RemovedInDjango50Warning
+
         url_name = 'admin:%s_%s_change' % (
             remote_field.model._meta.app_label,
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name
+            )
+            warnings.warn(
+                'The behavior of get_admin_url for readonly fields in custom admin '
+                'sites has changed. It now uses the custom admin site\'s name for '
+                'URL reversing. This ensures consistent behavior across both custom '
+                'and default admin sites.',
+                RemovedInDjango50Warning,
+                stacklevel=2,
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt
index e787349d..512c5063 100644
--- a/docs/ref/contrib/admin/index.txt
+++ b/docs/ref/contrib/admin/index.txt
@@ -1249,32 +1249,47 @@ subclass::
 
 .. attribute:: ModelAdmin.readonly_fields
 
-    By default the admin shows all fields as editable. Any fields in this
-    option (which should be a ``list`` or ``tuple``) will display its data
-    as-is and non-editable; they are also excluded from the
-    :class:`~django.forms.ModelForm` used for creating and editing. Note that
-    when specifying :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets`
-    the read-only fields must be present to be shown (they are ignored
-    otherwise).
+    By default the admin shows all fields as editable. Any fields in this option
+    (which should be a list or tuple) will display its data as-is and
+    non-editable; they are also excluded from the :class:`ModelForm` used for
+    creating and editing. Note that when specifying :attr:`ModelAdmin.fields` or
+    :attr:`ModelAdmin.fieldsets` the read-only fields must be present to be
+    shown (they are ignored otherwise).
 
     If ``readonly_fields`` is used without defining explicit ordering through
     :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be
-    added last after all editable fields.
+    added after all editable fields.
 
     A read-only field can not only display data from a model's field, it can
     also display the output of a model's method or a method of the
     ``ModelAdmin`` class itself. This is very similar to the way
-    :attr:`ModelAdmin.list_display` behaves. This provides a way to use the
-    admin interface to provide feedback on the status of the objects being
+    :attr:`ModelAdmin.list_display` behaves. This provides an easy way to use
+    the admin interface to provide feedback on the status of the objects being
     edited, for example::
 
         from django.contrib import admin
-        from django.utils.html import format_html_join
-        from django.utils.safestring import mark_safe
+        from django.utils.html import format_html
 
         class PersonAdmin(admin.ModelAdmin):
             readonly_fields = ('address_report',)
 
+            def address_report(self, instance):
+                return format_html(
+                    '<span style="color: {};">{} {}</span>',
+                    instance.color_code,
+                    instance.street,
+                    instance.city,
+                )
+
+            # short_description functions like a model field's verbose_name
+            address_report.short_description = "Address"
+
+    .. note::
+        When using a custom admin site, the URL for the change form of a
+        related object in a readonly field will use the custom admin site's
+        name. This ensures consistent behavior across both custom and default
+        admin sites.
+
             # description functions like a model field's verbose_name
             @admin.display(description='Address')
             def address_report(self, instance):
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 9f9e924b..aead356f 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -6769,4 +6769,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):
         unknown_url = '/unknown/'
         response = self.client.get(unknown_url)
         # Does not redirect to the admin login.
+
+class CustomAdminSiteReadonlyFieldsTest(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.superuser = User.objects.create_superuser(
+            username='super', email='super@example.com', password='secret'
+        )
+        cls.book = Book.objects.create(name='Test Book', author='Test Author')
+
+    def setUp(self):
+        self.client.force_login(self.superuser)
+
+    def test_readonly_field_custom_admin_site_url(self):
+        class CustomBookAdmin(admin.ModelAdmin):
+            readonly_fields = ('author',)
+
+        custom_site = AdminSite(name='custom_admin')
+        custom_site.register(Book, CustomBookAdmin)
+
+        response = self.client.get(
+            reverse('custom_admin:admin_views_book_change', args=(self.book.pk,), current_app='custom_admin')
+        )
+
+        self.assertContains(response, f'<a href="/custom_admin/admin_views/author/{self.book.author.pk}/change/">')
+
+    def test_readonly_field_default_admin_site_url(self):
+        class DefaultBookAdmin(admin.ModelAdmin):
+            readonly_fields = ('author',)
+
+        default_site = admin.site
+        default_site.register(Book, DefaultBookAdmin)
+
+        response = self.client.get(
+            reverse('admin:admin_views_book_change', args=(self.book.pk,))
+        )
+
+        self.assertContains(response, f'<a href="/admin/admin_views/author/{self.book.author.pk}/change/">')
+
         self.assertEqual(response.status_code, 404)
