diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fd..ffe08b88 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1440,3 +1440,36 @@ class ValueRange(WindowFrame):
 
     def window_frame_start_end(self, connection, start, end):
         return connection.ops.window_frame_range_start_end(start, end)
+
+class Exists(Subquery):
+    template = 'EXISTS(%(subquery)s)'
+    output_field = fields.BooleanField()
+
+    def __init__(self, *args, negated=False, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.negated = negated
+
+    def __invert__(self):
+        return type(self)(self.queryset, negated=not self.negated)
+
+    def as_sql(self, compiler, connection, template=None, **extra_context):
+        sql, params = super().as_sql(
+            compiler, connection,
+            template=template, **extra_context
+        )
+        if self.negated:
+            sql = 'NOT {}'.format(sql)
+        return sql, params
+
+    def select_format(self, compiler, sql, params):
+        # Wrap EXISTS() with a CASE WHEN expression if a database backend
+        # (e.g. Oracle) doesn't support boolean expression in SELECT or GROUP
+        # BY list.
+        if not compiler.connection.features.supports_boolean_expr_in_select_clause:
+            sql = 'CASE WHEN {} THEN 1 ELSE 0 END'.format(sql)
+        return sql, params
+
+    def __rand__(self, other):
+        if isinstance(other, Q):
+            return other & self
+        return NotImplemented
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa5..e7e76f10 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -11,6 +11,7 @@ from collections import namedtuple
 
 from django.core.exceptions import FieldError
 from django.db.models.constants import LOOKUP_SEP
+from django.db.models.expressions import Exists
 from django.utils import tree
 
 # PathInfo is used when converting lookups (fk__somecol). The contents
@@ -38,24 +39,21 @@ class Q(tree.Node):
 
     def __init__(self, *args, _connector=None, _negated=False, **kwargs):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
-
     def _combine(self, other, conn):
-        if not isinstance(other, Q):
+        if isinstance(other, (Q, Exists)):
+            if not other:
+                return self
+            if not self:
+                return other
+            obj = type(self)()
+            obj.connector = conn
+            obj.add(self, conn)
+            obj.add(other, conn)
+            return obj
+        elif isinstance(other, bool):
+            return self if other else type(self)()
+        else:
             raise TypeError(other)
-
-        # If the other Q() is empty, ignore it and just use `self`.
-        if not other:
-            _, args, kwargs = self.deconstruct()
-            return type(self)(*args, **kwargs)
-        # Or if this Q is empty, ignore it and just use `other`.
-        elif not self:
-            _, args, kwargs = other.deconstruct()
-            return type(other)(*args, **kwargs)
-
-        obj = type(self)()
-        obj.connector = conn
-        obj.add(self, conn)
-        obj.add(other, conn)
         return obj
 
     def __or__(self, other):
