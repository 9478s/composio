diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfce..2cd20d0 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,32 +1299,38 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
-    if "." not in value_str and "E" not in value_str:
-        value_str += ".0"
-    elif "E" in value_str:
-        # On some Windows builds of Python (and possibly other platforms?) the
-        # exponent is zero-padded out to, it seems, three digits.  Normalize
-        # the format to pad only to two digits.
-        significand, exponent = value_str.split("E")
-        if exponent[0] in ("+", "-"):
-            sign = exponent[0]
-            exponent = exponent[1:]
-        else:
-            sign = ""
-        value_str = f"{significand}E{sign}{int(exponent):02d}"
-
+    # First, try using the default str() representation
+    value_str = str(value)
+    
+    # If the resulting string is longer than 20 characters or doesn't contain a decimal point,
+    # fall back to the current implementation
+    if len(value_str) > 20 or '.' not in value_str:
+        value_str = f"{value:.16G}"
+        if "." not in value_str and "E" not in value_str:
+            value_str += ".0"
+        elif "E" in value_str:
+            # On some Windows builds of Python (and possibly other platforms?) the
+            # exponent is zero-padded out to, it seems, three digits.  Normalize
+            # the format to pad only to two digits.
+            significand, exponent = value_str.split("E")
+            if exponent[0] in ("+", "-"):
+                sign = exponent[0]
+                exponent = exponent[1:]
+            else:
+                sign = ""
+            value_str = f"{significand}E{sign}{int(exponent):02d}"
+    
     # Limit the value string to at most 20 characters.
     str_len = len(value_str)
-
+    
     if str_len > 20:
         idx = value_str.find("E")
-
+        
         if idx < 0:
             value_str = value_str[:20]
         else:
             value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]
-
+    
     return value_str
 
 
diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py
index a8f4e11..55af1e7 100644
--- a/astropy/io/fits/tests/test_header.py
+++ b/astropy/io/fits/tests/test_header.py
@@ -3175,4 +3175,28 @@ def test_subclass():
     assert copy_.comments["b"] == "second"
     assert copy_.comments["c"] == "no comment"
     my_header.extend((("d", 4.0),))
+    def test_format_float_card(self):
+        """Test the new float formatting behavior in Card creation."""
+        # Test case from the original issue
+        c = fits.Card('HIERARCH ESO IFM CL RADIUS', 0.009125, '[m] radius around actuator to avoid')
+        assert str(c) == "HIERARCH ESO IFM CL RADIUS = 0.009125 / [m] radius around actuator to avoid    "
+
+        # Test with a variety of float values
+        test_cases = [
+            (0.1, "0.1"),
+            (0.12345678901234567, "0.12345678901234567"),
+            (1.234e-30, "1.234E-30"),
+            (1.234e30, "1.234E+30"),
+            (1000000.0, "1000000.0"),
+            (1e-8, "1E-8"),
+        ]
+
+        for value, expected in test_cases:
+            c = fits.Card('TEST', value)
+            assert c.value == value
+            assert expected in str(c)
+
+        # Test that very long representations are still truncated
+        c = fits.Card('TEST', 0.123456789012345678901234567890)
+        assert len(str(c)) == 80  # Standard FITS card length
     assert my_header.comments["d"] == "no comment"
