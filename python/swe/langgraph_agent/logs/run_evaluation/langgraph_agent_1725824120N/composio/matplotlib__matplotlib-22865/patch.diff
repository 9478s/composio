diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index c59b0ac..1acb097 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -651,8 +651,14 @@ class Colorbar:
             if not self.drawedges:
                 if len(self._y) >= self.n_rasterize:
                     self.solids.set_rasterized(True)
-        self.dividers.set_segments(
-            np.dstack([X, Y])[1:-1] if self.drawedges else [])
+        if self.drawedges:
+            if self.extend == 'both':
+                segments = np.dstack([X, Y])
+            else:
+                segments = np.dstack([X, Y])[1:-1]
+        else:
+            segments = []
+        self.dividers.set_segments(segments)
 
     def _add_solids_patches(self, X, Y, C, mappable):
         hatches = mappable.hatches * len(C)  # Have enough hatches.
diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py
index ae3ab92..c101720 100644
--- a/lib/matplotlib/tests/test_colorbar.py
+++ b/lib/matplotlib/tests/test_colorbar.py
@@ -1037,3 +1037,25 @@ def test_title_text_loc():
     # colorbar axes, including its extend triangles....
     assert (cb.ax.title.get_window_extent(fig.canvas.get_renderer()).ymax >
             cb.ax.spines['outline'].get_window_extent().ymax)
+
+@image_comparison(['colorbar_edges_both.png'], remove_text=True, style='mpl20')
+def test_colorbar_edges_both():
+    """
+    Test colorbar with extend='both' and drawedges=True.
+    This test ensures that the edges are drawn at the extremities.
+    """
+    fig, ax = plt.subplots(figsize=(5, 1))
+    
+    # Create data and colormap
+    data = np.linspace(0, 10, 100).reshape(10, 10)
+    cmap = plt.cm.viridis
+    
+    # Create colorbar with extend='both' and drawedges=True
+    im = ax.imshow(data, cmap=cmap)
+    cbar = fig.colorbar(im, ax=ax, extend='both', drawedges=True)
+    
+    # Set the colorbar ticks
+    cbar.set_ticks([0, 5, 10])
+    
+    # Adjust the layout
+    fig.tight_layout()
