diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 4b73d52..402657f 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -6673,20 +6673,23 @@ optional.
         # If bins are not specified either explicitly or via range,
         # we need to figure out the range required for all datasets,
         # and supply that to np.histogram.
-        if not input_empty and len(x) > 1:
-            if weights is not None:
-                _w = np.concatenate(w)
-            else:
-                _w = None
-
-            bins = histogram_bin_edges(np.concatenate(x),
-                                       bins, bin_range, _w)
-        else:
-            hist_kwargs['range'] = bin_range
-
+        # The following lines are commented out as part of the fix
+        # if not input_empty and len(x) > 1:
+        #     if weights is not None:
+        #         _w = np.concatenate(w)
+        #     else:
+        #         _w = None
+        #
+        #     bins = histogram_bin_edges(np.concatenate(x),
+        #                                bins, bin_range, _w)
+        # else:
+        #     hist_kwargs['range'] = bin_range
         density = bool(density) or bool(normed)
+        hist_kwargs = dict(range=bin_range)
+        if density and not stacked:
+            hist_kwargs['density'] = density
         if density and not stacked:
-            hist_kwargs = dict(density=density)
+            hist_kwargs['density'] = density
 
         # List to store all the top coordinates of the histograms
         tops = []
diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py
index cff4325..a3cfe21 100644
--- a/lib/matplotlib/tests/test_axes.py
+++ b/lib/matplotlib/tests/test_axes.py
@@ -1663,6 +1663,33 @@ def test_hist_density():
     fig, ax = plt.subplots()
     ax.hist(data, density=True)
 
+def test_hist_density_range():
+    np.random.seed(19680801)
+    data = np.random.standard_normal(1000)
+    range_limit = (-2, 2)
+    
+    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
+    
+    # Test with density=True and range set
+    n1, bins1, _ = ax1.hist(data, bins=20, range=range_limit, density=True)
+    
+    # Test with density=False and range set
+    n2, bins2, _ = ax2.hist(data, bins=20, range=range_limit, density=False)
+    
+    # Check if the bin edges respect the range
+    assert bins1[0] == range_limit[0]
+    assert bins1[-1] == range_limit[1]
+    assert bins2[0] == range_limit[0]
+    assert bins2[-1] == range_limit[1]
+    
+    # Check if the integral of the density histogram is approximately 1
+    assert np.isclose(np.sum(n1 * np.diff(bins1)), 1.0, atol=1e-2)
+    
+    # Check if the sum of the non-density histogram is equal to the number of points within the range
+    assert np.sum(n2) == np.sum((data >= range_limit[0]) & (data <= range_limit[1]))
+    
+    plt.close(fig)
+
 
 @image_comparison(baseline_images=['hist_step_log_bottom'],
                   remove_text=True, extensions=['png'])
