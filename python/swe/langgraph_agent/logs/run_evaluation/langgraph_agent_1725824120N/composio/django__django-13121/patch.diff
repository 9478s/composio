diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index 31e8a55a..6edb9080 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -23,7 +23,7 @@ from django.db.backends.base.base import BaseDatabaseWrapper
 from django.utils import timezone
 from django.utils.asyncio import async_unsafe
 from django.utils.dateparse import parse_datetime, parse_time
-from django.utils.duration import duration_microseconds
+from django.utils.duration import duration_microseconds, parse_duration
 from django.utils.regex_helper import _lazy_re_compile
 from django.utils.version import PY38
 
@@ -53,7 +53,28 @@ def none_guard(func):
     def wrapper(*args, **kwargs):
         return None if None in args else func(*args, **kwargs)
     return wrapper
+@none_guard
+def django_parse_duration(value):
+    if isinstance(value, str):
+        # Parse duration string (assuming ISO 8601 format)
+        try:
+            return duration_microseconds(parse_duration(value))
+        except ValueError:
+            return None
+    elif isinstance(value, (int, float)):
+        # Assume it's already in microseconds
+        return int(value)
+    else:
+        return None
 
+@none_guard
+def django_combine_duration(op, duration1, duration2):
+    if op == '+':
+        return duration1 + duration2
+    elif op == '-':
+        return duration1 - duration2
+    else:
+        raise ValueError(f"Unsupported operation: {op}")
 
 def list_aggregate(function):
     """
diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 9510b5ed..f8880dc7 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -339,10 +339,22 @@ class DatabaseOperations(BaseDatabaseOperations):
     def combine_duration_expression(self, connector, sub_expressions):
         if connector not in ['+', '-']:
             raise DatabaseError('Invalid connector for timedelta: %s.' % connector)
-        fn_params = ["'%s'" % connector] + sub_expressions
+        
+        # Convert sub_expressions to ensure proper handling
+        converted_expressions = []
+        for expr in sub_expressions:
+            if isinstance(expr, str) and expr.startswith("'") and expr.endswith("'"):
+                # It's already a string literal, leave it as is
+                converted_expressions.append(expr)
+            else:
+                # Wrap it in a conversion function
+                converted_expressions.append(f"django_parse_duration({expr})")
+        
+        fn_params = [f"'{connector}'"] + converted_expressions
         if len(fn_params) > 3:
             raise ValueError('Too many params for timedelta operations.')
-        return "django_format_dtdelta(%s)" % ', '.join(fn_params)
+        
+        return f"django_combine_duration({', '.join(fn_params)})"
 
     def integer_field_range(self, internal_type):
         # SQLite doesn't enforce any integer constraints
