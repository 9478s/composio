diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py
index 44674d1..1314153 100644
--- a/sympy/core/symbol.py
+++ b/sympy/core/symbol.py
@@ -208,10 +208,34 @@ def __new__(cls, name, **assumptions):
         >>> Symbol("x", real=True) == Symbol("x", real=False)
         False
 
+        Note on assumptions:
+        - Assumptions are not automatically inferred. For example, `even=True`
+          does not imply `finite=True`.
+        - If you need a symbol with multiple common assumptions, consider using
+          the `real_symbol`, `integer_symbol`, or `real_nonnegative_symbol` methods.
+
+        See Also
+        ========
+        real_symbol, integer_symbol, real_nonnegative_symbol
         """
         cls._sanitize(assumptions, cls)
         return Symbol.__xnew_cached_(cls, name, **assumptions)
 
+    @classmethod
+    def real_symbol(cls, name):
+        """Create a real, finite symbol."""
+        return cls(name, real=True, finite=True)
+
+    @classmethod
+    def integer_symbol(cls, name):
+        """Create an integer symbol (implies real and finite)."""
+        return cls(name, integer=True)
+
+    @classmethod
+    def real_nonnegative_symbol(cls, name):
+        """Create a real, finite, non-negative symbol."""
+        return cls(name, real=True, finite=True, nonnegative=True)
+
     def __new_stage2__(cls, name, **assumptions):
         if not isinstance(name, string_types):
             raise TypeError("name should be a string, not %s" % repr(type(name)))
diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py
index 61f36df..1d90148 100644
--- a/sympy/core/tests/test_symbol.py
+++ b/sympy/core/tests/test_symbol.py
@@ -382,3 +382,42 @@ def test_disambiguate():
     assert disambiguate(*t7) == (y*y_1, y_1)
     assert disambiguate(Dummy('x_1'), Dummy('x_1')
         ) == (x_1, Symbol('x_1_1'))
+
+def test_symbol_assumptions():
+    x = Symbol('x', even=True)
+    assert x.is_even is True
+    assert x.is_finite is None  # even does not imply finite
+
+    y = Symbol('y', odd=True)
+    assert y.is_odd is True
+    assert y.is_finite is None  # odd does not imply finite
+
+    z = Symbol('z', prime=True)
+    assert z.is_prime is True
+    assert z.is_finite is True  # prime implies finite
+
+def test_symbol_class_methods():
+    x = Symbol.real_symbol('x')
+    assert x.is_real is True
+    assert x.is_finite is True
+
+    y = Symbol.integer_symbol('y')
+    assert y.is_integer is True
+    assert y.is_real is True
+    assert y.is_finite is True
+
+    z = Symbol.real_nonnegative_symbol('z')
+    assert z.is_real is True
+    assert z.is_finite is True
+    assert z.is_nonnegative is True
+
+def test_symbol_assumptions_independence():
+    x = Symbol('x', even=True)
+    y = Symbol('y', even=True, finite=True)
+    assert x.is_finite is None
+    assert y.is_finite is True
+
+    a = Symbol('a', positive=True)
+    b = Symbol('b', positive=True, real=True)
+    assert a.is_real is None
+    assert b.is_real is True
