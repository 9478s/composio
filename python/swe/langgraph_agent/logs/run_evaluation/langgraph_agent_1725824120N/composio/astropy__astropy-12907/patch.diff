diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index a308e27..aaac97f 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -298,19 +298,29 @@ def _separable(transform):
 
     Returns :
     is_separable : ndarray of dtype np.bool
-        An array of shape (transform.n_outputs,) of boolean type
-        Each element represents the separablity of the corresponding output.
+        An array of shape (transform.n_outputs, transform.n_inputs) of boolean type
+        Each element represents the separability of the corresponding output.
     """
     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:
         return transform_matrix
     elif isinstance(transform, CompoundModel):
         sepleft = _separable(transform.left)
         sepright = _separable(transform.right)
-        return _operators[transform.op](sepleft, sepright)
+        
+        # If either component is a CompoundModel, we need to combine their matrices
+        if isinstance(transform.left, CompoundModel) or isinstance(transform.right, CompoundModel):
+            combined_matrix = np.zeros((sepleft.shape[0] + sepright.shape[0], 
+                                        max(sepleft.shape[1], sepright.shape[1])), dtype=bool)
+            combined_matrix[:sepleft.shape[0], :sepleft.shape[1]] = sepleft
+            combined_matrix[sepleft.shape[0]:, :sepright.shape[1]] = sepright
+            return combined_matrix
+        else:
+            return _operators[transform.op](sepleft, sepright)
     elif isinstance(transform, Model):
         return _coord_matrix(transform, 'left', transform.n_outputs)
 
 
+
 # Maps modeling operators to a function computing and represents the
 # relationship of axes as an array of 0-es and 1-s
 _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,
diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py
index 8dfe5c8..f86a19a 100644
--- a/astropy/modeling/tests/test_separable.py
+++ b/astropy/modeling/tests/test_separable.py
@@ -147,4 +147,41 @@ def test_custom_model_separable():
         return x + y
 
     assert not model_c().separable
-    assert np.all(separability_matrix(model_c()) == [True, True])
+
+def test_nested_compound_model():
+    from astropy.modeling import models as m
+    from astropy.modeling.separable import separability_matrix
+
+    # Create a nested compound model
+    cm = m.Linear1D(10) & m.Linear1D(5)
+    nested_model = m.Pix2Sky_TAN() & cm
+
+    # Calculate the separability matrix
+    result = separability_matrix(nested_model)
+
+    # Expected result
+    expected = np.array([
+        [True, True, False, False],
+        [True, True, False, False],
+        [False, False, True, False],
+        [False, False, False, True]
+    ])
+
+    # Check if the result matches the expected output
+    assert np.array_equal(result, expected), f"Expected {expected}, but got {result}"
+
+    # Test with a more complex nested model
+    complex_nested = m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Polynomial2D(2))
+    result_complex = separability_matrix(complex_nested)
+
+    # Expected result for the complex nested model
+    expected_complex = np.array([
+        [True, True, False, False, False],
+        [True, True, False, False, False],
+        [False, False, True, False, False],
+        [False, False, False, True, True],
+        [False, False, False, True, True]
+    ])
+
+    # Check if the result matches the expected output for the complex nested model
+    assert np.array_equal(result_complex, expected_complex), f"Expected {expected_complex}, but got {result_complex}"
