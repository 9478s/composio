diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2d3072d..e6c01a5 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -679,7 +679,9 @@ class Colormap:
         #: the default value for the ``extend`` keyword in the
         #: `matplotlib.colorbar.Colorbar` constructor.
         self.colorbar_extend = False
-
+    # The following changes address NumPy deprecation warnings related to
+    # the future change in behavior for converting out-of-bound Python integers
+    # to integer arrays. We use np.clip to ensure values are within uint8 range.
     def __call__(self, X, alpha=None, bytes=False):
         """
         Parameters
@@ -727,9 +729,9 @@ class Colormap:
                 xa = xa.astype(int)
         # Set the over-range indices before the under-range;
         # otherwise the under-range values get converted to over-range.
-        xa[xa > self.N - 1] = self._i_over
-        xa[xa < 0] = self._i_under
-        xa[mask_bad] = self._i_bad
+        xa[xa > self.N - 1] = np.clip(self._i_over, 0, 255).astype(np.uint8)
+        xa[xa < 0] = np.clip(self._i_under, 0, 255).astype(np.uint8)
+        xa[mask_bad] = np.clip(self._i_bad, 0, 255).astype(np.uint8)
 
         lut = self._lut
         if bytes:
@@ -836,14 +838,15 @@ class Colormap:
         return new_cm
 
     def _set_extremes(self):
-        if self._rgba_under:
-            self._lut[self._i_under] = self._rgba_under
-        else:
-            self._lut[self._i_under] = self._lut[0]
-        if self._rgba_over:
-            self._lut[self._i_over] = self._rgba_over
-        else:
-            self._lut[self._i_over] = self._lut[self.N - 1]
+        self._i_under = self._i_over = self._i_bad = np.clip(self.N - 1, 0, 255).astype(np.uint8)
+        if self._rgba_bad is not None:
+            self._i_bad = np.clip(self.N, 0, 255).astype(np.uint8)
+        if self._rgba_under is not None:
+            self._i_under = np.clip(self.N + 1, 0, 255).astype(np.uint8)
+        if self._rgba_over is not None:
+            self._i_over = np.clip(self.N + 2, 0, 255).astype(np.uint8)
+        self._lut[self._i_under] = self._rgba_under or self._lut[0]
+        self._lut[self._i_over] = self._rgba_over or self._lut[self.N - 1]
         self._lut[self._i_bad] = self._rgba_bad
 
     def _init(self):
