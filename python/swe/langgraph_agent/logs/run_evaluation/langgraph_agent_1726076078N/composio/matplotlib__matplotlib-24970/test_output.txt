+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/colors.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit a3011dfd1aaa2487cce8aa7369475533133ef777
Merge: 018c5efbbe c1a8406349
Author: Oscar Gustafsson <oscar.gustafsson@gmail.com>
Date:   Fri Jan 13 10:11:49 2023 +0100

    Merge pull request #24965 from QuLogic/more-deprecations
    
    Remove additional deprecations from 3.5

+ git diff a3011dfd1aaa2487cce8aa7369475533133ef777
diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2d3072da04..e6c01a503a 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -679,7 +679,9 @@ class Colormap:
         #: the default value for the ``extend`` keyword in the
         #: `matplotlib.colorbar.Colorbar` constructor.
         self.colorbar_extend = False
-
+    # The following changes address NumPy deprecation warnings related to
+    # the future change in behavior for converting out-of-bound Python integers
+    # to integer arrays. We use np.clip to ensure values are within uint8 range.
     def __call__(self, X, alpha=None, bytes=False):
         """
         Parameters
@@ -727,9 +729,9 @@ class Colormap:
                 xa = xa.astype(int)
         # Set the over-range indices before the under-range;
         # otherwise the under-range values get converted to over-range.
-        xa[xa > self.N - 1] = self._i_over
-        xa[xa < 0] = self._i_under
-        xa[mask_bad] = self._i_bad
+        xa[xa > self.N - 1] = np.clip(self._i_over, 0, 255).astype(np.uint8)
+        xa[xa < 0] = np.clip(self._i_under, 0, 255).astype(np.uint8)
+        xa[mask_bad] = np.clip(self._i_bad, 0, 255).astype(np.uint8)
 
         lut = self._lut
         if bytes:
@@ -836,14 +838,15 @@ class Colormap:
         return new_cm
 
     def _set_extremes(self):
-        if self._rgba_under:
-            self._lut[self._i_under] = self._rgba_under
-        else:
-            self._lut[self._i_under] = self._lut[0]
-        if self._rgba_over:
-            self._lut[self._i_over] = self._rgba_over
-        else:
-            self._lut[self._i_over] = self._lut[self.N - 1]
+        self._i_under = self._i_over = self._i_bad = np.clip(self.N - 1, 0, 255).astype(np.uint8)
+        if self._rgba_bad is not None:
+            self._i_bad = np.clip(self.N, 0, 255).astype(np.uint8)
+        if self._rgba_under is not None:
+            self._i_under = np.clip(self.N + 1, 0, 255).astype(np.uint8)
+        if self._rgba_over is not None:
+            self._i_over = np.clip(self.N + 2, 0, 255).astype(np.uint8)
+        self._lut[self._i_under] = self._rgba_under or self._lut[0]
+        self._lut[self._i_over] = self._rgba_over or self._lut[self.N - 1]
         self._lut[self._i_bad] = self._rgba_bad
 
     def _init(self):
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (1.4.5)
Requirement already satisfied: numpy>=1.20 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (10.0.0)
Requirement already satisfied: pyparsing>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (2.8.2)
Requirement already satisfied: setuptools-scm>=7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools-scm>=7->matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools-scm>=7->matplotlib==3.7.0.dev1362+ga3011dfd1a.d20240912) (4.7.1)
Building wheels for collected packages: matplotlib
  Building editable for matplotlib (pyproject.toml): started
  Building editable for matplotlib (pyproject.toml): still running...
  Building editable for matplotlib (pyproject.toml): still running...
  Building editable for matplotlib (pyproject.toml): still running...
  Building editable for matplotlib (pyproject.toml): finished with status 'done'
  Created wheel for matplotlib: filename=matplotlib-3.7.0.dev1362+ga3011dfd1a.d20240912-0.editable-cp311-cp311-linux_x86_64.whl size=23322 sha256=ea8f6b064dd457bb273b7ae97d3b1f4a5b9b36b715acc1b6fb836d9fa3cdf695
  Stored in directory: /tmp/pip-ephem-wheel-cache-w5ysm2p6/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built matplotlib
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.7.0.dev1362+ga3011dfd1a
    Uninstalling matplotlib-3.7.0.dev1362+ga3011dfd1a:
      Successfully uninstalled matplotlib-3.7.0.dev1362+ga3011dfd1a
Successfully installed matplotlib-3.7.0.dev1362+ga3011dfd1a.d20240912
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout a3011dfd1aaa2487cce8aa7369475533133ef777 lib/matplotlib/tests/test_colors.py
Updated 0 paths from fba3126962
+ git apply -v -
Checking patch lib/matplotlib/tests/test_colors.py...
Applied patch lib/matplotlib/tests/test_colors.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_colors.py
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: cov-5.0.0, xdist-3.6.1, timeout-2.3.1, rerunfailures-14.0
collected 256 items

lib/matplotlib/tests/test_colors.py .......F..F....F.F.................. [ 14%]
...........F...FF.F....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 42%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 70%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF...............FF.......... [ 98%]
s...                                                                     [100%]

=================================== FAILURES ===================================
________________________________ test_resampled ________________________________

    def test_resampled():
        """
        GitHub issue #6025 pointed to incorrect ListedColormap.resampled;
        here we test the method for LinearSegmentedColormap as well.
        """
        n = 101
        colorlist = np.empty((n, 4), float)
        colorlist[:, 0] = np.linspace(0, 1, n)
        colorlist[:, 1] = 0.2
        colorlist[:, 2] = np.linspace(1, 0, n)
        colorlist[:, 3] = 0.7
        lsc = mcolors.LinearSegmentedColormap.from_list('lsc', colorlist)
        lc = mcolors.ListedColormap(colorlist)
        # Set some bad values for testing too
        for cmap in [lsc, lc]:
            cmap.set_under('r')
            cmap.set_over('g')
            cmap.set_bad('b')
        lsc3 = lsc.resampled(3)
        lc3 = lc.resampled(3)
        expected = np.array([[0.0, 0.2, 1.0, 0.7],
                             [0.5, 0.2, 0.5, 0.7],
                             [1.0, 0.2, 0.0, 0.7]], float)
        assert_array_almost_equal(lsc3([0, 0.5, 1]), expected)
        assert_array_almost_equal(lc3([0, 0.5, 1]), expected)
        # Test over/under was copied properly
>       assert_array_almost_equal(lsc(np.inf), lsc3(np.inf))

lib/matplotlib/tests/test_colors.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaadd08afc0>, (0.0, 0.0, 1.0, 1.0), (0.0, 0.5, 0.0, 1.0))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 2 / 4 (50%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([0., 0., 1., 1.])
E            y: array([0. , 0.5, 0. , 1. ])

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_double_register_builtin_cmap _______________________

    def test_double_register_builtin_cmap():
        name = "viridis"
        match = f"Re-registering the builtin cmap {name!r}."
        with pytest.raises(ValueError, match=match):
            matplotlib.colormaps.register(
                mpl.colormaps[name], name=name, force=True
            )
        with pytest.raises(ValueError, match='A colormap named "viridis"'):
            with pytest.warns(mpl.MatplotlibDeprecationWarning):
                cm.register_cmap(name, mpl.colormaps[name])
>       with pytest.warns(UserWarning):
E       matplotlib._api.deprecation.MatplotlibDeprecationWarning: The register_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps.register(name)`` instead.

lib/matplotlib/tests/test_colors.py:149: MatplotlibDeprecationWarning
____________________________ test_colormap_invalid _____________________________

    def test_colormap_invalid():
        """
        GitHub issue #9892: Handling of nan's were getting mapped to under
        rather than bad. This tests to make sure all invalid values
        (-inf, nan, inf) are mapped respectively to (under, bad, over).
        """
        cmap = mpl.colormaps["plasma"]
        x = np.array([-np.inf, -1, 0, np.nan, .7, 2, np.inf])
    
        expected = np.array([[0.050383, 0.029803, 0.527975, 1.],
                             [0.050383, 0.029803, 0.527975, 1.],
                             [0.050383, 0.029803, 0.527975, 1.],
                             [0.,       0.,       0.,       0.],
                             [0.949217, 0.517763, 0.295662, 1.],
                             [0.940015, 0.975158, 0.131326, 1.],
                             [0.940015, 0.975158, 0.131326, 1.]])
>       assert_array_equal(cmap(x), expected)

lib/matplotlib/tests/test_colors.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<built-in function eq>, array([[0.      , 0.      , 0.      , 0.      ],
       [0.      , 0.      , 0.      , 0.    ....295662, 1.      ],
       [0.940015, 0.975158, 0.131326, 1.      ],
       [0.940015, 0.975158, 0.131326, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 16 / 28 (57.1%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , 0.      ],
E                  [0.050383, 0.029803, 0.527975, 1.      ],...
E            y: array([[0.050383, 0.029803, 0.527975, 1.      ],
E                  [0.050383, 0.029803, 0.527975, 1.      ],
E                  [0.050383, 0.029803, 0.527975, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________________ test_BoundaryNorm _______________________________

    def test_BoundaryNorm():
        """
        GitHub issue #1258: interpolation was failing with numpy
        1.7 pre-release.
        """
    
        boundaries = [0, 1.1, 2.2]
        vals = [-1, 0, 1, 2, 2.2, 4]
    
        # Without interpolation
        expected = [-1, 0, 0, 1, 2, 2]
        ncolors = len(boundaries) - 1
        bn = mcolors.BoundaryNorm(boundaries, ncolors)
        assert_array_equal(bn(vals), expected)
    
        # ncolors != len(boundaries) - 1 triggers interpolation
        expected = [-1, 0, 0, 2, 3, 3]
        ncolors = len(boundaries)
        bn = mcolors.BoundaryNorm(boundaries, ncolors)
        assert_array_equal(bn(vals), expected)
    
        # with a single region and interpolation
        expected = [-1, 1, 1, 1, 3, 3]
        bn = mcolors.BoundaryNorm([0, 2.2], ncolors)
        assert_array_equal(bn(vals), expected)
    
        # more boundaries for a third color
        boundaries = [0, 1, 2, 3]
        vals = [-1, 0.1, 1.1, 2.2, 4]
        ncolors = 5
        expected = [-1, 0, 2, 4, 5]
        bn = mcolors.BoundaryNorm(boundaries, ncolors)
        assert_array_equal(bn(vals), expected)
    
        # a scalar as input should not trigger an error and should return a scalar
        boundaries = [0, 1, 2]
        vals = [-1, 0.1, 1.1, 2.2]
        bn = mcolors.BoundaryNorm(boundaries, 2)
        expected = [-1, 0, 1, 2]
        for v, ex in zip(vals, expected):
            ret = bn(v)
            assert isinstance(ret, int)
            assert_array_equal(ret, ex)
            assert_array_equal(bn([v]), ex)
    
        # same with interp
        bn = mcolors.BoundaryNorm(boundaries, 3)
        expected = [-1, 0, 2, 3]
        for v, ex in zip(vals, expected):
            ret = bn(v)
            assert isinstance(ret, int)
            assert_array_equal(ret, ex)
            assert_array_equal(bn([v]), ex)
    
        # Clipping
        bn = mcolors.BoundaryNorm(boundaries, 3, clip=True)
        expected = [0, 0, 2, 2]
        for v, ex in zip(vals, expected):
            ret = bn(v)
            assert isinstance(ret, int)
            assert_array_equal(ret, ex)
            assert_array_equal(bn([v]), ex)
    
        # Masked arrays
        boundaries = [0, 1.1, 2.2]
        vals = np.ma.masked_invalid([-1., np.NaN, 0, 1.4, 9])
    
        # Without interpolation
        ncolors = len(boundaries) - 1
        bn = mcolors.BoundaryNorm(boundaries, ncolors)
        expected = np.ma.masked_array([-1, -99, 0, 1, 2], mask=[0, 1, 0, 0, 0])
        assert_array_equal(bn(vals), expected)
    
        # With interpolation
        bn = mcolors.BoundaryNorm(boundaries, len(boundaries))
        expected = np.ma.masked_array([-1, -99, 0, 2, 3], mask=[0, 1, 0, 0, 0])
        assert_array_equal(bn(vals), expected)
    
        # Non-trivial masked arrays
        vals = np.ma.masked_invalid([np.Inf, np.NaN])
        assert np.all(bn(vals).mask)
        vals = np.ma.masked_invalid([np.Inf])
        assert np.all(bn(vals).mask)
    
        # Incompatible extend and clip
        with pytest.raises(ValueError, match="not compatible"):
            mcolors.BoundaryNorm(np.arange(4), 5, extend='both', clip=True)
    
        # Too small ncolors argument
        with pytest.raises(ValueError, match="ncolors must equal or exceed"):
            mcolors.BoundaryNorm(np.arange(4), 2)
    
        with pytest.raises(ValueError, match="ncolors must equal or exceed"):
            mcolors.BoundaryNorm(np.arange(4), 3, extend='min')
    
        with pytest.raises(ValueError, match="ncolors must equal or exceed"):
            mcolors.BoundaryNorm(np.arange(4), 4, extend='both')
    
        # Testing extend keyword, with interpolation (large cmap)
        bounds = [1, 2, 3]
        cmap = mpl.colormaps['viridis']
        mynorm = mcolors.BoundaryNorm(bounds, cmap.N, extend='both')
        refnorm = mcolors.BoundaryNorm([0] + bounds + [4], cmap.N)
        x = np.random.randn(100) * 10 + 2
        ref = refnorm(x)
        ref[ref == 0] = -1
        ref[ref == cmap.N - 1] = cmap.N
        assert_array_equal(mynorm(x), ref)
    
        # Without interpolation
        cmref = mcolors.ListedColormap(['blue', 'red'])
        cmref.set_over('black')
        cmref.set_under('white')
        cmshould = mcolors.ListedColormap(['white', 'blue', 'red', 'black'])
    
        assert mcolors.same_color(cmref.get_over(), 'black')
        assert mcolors.same_color(cmref.get_under(), 'white')
    
        refnorm = mcolors.BoundaryNorm(bounds, cmref.N)
        mynorm = mcolors.BoundaryNorm(bounds, cmshould.N, extend='both')
        assert mynorm.vmin == refnorm.vmin
        assert mynorm.vmax == refnorm.vmax
    
        assert mynorm(bounds[0] - 0.1) == -1  # under
        assert mynorm(bounds[0] + 0.1) == 1   # first bin -> second color
        assert mynorm(bounds[-1] - 0.1) == cmshould.N - 2  # next-to-last color
        assert mynorm(bounds[-1] + 0.1) == cmshould.N  # over
    
        x = [-1, 1.2, 2.3, 9.6]
        assert_array_equal(cmshould(mynorm(x)), cmshould([0, 1, 2, 3]))
        x = np.random.randn(100) * 10 + 2
>       assert_array_equal(cmshould(mynorm(x)), cmref(refnorm(x)))

lib/matplotlib/tests/test_colors.py:407: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<built-in function eq>, array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 0., 0....[1., 1., 1., 1.],
       [0., 0., 1., 1.],
       [0., 0., 0., 1.],
       [0., 0., 0., 1.],
       [1., 1., 1., 1.]]))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 138 / 400 (34.5%)
E           Max absolute difference: 1.
E           Max relative difference: 0.
E            x: array([[1., 1., 1., 1.],
E                  [1., 1., 1., 1.],
E                  [1., 1., 1., 1.],...
E            y: array([[0., 0., 0., 1.],
E                  [0., 0., 0., 1.],
E                  [1., 1., 1., 1.],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
___________________ test_boundarynorm_and_colorbarbase[png] ____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_boundarynorm_and_colorbarbase[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           matplotlib.testing.exceptions.ImageComparisonFailure: images not close (RMS 26.976):
E           	result_images/test_colors/boundarynorm_and_colorbar.png
E           	result_images/test_colors/boundarynorm_and_colorbar-expected.png
E           	result_images/test_colors/boundarynorm_and_colorbar-failed-diff.png

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: ImageComparisonFailure
_____________________ test_light_source_topo_surface[png] ______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_light_source_topo_surface[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           matplotlib.testing.exceptions.ImageComparisonFailure: images not close (RMS 0.162):
E           	result_images/test_colors/light_source_shading_topo.png
E           	result_images/test_colors/light_source_shading_topo-expected.png
E           	result_images/test_colors/light_source_shading_topo-failed-diff.png

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: ImageComparisonFailure
______________________ test_light_source_shading_default _______________________

    def test_light_source_shading_default():
        """
        Array comparison test for the default "hsv" blend mode. Ensure the
        default result doesn't change without warning.
        """
        y, x = np.mgrid[-1.2:1.2:8j, -1.2:1.2:8j]
        z = 10 * np.cos(x**2 + y**2)
    
        cmap = plt.cm.copper
        ls = mcolors.LightSource(315, 45)
        rgb = ls.shade(z, cmap)
    
        # Result stored transposed and rounded for more compact display...
        expect = np.array(
            [[[0.00, 0.45, 0.90, 0.90, 0.82, 0.62, 0.28, 0.00],
              [0.45, 0.94, 0.99, 1.00, 1.00, 0.96, 0.65, 0.17],
              [0.90, 0.99, 1.00, 1.00, 1.00, 1.00, 0.94, 0.35],
              [0.90, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 0.49],
              [0.82, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 0.41],
              [0.62, 0.96, 1.00, 1.00, 1.00, 1.00, 0.90, 0.07],
              [0.28, 0.65, 0.94, 1.00, 1.00, 0.90, 0.35, 0.01],
              [0.00, 0.17, 0.35, 0.49, 0.41, 0.07, 0.01, 0.00]],
    
             [[0.00, 0.28, 0.59, 0.72, 0.62, 0.40, 0.18, 0.00],
              [0.28, 0.78, 0.93, 0.92, 0.83, 0.66, 0.39, 0.11],
              [0.59, 0.93, 0.99, 1.00, 0.92, 0.75, 0.50, 0.21],
              [0.72, 0.92, 1.00, 0.99, 0.93, 0.76, 0.51, 0.18],
              [0.62, 0.83, 0.92, 0.93, 0.87, 0.68, 0.42, 0.08],
              [0.40, 0.66, 0.75, 0.76, 0.68, 0.52, 0.23, 0.02],
              [0.18, 0.39, 0.50, 0.51, 0.42, 0.23, 0.00, 0.00],
              [0.00, 0.11, 0.21, 0.18, 0.08, 0.02, 0.00, 0.00]],
    
             [[0.00, 0.18, 0.38, 0.46, 0.39, 0.26, 0.11, 0.00],
              [0.18, 0.50, 0.70, 0.75, 0.64, 0.44, 0.25, 0.07],
              [0.38, 0.70, 0.91, 0.98, 0.81, 0.51, 0.29, 0.13],
              [0.46, 0.75, 0.98, 0.96, 0.84, 0.48, 0.22, 0.12],
              [0.39, 0.64, 0.81, 0.84, 0.71, 0.31, 0.11, 0.05],
              [0.26, 0.44, 0.51, 0.48, 0.31, 0.10, 0.03, 0.01],
              [0.11, 0.25, 0.29, 0.22, 0.11, 0.03, 0.00, 0.00],
              [0.00, 0.07, 0.13, 0.12, 0.05, 0.01, 0.00, 0.00]],
    
             [[1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00]]
             ]).T
    
>       assert_array_almost_equal(rgb, expect, decimal=2)

lib/matplotlib/tests/test_colors.py:1029: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaadd7537e0>, array([[[0.        , 0.        , 0.        ,..., 0.05, 1.  ],
        [0.07, 0.02, 0.01, 1.  ],
        [0.01, 0.  , 0.  , 1.  ],
        [0.  , 0.  , 0.  , 1.  ]]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 2 decimals', 'precision': 2, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 2 decimals
E           
E           Mismatched elements: 16 / 256 (6.25%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[[0.  , 0.  , 0.  , 1.  ],
E                   [0.45, 0.28, 0.18, 1.  ],
E                   [0.9 , 0.59, 0.38, 1.  ],...
E            y: array([[[0.  , 0.  , 0.  , 1.  ],
E                   [0.45, 0.28, 0.18, 1.  ],
E                   [0.9 , 0.59, 0.38, 1.  ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_light_source_masked_shading _______________________

    def test_light_source_masked_shading():
        """
        Array comparison test for a surface with a masked portion. Ensures that
        we don't wind up with "fringes" of odd colors around masked regions.
        """
        y, x = np.mgrid[-1.2:1.2:8j, -1.2:1.2:8j]
        z = 10 * np.cos(x**2 + y**2)
    
        z = np.ma.masked_greater(z, 9.9)
    
        cmap = plt.cm.copper
        ls = mcolors.LightSource(315, 45)
        rgb = ls.shade(z, cmap)
    
        # Result stored transposed and rounded for more compact display...
        expect = np.array(
            [[[0.00, 0.46, 0.91, 0.91, 0.84, 0.64, 0.29, 0.00],
              [0.46, 0.96, 1.00, 1.00, 1.00, 0.97, 0.67, 0.18],
              [0.91, 1.00, 1.00, 1.00, 1.00, 1.00, 0.96, 0.36],
              [0.91, 1.00, 1.00, 0.00, 0.00, 1.00, 1.00, 0.51],
              [0.84, 1.00, 1.00, 0.00, 0.00, 1.00, 1.00, 0.44],
              [0.64, 0.97, 1.00, 1.00, 1.00, 1.00, 0.94, 0.09],
              [0.29, 0.67, 0.96, 1.00, 1.00, 0.94, 0.38, 0.01],
              [0.00, 0.18, 0.36, 0.51, 0.44, 0.09, 0.01, 0.00]],
    
             [[0.00, 0.29, 0.61, 0.75, 0.64, 0.41, 0.18, 0.00],
              [0.29, 0.81, 0.95, 0.93, 0.85, 0.68, 0.40, 0.11],
              [0.61, 0.95, 1.00, 0.78, 0.78, 0.77, 0.52, 0.22],
              [0.75, 0.93, 0.78, 0.00, 0.00, 0.78, 0.54, 0.19],
              [0.64, 0.85, 0.78, 0.00, 0.00, 0.78, 0.45, 0.08],
              [0.41, 0.68, 0.77, 0.78, 0.78, 0.55, 0.25, 0.02],
              [0.18, 0.40, 0.52, 0.54, 0.45, 0.25, 0.00, 0.00],
              [0.00, 0.11, 0.22, 0.19, 0.08, 0.02, 0.00, 0.00]],
    
             [[0.00, 0.19, 0.39, 0.48, 0.41, 0.26, 0.12, 0.00],
              [0.19, 0.52, 0.73, 0.78, 0.66, 0.46, 0.26, 0.07],
              [0.39, 0.73, 0.95, 0.50, 0.50, 0.53, 0.30, 0.14],
              [0.48, 0.78, 0.50, 0.00, 0.00, 0.50, 0.23, 0.12],
              [0.41, 0.66, 0.50, 0.00, 0.00, 0.50, 0.11, 0.05],
              [0.26, 0.46, 0.53, 0.50, 0.50, 0.11, 0.03, 0.01],
              [0.12, 0.26, 0.30, 0.23, 0.11, 0.03, 0.00, 0.00],
              [0.00, 0.07, 0.14, 0.12, 0.05, 0.01, 0.00, 0.00]],
    
             [[1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 0.00, 0.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 0.00, 0.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00],
              [1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00]],
             ]).T
    
>       assert_array_almost_equal(rgb, expect, decimal=2)

lib/matplotlib/tests/test_colors.py:1101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaadd752520>, array([[[0.        , 0.        , 0.        ,..., 0.05, 1.  ],
        [0.09, 0.02, 0.01, 1.  ],
        [0.01, 0.  , 0.  , 1.  ],
        [0.  , 0.  , 0.  , 1.  ]]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 2 decimals', 'precision': 2, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 2 decimals
E           
E           Mismatched elements: 32 / 256 (12.5%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[[0.  , 0.  , 0.  , 1.  ],
E                   [0.46, 0.29, 0.19, 1.  ],
E                   [0.91, 0.61, 0.39, 1.  ],...
E            y: array([[[0.  , 0.  , 0.  , 1.  ],
E                   [0.46, 0.29, 0.19, 1.  ],
E                   [0.91, 0.61, 0.39, 1.  ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Accent] ________________________

name = 'Accent'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaadd751e40>, array([[0.49803922, 0.78823529, 0.49803922, ... ],
       [0.74901961, 0.35686275, 0.09019608, 1.        ],
       [0.4       , 0.4       , 0.4       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.38823529
E           Max relative difference: 0.97058824
E            x: array([[0.498039, 0.788235, 0.498039, 1.      ],
E                  [0.745098, 0.682353, 0.831373, 1.      ],
E                  [0.992157, 0.752941, 0.52549 , 1.      ],...
E            y: array([[0.4     , 0.4     , 0.4     , 1.      ],
E                  [0.745098, 0.682353, 0.831373, 1.      ],
E                  [0.992157, 0.752941, 0.52549 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Accent_r] _______________________

name = 'Accent_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8360>, array([[0.4       , 0.4       , 0.4       , ... ],
       [0.74509804, 0.68235294, 0.83137255, 1.        ],
       [0.49803922, 0.78823529, 0.49803922, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.38823529
E           Max relative difference: 0.49253731
E            x: array([[0.4     , 0.4     , 0.4     , 1.      ],
E                  [0.74902 , 0.356863, 0.090196, 1.      ],
E                  [0.941176, 0.007843, 0.498039, 1.      ],...
E            y: array([[0.498039, 0.788235, 0.498039, 1.      ],
E                  [0.74902 , 0.356863, 0.090196, 1.      ],
E                  [0.941176, 0.007843, 0.498039, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[Blues] ________________________

name = 'Blues'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8a40>, array([[0.96862745, 0.98431373, 1.        , ... ],
       [0.03137255, 0.19229527, 0.42563629, 1.        ],
       [0.03137255, 0.18823529, 0.41960784, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.968627, 0.984314, 1.      , 1.      ],
E                  [0.965552, 0.982345, 0.999016, 1.      ],
E                  [0.962476, 0.980377, 0.998032, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.965552, 0.982345, 0.999016, 1.      ],
E                  [0.962476, 0.980377, 0.998032, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Blues_r] _______________________

name = 'Blues_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaadd751e40>, array([[0.03137255, 0.18823529, 0.41960784, ... ],
       [0.96555171, 0.98234525, 0.99901576, 1.        ],
       [0.96862745, 0.98431373, 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.031373, 0.188235, 0.419608, 1.      ],
E                  [0.031373, 0.192295, 0.425636, 1.      ],
E                  [0.031373, 0.196355, 0.431665, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.031373, 0.192295, 0.425636, 1.      ],
E                  [0.031373, 0.196355, 0.431665, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[BrBG] _________________________

name = 'BrBG'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b85e0>, array([[3.29411765e-01, 1.88235294e-01, 1.96...753172e-01, 1.95309496e-01, 1.00000000e+00],
       [0.00000000e+00, 2.35294118e-01, 1.88235294e-01, 1.00000000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[3.294118e-01, 1.882353e-01, 1.960784e-02, 1.000000e+00],
E                  [3.380238e-01, 1.933103e-01, 2.037678e-02, 1.000000e+00],
E                  [3.466359e-01, 1.983852e-01, 2.114571e-02, 1.000000e+00],...
E            y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00],
E                  [3.380238e-01, 1.933103e-01, 2.037678e-02, 1.000000e+00],
E                  [3.466359e-01, 1.983852e-01, 2.114571e-02, 1.000000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[BrBG_r] ________________________

name = 'BrBG_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b9620>, array([[0.00000000e+00, 2.35294118e-01, 1.88...310265e-01, 2.03767782e-02, 1.00000000e+00],
       [3.29411765e-01, 1.88235294e-01, 1.96078431e-02, 1.00000000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.000000e+00, 2.352941e-01, 1.882353e-01, 1.000000e+00],
E                  [1.537870e-04, 2.417532e-01, 1.953095e-01, 1.000000e+00],
E                  [3.075740e-04, 2.482122e-01, 2.023837e-01, 1.000000e+00],...
E            y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00],
E                  [1.537870e-04, 2.417532e-01, 1.953095e-01, 1.000000e+00],
E                  [3.075740e-04, 2.482122e-01, 2.023837e-01, 1.000000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[BuGn] _________________________

name = 'BuGn'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b9d00>, array([[0.96862745, 0.98823529, 0.99215686, ... ],
       [0.        , 0.27171088, 0.10797386, 1.        ],
       [0.        , 0.26666667, 0.10588235, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.968627, 0.988235, 0.992157, 1.      ],
E                  [0.966413, 0.987374, 0.991665, 1.      ],
E                  [0.964198, 0.986513, 0.991173, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.966413, 0.987374, 0.991665, 1.      ],
E                  [0.964198, 0.986513, 0.991173, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[BuGn_r] ________________________

name = 'BuGn_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8220>, array([[0.        , 0.26666667, 0.10588235, ... ],
       [0.96641292, 0.98737409, 0.99166474, 1.        ],
       [0.96862745, 0.98823529, 0.99215686, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.266667, 0.105882, 1.      ],
E                  [0.      , 0.271711, 0.107974, 1.      ],
E                  [0.      , 0.276755, 0.110065, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.271711, 0.107974, 1.      ],
E                  [0.      , 0.276755, 0.110065, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[BuPu] _________________________

name = 'BuPu'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8180>, array([[0.96862745, 0.98823529, 0.99215686, ... ],
       [0.30835832, 0.00184544, 0.3001461 , 1.        ],
       [0.30196078, 0.        , 0.29411765, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.968627, 0.988235, 0.992157, 1.      ],
E                  [0.965798, 0.986267, 0.99105 , 1.      ],
E                  [0.962968, 0.984298, 0.989942, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.965798, 0.986267, 0.99105 , 1.      ],
E                  [0.962968, 0.984298, 0.989942, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[BuPu_r] ________________________

name = 'BuPu_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8900>, array([[0.30196078, 0.        , 0.29411765, ... ],
       [0.96579777, 0.98626682, 0.9910496 , 1.        ],
       [0.96862745, 0.98823529, 0.99215686, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.301961, 0.      , 0.294118, 1.      ],
E                  [0.308358, 0.001845, 0.300146, 1.      ],
E                  [0.314756, 0.003691, 0.306175, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.308358, 0.001845, 0.300146, 1.      ],
E                  [0.314756, 0.003691, 0.306175, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[CMRmap] ________________________

name = 'CMRmap'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8b80>, array([[0.        , 0.        , 0.        , ... ],
       [0.99686275, 0.99686275, 0.98431373, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.004706, 0.004706, 0.015686, 1.      ],
E                  [0.009412, 0.009412, 0.031373, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.004706, 0.004706, 0.015686, 1.      ],
E                  [0.009412, 0.009412, 0.031373, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[CMRmap_r] _______________________

name = 'CMRmap_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8fe0>, array([[1.        , 1.        , 1.        , ... ],
       [0.00470588, 0.00470588, 0.01568627, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.996863, 0.996863, 0.984314, 1.      ],
E                  [0.993725, 0.993725, 0.968627, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996863, 0.996863, 0.984314, 1.      ],
E                  [0.993725, 0.993725, 0.968627, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[Dark2] ________________________

name = 'Dark2'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8900>, array([[0.10588235, 0.61960784, 0.46666667, ... ],
       [0.65098039, 0.4627451 , 0.11372549, 1.        ],
       [0.4       , 0.4       , 0.4       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.29411765
E           Max relative difference: 0.73529412
E            x: array([[0.105882, 0.619608, 0.466667, 1.      ],
E                  [0.85098 , 0.372549, 0.007843, 1.      ],
E                  [0.458824, 0.439216, 0.701961, 1.      ],...
E            y: array([[0.4     , 0.4     , 0.4     , 1.      ],
E                  [0.85098 , 0.372549, 0.007843, 1.      ],
E                  [0.458824, 0.439216, 0.701961, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Dark2_r] _______________________

name = 'Dark2_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b93a0>, array([[0.4       , 0.4       , 0.4       , ... ],
       [0.85098039, 0.37254902, 0.00784314, 1.        ],
       [0.10588235, 0.61960784, 0.46666667, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.29411765
E           Max relative difference: 2.77777778
E            x: array([[0.4     , 0.4     , 0.4     , 1.      ],
E                  [0.65098 , 0.462745, 0.113725, 1.      ],
E                  [0.901961, 0.670588, 0.007843, 1.      ],...
E            y: array([[0.105882, 0.619608, 0.466667, 1.      ],
E                  [0.65098 , 0.462745, 0.113725, 1.      ],
E                  [0.901961, 0.670588, 0.007843, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[GnBu] _________________________

name = 'GnBu'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b9d00>, array([[0.96862745, 0.98823529, 0.94117647, ... ],
       [0.03137255, 0.25590158, 0.51117263, 1.        ],
       [0.03137255, 0.25098039, 0.50588235, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.968627, 0.988235, 0.941176, 1.      ],
E                  [0.965798, 0.987128, 0.938593, 1.      ],
E                  [0.962968, 0.986021, 0.936009, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.965798, 0.987128, 0.938593, 1.      ],
E                  [0.962968, 0.986021, 0.936009, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[GnBu_r] ________________________

name = 'GnBu_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b9da0>, array([[0.03137255, 0.25098039, 0.50588235, ... ],
       [0.96579777, 0.98712803, 0.93859285, 1.        ],
       [0.96862745, 0.98823529, 0.94117647, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.031373, 0.25098 , 0.505882, 1.      ],
E                  [0.031373, 0.255902, 0.511173, 1.      ],
E                  [0.031373, 0.260823, 0.516463, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.031373, 0.255902, 0.511173, 1.      ],
E                  [0.031373, 0.260823, 0.516463, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Greens] ________________________

name = 'Greens'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b93a0>, array([[0.96862745, 0.98823529, 0.96078431, ... ],
       [0.        , 0.27171088, 0.10797386, 1.        ],
       [0.        , 0.26666667, 0.10588235, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.968627, 0.988235, 0.960784, 1.      ],
E                  [0.966413, 0.987374, 0.958201, 1.      ],
E                  [0.964198, 0.986513, 0.955617, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.966413, 0.987374, 0.958201, 1.      ],
E                  [0.964198, 0.986513, 0.955617, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Greens_r] _______________________

name = 'Greens_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8720>, array([[0.        , 0.26666667, 0.10588235, ... ],
       [0.96641292, 0.98737409, 0.95820069, 1.        ],
       [0.96862745, 0.98823529, 0.96078431, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.266667, 0.105882, 1.      ],
E                  [0.      , 0.271711, 0.107974, 1.      ],
E                  [0.      , 0.276755, 0.110065, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.271711, 0.107974, 1.      ],
E                  [0.      , 0.276755, 0.110065, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[Greys] ________________________

name = 'Greys'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba3e0>, array([[1.        , 1.        , 1.        , ... ],
       [0.0045521 , 0.0045521 , 0.0045521 , 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.998155, 0.998155, 0.998155, 1.      ],
E                  [0.996309, 0.996309, 0.996309, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.998155, 0.998155, 0.998155, 1.      ],
E                  [0.996309, 0.996309, 0.996309, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Greys_r] _______________________

name = 'Greys_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bade0>, array([[0.        , 0.        , 0.        , ... ],
       [0.99815456, 0.99815456, 0.99815456, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.004552, 0.004552, 0.004552, 1.      ],
E                  [0.009104, 0.009104, 0.009104, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.004552, 0.004552, 0.004552, 1.      ],
E                  [0.009104, 0.009104, 0.009104, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[OrRd] _________________________

name = 'OrRd'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8900>, array([[1.        , 0.96862745, 0.9254902 , ... ],
       [0.50443676, 0.        , 0.        , 1.        ],
       [0.49803922, 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.968627, 0.92549 , 1.      ],
E                  [0.999877, 0.966782, 0.921061, 1.      ],
E                  [0.999754, 0.964937, 0.916632, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.999877, 0.966782, 0.921061, 1.      ],
E                  [0.999754, 0.964937, 0.916632, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[OrRd_r] ________________________

name = 'OrRd_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba020>, array([[0.49803922, 0.        , 0.        , ... ],
       [0.99987697, 0.96678201, 0.92106113, 1.        ],
       [1.        , 0.96862745, 0.9254902 , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.498039, 0.      , 0.      , 1.      ],
E                  [0.504437, 0.      , 0.      , 1.      ],
E                  [0.510834, 0.      , 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.504437, 0.      , 0.      , 1.      ],
E                  [0.510834, 0.      , 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Oranges] _______________________

name = 'Oranges'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba480>, array([[1.        , 0.96078431, 0.92156863, ... ],
       [0.50283737, 0.15478662, 0.01556324, 1.        ],
       [0.49803922, 0.15294118, 0.01568627, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.960784, 0.921569, 1.      ],
E                  [0.999877, 0.958939, 0.918001, 1.      ],
E                  [0.999754, 0.957093, 0.914433, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.999877, 0.958939, 0.918001, 1.      ],
E                  [0.999754, 0.957093, 0.914433, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Oranges_r] ______________________

name = 'Oranges_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bb740>, array([[0.49803922, 0.15294118, 0.01568627, ... ],
       [0.99987697, 0.95893887, 0.91800077, 1.        ],
       [1.        , 0.96078431, 0.92156863, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.498039, 0.152941, 0.015686, 1.      ],
E                  [0.502837, 0.154787, 0.015563, 1.      ],
E                  [0.507636, 0.156632, 0.01544 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.502837, 0.154787, 0.015563, 1.      ],
E                  [0.507636, 0.156632, 0.01544 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[PRGn] _________________________

name = 'PRGn'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b93a0>, array([[0.25098039, 0.        , 0.29411765, ... ],
       [0.00415225, 0.27466359, 0.11018839, 1.        ],
       [0.        , 0.26666667, 0.10588235, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.25098 , 0.      , 0.294118, 1.      ],
E                  [0.259285, 0.006459, 0.30273 , 1.      ],
E                  [0.267589, 0.012918, 0.311342, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.259285, 0.006459, 0.30273 , 1.      ],
E                  [0.267589, 0.012918, 0.311342, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[PRGn_r] ________________________

name = 'PRGn_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8720>, array([[0.        , 0.26666667, 0.10588235, ... ],
       [0.25928489, 0.00645905, 0.30272972, 1.        ],
       [0.25098039, 0.        , 0.29411765, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.266667, 0.105882, 1.      ],
E                  [0.004152, 0.274664, 0.110188, 1.      ],
E                  [0.008304, 0.282661, 0.114494, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.004152, 0.274664, 0.110188, 1.      ],
E                  [0.008304, 0.282661, 0.114494, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Paired] ________________________

name = 'Paired'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8b80>, array([[0.65098039, 0.80784314, 0.89019608, ... ],
       [1.        , 1.        , 0.6       , 1.        ],
       [0.69411765, 0.34901961, 0.15686275, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 48 (12.5%)
E           Max absolute difference: 0.73333333
E           Max relative difference: 4.675
E            x: array([[0.65098 , 0.807843, 0.890196, 1.      ],
E                  [0.121569, 0.470588, 0.705882, 1.      ],
E                  [0.698039, 0.87451 , 0.541176, 1.      ],...
E            y: array([[0.694118, 0.34902 , 0.156863, 1.      ],
E                  [0.121569, 0.470588, 0.705882, 1.      ],
E                  [0.698039, 0.87451 , 0.541176, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Paired_r] _______________________

name = 'Paired_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bbce0>, array([[0.69411765, 0.34901961, 0.15686275, ... ],
       [0.12156863, 0.47058824, 0.70588235, 1.        ],
       [0.65098039, 0.80784314, 0.89019608, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 48 (12.5%)
E           Max absolute difference: 0.73333333
E           Max relative difference: 0.82378855
E            x: array([[0.694118, 0.34902 , 0.156863, 1.      ],
E                  [1.      , 1.      , 0.6     , 1.      ],
E                  [0.415686, 0.239216, 0.603922, 1.      ],...
E            y: array([[0.65098 , 0.807843, 0.890196, 1.      ],
E                  [1.      , 1.      , 0.6     , 1.      ],
E                  [0.415686, 0.239216, 0.603922, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Pastel1] _______________________

name = 'Pastel1'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8720>, array([[0.98431373, 0.70588235, 0.68235294, ... ],
       [0.99215686, 0.85490196, 0.9254902 , 1.        ],
       [0.94901961, 0.94901961, 0.94901961, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 36 (16.7%)
E           Max absolute difference: 0.26666667
E           Max relative difference: 0.28099174
E            x: array([[0.984314, 0.705882, 0.682353, 1.      ],
E                  [0.701961, 0.803922, 0.890196, 1.      ],
E                  [0.8     , 0.921569, 0.772549, 1.      ],...
E            y: array([[0.94902 , 0.94902 , 0.94902 , 1.      ],
E                  [0.701961, 0.803922, 0.890196, 1.      ],
E                  [0.8     , 0.921569, 0.772549, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Pastel1_r] ______________________

name = 'Pastel1_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b9da0>, array([[0.94901961, 0.94901961, 0.94901961, ... ],
       [0.70196078, 0.80392157, 0.89019608, 1.        ],
       [0.98431373, 0.70588235, 0.68235294, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 36 (16.7%)
E           Max absolute difference: 0.26666667
E           Max relative difference: 0.3908046
E            x: array([[0.94902 , 0.94902 , 0.94902 , 1.      ],
E                  [0.992157, 0.854902, 0.92549 , 1.      ],
E                  [0.898039, 0.847059, 0.741176, 1.      ],...
E            y: array([[0.984314, 0.705882, 0.682353, 1.      ],
E                  [0.992157, 0.854902, 0.92549 , 1.      ],
E                  [0.898039, 0.847059, 0.741176, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Pastel2] _______________________

name = 'Pastel2'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba480>, array([[0.70196078, 0.88627451, 0.80392157, ... ],
       [0.94509804, 0.88627451, 0.8       , 1.        ],
       [0.8       , 0.8       , 0.8       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.09803922
E           Max relative difference: 0.12254902
E            x: array([[0.701961, 0.886275, 0.803922, 1.      ],
E                  [0.992157, 0.803922, 0.67451 , 1.      ],
E                  [0.796078, 0.835294, 0.909804, 1.      ],...
E            y: array([[0.8     , 0.8     , 0.8     , 1.      ],
E                  [0.992157, 0.803922, 0.67451 , 1.      ],
E                  [0.796078, 0.835294, 0.909804, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Pastel2_r] ______________________

name = 'Pastel2_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b9940>, array([[0.8       , 0.8       , 0.8       , ... ],
       [0.99215686, 0.80392157, 0.6745098 , 1.        ],
       [0.70196078, 0.88627451, 0.80392157, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.09803922
E           Max relative difference: 0.1396648
E            x: array([[0.8     , 0.8     , 0.8     , 1.      ],
E                  [0.945098, 0.886275, 0.8     , 1.      ],
E                  [1.      , 0.94902 , 0.682353, 1.      ],...
E            y: array([[0.701961, 0.886275, 0.803922, 1.      ],
E                  [0.945098, 0.886275, 0.8     , 1.      ],
E                  [1.      , 0.94902 , 0.682353, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[PiYG] _________________________

name = 'PiYG'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba020>, array([[0.55686275, 0.00392157, 0.32156863, ... ],
       [0.15878508, 0.39923106, 0.09926951, 1.        ],
       [0.15294118, 0.39215686, 0.09803922, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.556863, 0.003922, 0.321569, 1.      ],
E                  [0.565321, 0.00792 , 0.328181, 1.      ],
E                  [0.573779, 0.011918, 0.334794, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.565321, 0.00792 , 0.328181, 1.      ],
E                  [0.573779, 0.011918, 0.334794, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[PiYG_r] ________________________

name = 'PiYG_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bbce0>, array([[0.15294118, 0.39215686, 0.09803922, ... ],
       [0.56532103, 0.00792003, 0.32818147, 1.        ],
       [0.55686275, 0.00392157, 0.32156863, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.152941, 0.392157, 0.098039, 1.      ],
E                  [0.158785, 0.399231, 0.09927 , 1.      ],
E                  [0.164629, 0.406305, 0.1005  , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.158785, 0.399231, 0.09927 , 1.      ],
E                  [0.164629, 0.406305, 0.1005  , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[PuBu] _________________________

name = 'PuBu'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba3e0>, array([[1.        , 0.96862745, 0.98431373, ... ],
       [0.0080892 , 0.22379085, 0.35161861, 1.        ],
       [0.00784314, 0.21960784, 0.34509804, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.968627, 0.984314, 1.      ],
E                  [0.997662, 0.966659, 0.983206, 1.      ],
E                  [0.995325, 0.964691, 0.982099, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.997662, 0.966659, 0.983206, 1.      ],
E                  [0.995325, 0.964691, 0.982099, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[PuBuGn] ________________________

name = 'PuBuGn'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bb920>, array([[1.        , 0.96862745, 0.98431373, ... ],
       [0.00392157, 0.27918493, 0.21607074, 1.        ],
       [0.00392157, 0.2745098 , 0.21176471, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.968627, 0.984314, 1.      ],
E                  [0.997662, 0.966044, 0.98296 , 1.      ],
E                  [0.995325, 0.96346 , 0.981607, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.997662, 0.966044, 0.98296 , 1.      ],
E                  [0.995325, 0.96346 , 0.981607, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[PuBuGn_r] _______________________

name = 'PuBuGn_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bab60>, array([[0.00392157, 0.2745098 , 0.21176471, ... ],
       [0.99766244, 0.96604383, 0.9829604 , 1.        ],
       [1.        , 0.96862745, 0.98431373, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.003922, 0.27451 , 0.211765, 1.      ],
E                  [0.003922, 0.279185, 0.216071, 1.      ],
E                  [0.003922, 0.28386 , 0.220377, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003922, 0.279185, 0.216071, 1.      ],
E                  [0.003922, 0.28386 , 0.220377, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[PuBu_r] ________________________

name = 'PuBu_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bb4c0>, array([[0.00784314, 0.21960784, 0.34509804, ... ],
       [0.99766244, 0.96665898, 0.98320646, 1.        ],
       [1.        , 0.96862745, 0.98431373, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.007843, 0.219608, 0.345098, 1.      ],
E                  [0.008089, 0.223791, 0.351619, 1.      ],
E                  [0.008335, 0.227974, 0.358139, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.008089, 0.223791, 0.351619, 1.      ],
E                  [0.008335, 0.227974, 0.358139, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[PuOr] _________________________

name = 'PuOr'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba7a0>, array([[0.49803922, 0.23137255, 0.03137255, ... ],
       [0.18246828, 0.00599769, 0.30349865, 1.        ],
       [0.17647059, 0.        , 0.29411765, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.498039, 0.231373, 0.031373, 1.      ],
E                  [0.506036, 0.235832, 0.031065, 1.      ],
E                  [0.514033, 0.240292, 0.030757, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.506036, 0.235832, 0.031065, 1.      ],
E                  [0.514033, 0.240292, 0.030757, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[PuOr_r] ________________________

name = 'PuOr_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bb240>, array([[0.17647059, 0.        , 0.29411765, ... ],
       [0.50603614, 0.23583237, 0.03106498, 1.        ],
       [0.49803922, 0.23137255, 0.03137255, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.176471, 0.      , 0.294118, 1.      ],
E                  [0.182468, 0.005998, 0.303499, 1.      ],
E                  [0.188466, 0.011995, 0.31288 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.182468, 0.005998, 0.303499, 1.      ],
E                  [0.188466, 0.011995, 0.31288 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[PuRd] _________________________

name = 'PuRd'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8720>, array([[0.96862745, 0.95686275, 0.97647059, ... ],
       [0.40995002, 0.        , 0.12599769, 1.        ],
       [0.40392157, 0.        , 0.12156863, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.968627, 0.956863, 0.976471, 1.      ],
E                  [0.966659, 0.954525, 0.97524 , 1.      ],
E                  [0.964691, 0.952188, 0.97401 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.966659, 0.954525, 0.97524 , 1.      ],
E                  [0.964691, 0.952188, 0.97401 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[PuRd_r] ________________________

name = 'PuRd_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba3e0>, array([[0.40392157, 0.        , 0.12156863, ... ],
       [0.96665898, 0.95452518, 0.97524029, 1.        ],
       [0.96862745, 0.95686275, 0.97647059, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.403922, 0.      , 0.121569, 1.      ],
E                  [0.40995 , 0.      , 0.125998, 1.      ],
E                  [0.415978, 0.      , 0.130427, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.40995 , 0.      , 0.125998, 1.      ],
E                  [0.415978, 0.      , 0.130427, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Purples] _______________________

name = 'Purples'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58900>, array([[0.98823529, 0.98431373, 0.99215686, ... ],
       [0.24964245, 0.00479815, 0.49241061, 1.        ],
       [0.24705882, 0.        , 0.49019608, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.988235, 0.984314, 0.992157, 1.      ],
E                  [0.986636, 0.982591, 0.991173, 1.      ],
E                  [0.985037, 0.980869, 0.990188, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.986636, 0.982591, 0.991173, 1.      ],
E                  [0.985037, 0.980869, 0.990188, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Purples_r] ______________________

name = 'Purples_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba3e0>, array([[0.24705882, 0.        , 0.49019608, ... ],
       [0.98663591, 0.98259131, 0.99117263, 1.        ],
       [0.98823529, 0.98431373, 0.99215686, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.247059, 0.      , 0.490196, 1.      ],
E                  [0.249642, 0.004798, 0.492411, 1.      ],
E                  [0.252226, 0.009596, 0.494625, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.249642, 0.004798, 0.492411, 1.      ],
E                  [0.252226, 0.009596, 0.494625, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[RdBu] _________________________

name = 'RdBu'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b8720>, array([[0.40392157, 0.        , 0.12156863, ... ],
       [0.02391388, 0.19653979, 0.39192618, 1.        ],
       [0.01960784, 0.18823529, 0.38039216, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.403922, 0.      , 0.121569, 1.      ],
E                  [0.415456, 0.003691, 0.123414, 1.      ],
E                  [0.42699 , 0.007382, 0.12526 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.415456, 0.003691, 0.123414, 1.      ],
E                  [0.42699 , 0.007382, 0.12526 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[RdBu_r] ________________________

name = 'RdBu_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bbc40>, array([[0.01960784, 0.18823529, 0.38039216, ... ],
       [0.41545559, 0.00369089, 0.12341407, 1.        ],
       [0.40392157, 0.        , 0.12156863, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.019608, 0.188235, 0.380392, 1.      ],
E                  [0.023914, 0.19654 , 0.391926, 1.      ],
E                  [0.02822 , 0.204844, 0.40346 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.023914, 0.19654 , 0.391926, 1.      ],
E                  [0.02822 , 0.204844, 0.40346 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[RdGy] _________________________

name = 'RdGy'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58ae0>, array([[0.40392157, 0.        , 0.12156863, ... ],
       [0.10980392, 0.10980392, 0.10980392, 1.        ],
       [0.10196078, 0.10196078, 0.10196078, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.403922, 0.      , 0.121569, 1.      ],
E                  [0.415456, 0.003691, 0.123414, 1.      ],
E                  [0.42699 , 0.007382, 0.12526 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.415456, 0.003691, 0.123414, 1.      ],
E                  [0.42699 , 0.007382, 0.12526 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[RdGy_r] ________________________

name = 'RdGy_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59120>, array([[0.10196078, 0.10196078, 0.10196078, ... ],
       [0.41545559, 0.00369089, 0.12341407, 1.        ],
       [0.40392157, 0.        , 0.12156863, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.101961, 0.101961, 0.101961, 1.      ],
E                  [0.109804, 0.109804, 0.109804, 1.      ],
E                  [0.117647, 0.117647, 0.117647, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.109804, 0.109804, 0.109804, 1.      ],
E                  [0.117647, 0.117647, 0.117647, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[RdPu] _________________________

name = 'RdPu'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bade0>, array([[1.00000000e+00, 9.68627451e-01, 9.52...029604e-04, 4.17285659e-01, 1.00000000e+00],
       [2.86274510e-01, 0.00000000e+00, 4.15686275e-01, 1.00000000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.000000e+00, 9.686275e-01, 9.529412e-01, 1.000000e+00],
E                  [9.997539e-01, 9.657978e-01, 9.502345e-01, 1.000000e+00],
E                  [9.995079e-01, 9.629681e-01, 9.475279e-01, 1.000000e+00],...
E            y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00],
E                  [9.997539e-01, 9.657978e-01, 9.502345e-01, 1.000000e+00],
E                  [9.995079e-01, 9.629681e-01, 9.475279e-01, 1.000000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[RdPu_r] ________________________

name = 'RdPu_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba3e0>, array([[2.86274510e-01, 0.00000000e+00, 4.15...797770e-01, 9.50234525e-01, 1.00000000e+00],
       [1.00000000e+00, 9.68627451e-01, 9.52941176e-01, 1.00000000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[2.862745e-01, 0.000000e+00, 4.156863e-01, 1.000000e+00],
E                  [2.923030e-01, 1.230296e-04, 4.172857e-01, 1.000000e+00],
E                  [2.983314e-01, 2.460592e-04, 4.188850e-01, 1.000000e+00],...
E            y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00],
E                  [2.923030e-01, 1.230296e-04, 4.172857e-01, 1.000000e+00],
E                  [2.983314e-01, 2.460592e-04, 4.188850e-01, 1.000000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[RdYlBu] ________________________

name = 'RdYlBu'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59620>, array([[0.64705882, 0.        , 0.14901961, ... ],
       [0.1952326 , 0.22145329, 0.58908112, 1.        ],
       [0.19215686, 0.21176471, 0.58431373, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.647059, 0.      , 0.14902 , 1.      ],
E                  [0.654748, 0.007382, 0.149173, 1.      ],
E                  [0.662438, 0.014764, 0.149327, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.654748, 0.007382, 0.149173, 1.      ],
E                  [0.662438, 0.014764, 0.149327, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[RdYlBu_r] _______________________

name = 'RdYlBu_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58540>, array([[0.19215686, 0.21176471, 0.58431373, ... ],
       [0.65474817, 0.00738178, 0.14917339, 1.        ],
       [0.64705882, 0.        , 0.14901961, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.192157, 0.211765, 0.584314, 1.      ],
E                  [0.195233, 0.221453, 0.589081, 1.      ],
E                  [0.198308, 0.231142, 0.593849, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.195233, 0.221453, 0.589081, 1.      ],
E                  [0.198308, 0.231142, 0.593849, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[RdYlGn] ________________________

name = 'RdYlGn'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba020>, array([[0.64705882, 0.        , 0.14901961, ... ],
       [0.00399846, 0.41522491, 0.21953095, 1.        ],
       [0.        , 0.40784314, 0.21568627, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.647059, 0.      , 0.14902 , 1.      ],
E                  [0.654748, 0.007382, 0.149173, 1.      ],
E                  [0.662438, 0.014764, 0.149327, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.654748, 0.007382, 0.149173, 1.      ],
E                  [0.662438, 0.014764, 0.149327, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[RdYlGn_r] _______________________

name = 'RdYlGn_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bbc40>, array([[0.        , 0.40784314, 0.21568627, ... ],
       [0.65474817, 0.00738178, 0.14917339, 1.        ],
       [0.64705882, 0.        , 0.14901961, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.407843, 0.215686, 1.      ],
E                  [0.003998, 0.415225, 0.219531, 1.      ],
E                  [0.007997, 0.422607, 0.223376, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003998, 0.415225, 0.219531, 1.      ],
E                  [0.007997, 0.422607, 0.223376, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[Reds] _________________________

name = 'Reds'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59940>, array([[1.        , 0.96078431, 0.94117647, ... ],
       [0.4115494 , 0.00184544, 0.05196463, 1.        ],
       [0.40392157, 0.        , 0.05098039, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.960784, 0.941176, 1.      ],
E                  [0.999877, 0.958201, 0.937486, 1.      ],
E                  [0.999754, 0.955617, 0.933795, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.999877, 0.958201, 0.937486, 1.      ],
E                  [0.999754, 0.955617, 0.933795, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Reds_r] ________________________

name = 'Reds_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58fe0>, array([[0.40392157, 0.        , 0.05098039, ... ],
       [0.99987697, 0.95820069, 0.93748558, 1.        ],
       [1.        , 0.96078431, 0.94117647, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.403922, 0.      , 0.05098 , 1.      ],
E                  [0.411549, 0.001845, 0.051965, 1.      ],
E                  [0.419177, 0.003691, 0.052949, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.411549, 0.001845, 0.051965, 1.      ],
E                  [0.419177, 0.003691, 0.052949, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[Set1] _________________________

name = 'Set1'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97bab60>, array([[0.89411765, 0.10196078, 0.10980392, ... ],
       [0.96862745, 0.50588235, 0.74901961, 1.        ],
       [0.6       , 0.6       , 0.6       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 36 (16.7%)
E           Max absolute difference: 0.49803922
E           Max relative difference: 0.83006536
E            x: array([[0.894118, 0.101961, 0.109804, 1.      ],
E                  [0.215686, 0.494118, 0.721569, 1.      ],
E                  [0.301961, 0.686275, 0.290196, 1.      ],...
E            y: array([[0.6     , 0.6     , 0.6     , 1.      ],
E                  [0.215686, 0.494118, 0.721569, 1.      ],
E                  [0.301961, 0.686275, 0.290196, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Set1_r] ________________________

name = 'Set1_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59f80>, array([[0.6       , 0.6       , 0.6       , ... ],
       [0.21568627, 0.49411765, 0.72156863, 1.        ],
       [0.89411765, 0.10196078, 0.10980392, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 36 (16.7%)
E           Max absolute difference: 0.49803922
E           Max relative difference: 4.88461538
E            x: array([[0.6     , 0.6     , 0.6     , 1.      ],
E                  [0.968627, 0.505882, 0.74902 , 1.      ],
E                  [0.65098 , 0.337255, 0.156863, 1.      ],...
E            y: array([[0.894118, 0.101961, 0.109804, 1.      ],
E                  [0.968627, 0.505882, 0.74902 , 1.      ],
E                  [0.65098 , 0.337255, 0.156863, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[Set2] _________________________

name = 'Set2'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59800>, array([[0.4       , 0.76078431, 0.64705882, ... ],
       [0.89803922, 0.76862745, 0.58039216, 1.        ],
       [0.70196078, 0.70196078, 0.70196078, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.30196078
E           Max relative difference: 0.4301676
E            x: array([[0.4     , 0.760784, 0.647059, 1.      ],
E                  [0.988235, 0.552941, 0.384314, 1.      ],
E                  [0.552941, 0.627451, 0.796078, 1.      ],...
E            y: array([[0.701961, 0.701961, 0.701961, 1.      ],
E                  [0.988235, 0.552941, 0.384314, 1.      ],
E                  [0.552941, 0.627451, 0.796078, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Set2_r] ________________________

name = 'Set2_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58040>, array([[0.70196078, 0.70196078, 0.70196078, ... ],
       [0.98823529, 0.55294118, 0.38431373, 1.        ],
       [0.4       , 0.76078431, 0.64705882, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 32 (18.8%)
E           Max absolute difference: 0.30196078
E           Max relative difference: 0.75490196
E            x: array([[0.701961, 0.701961, 0.701961, 1.      ],
E                  [0.898039, 0.768627, 0.580392, 1.      ],
E                  [1.      , 0.85098 , 0.184314, 1.      ],...
E            y: array([[0.4     , 0.760784, 0.647059, 1.      ],
E                  [0.898039, 0.768627, 0.580392, 1.      ],
E                  [1.      , 0.85098 , 0.184314, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[Set3] _________________________

name = 'Set3'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97b94e0>, array([[0.55294118, 0.82745098, 0.78039216, ... ],
       [0.8       , 0.92156863, 0.77254902, 1.        ],
       [1.        , 0.92941176, 0.43529412, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 48 (12.5%)
E           Max absolute difference: 0.44705882
E           Max relative difference: 0.79279279
E            x: array([[0.552941, 0.827451, 0.780392, 1.      ],
E                  [1.      , 1.      , 0.701961, 1.      ],
E                  [0.745098, 0.729412, 0.854902, 1.      ],...
E            y: array([[1.      , 0.929412, 0.435294, 1.      ],
E                  [1.      , 1.      , 0.701961, 1.      ],
E                  [0.745098, 0.729412, 0.854902, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Set3_r] ________________________

name = 'Set3_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a520>, array([[1.        , 0.92941176, 0.43529412, ... ],
       [1.        , 1.        , 0.70196078, 1.        ],
       [0.55294118, 0.82745098, 0.78039216, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 48 (12.5%)
E           Max absolute difference: 0.44705882
E           Max relative difference: 0.80851064
E            x: array([[1.      , 0.929412, 0.435294, 1.      ],
E                  [0.8     , 0.921569, 0.772549, 1.      ],
E                  [0.737255, 0.501961, 0.741176, 1.      ],...
E            y: array([[0.552941, 0.827451, 0.780392, 1.      ],
E                  [0.8     , 0.921569, 0.772549, 1.      ],
E                  [0.737255, 0.501961, 0.741176, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Spectral] _______________________

name = 'Spectral'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58cc0>, array([[0.61960784, 0.00392157, 0.25882353, ... ],
       [0.36186082, 0.31856978, 0.63944637, 1.        ],
       [0.36862745, 0.30980392, 0.63529412, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.619608, 0.003922, 0.258824, 1.      ],
E                  [0.628066, 0.013303, 0.260823, 1.      ],
E                  [0.636524, 0.022684, 0.262822, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.628066, 0.013303, 0.260823, 1.      ],
E                  [0.636524, 0.022684, 0.262822, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[Spectral_r] ______________________

name = 'Spectral_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b591c0>, array([[0.36862745, 0.30980392, 0.63529412, ... ],
       [0.62806613, 0.01330258, 0.26082276, 1.        ],
       [0.61960784, 0.00392157, 0.25882353, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.368627, 0.309804, 0.635294, 1.      ],
E                  [0.361861, 0.31857 , 0.639446, 1.      ],
E                  [0.355094, 0.327336, 0.643599, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.361861, 0.31857 , 0.639446, 1.      ],
E                  [0.355094, 0.327336, 0.643599, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[Wistia] ________________________

name = 'Wistia'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba5c0>, array([[0.89411765, 1.        , 0.47843137, ... ],
       [0.98841984, 0.5000692 , 0.        , 1.        ],
       [0.98823529, 0.49803922, 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.894118, 1.      , 0.478431, 1.      ],
E                  [0.895779, 0.998585, 0.472526, 1.      ],
E                  [0.897439, 0.99717 , 0.466621, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.895779, 0.998585, 0.472526, 1.      ],
E                  [0.897439, 0.99717 , 0.466621, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[Wistia_r] _______________________

name = 'Wistia_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5aac0>, array([[0.98823529, 0.49803922, 0.        , ... ],
       [0.89577855, 0.99858516, 0.47252595, 1.        ],
       [0.89411765, 1.        , 0.47843137, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.988235, 0.498039, 0.      , 1.      ],
E                  [0.98842 , 0.500069, 0.      , 1.      ],
E                  [0.988604, 0.502099, 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.98842 , 0.500069, 0.      , 1.      ],
E                  [0.988604, 0.502099, 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[YlGn] _________________________

name = 'YlGn'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58f40>, array([[1.        , 1.        , 0.89803922, ... ],
       [0.        , 0.27489427, 0.16250673, 1.        ],
       [0.        , 0.27058824, 0.16078431, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 0.898039, 1.      ],
E                  [0.999016, 0.999631, 0.892626, 1.      ],
E                  [0.998032, 0.999262, 0.887213, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.999016, 0.999631, 0.892626, 1.      ],
E                  [0.998032, 0.999262, 0.887213, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[YlGnBu] ________________________

name = 'YlGnBu'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a020>, array([[1.        , 1.        , 0.85098039, ... ],
       [0.03494041, 0.11655517, 0.35247982, 1.        ],
       [0.03137255, 0.11372549, 0.34509804, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 0.85098 , 1.      ],
E                  [0.997785, 0.999139, 0.846059, 1.      ],
E                  [0.995571, 0.998278, 0.841138, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.997785, 0.999139, 0.846059, 1.      ],
E                  [0.995571, 0.998278, 0.841138, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[YlGnBu_r] _______________________

name = 'YlGnBu_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba5c0>, array([[0.03137255, 0.11372549, 0.34509804, ... ],
       [0.99778547, 0.99913879, 0.84605921, 1.        ],
       [1.        , 1.        , 0.85098039, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.031373, 0.113725, 0.345098, 1.      ],
E                  [0.03494 , 0.116555, 0.35248 , 1.      ],
E                  [0.038508, 0.119385, 0.359862, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.03494 , 0.116555, 0.35248 , 1.      ],
E                  [0.038508, 0.119385, 0.359862, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[YlGn_r] ________________________

name = 'YlGn_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a520>, array([[0.        , 0.27058824, 0.16078431, ... ],
       [0.99901576, 0.99963091, 0.89262591, 1.        ],
       [1.        , 1.        , 0.89803922, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.270588, 0.160784, 1.      ],
E                  [0.      , 0.274894, 0.162507, 1.      ],
E                  [0.      , 0.2792  , 0.164229, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.274894, 0.162507, 1.      ],
E                  [0.      , 0.2792  , 0.164229, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[YlOrBr] ________________________

name = 'YlOrBr'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5aac0>, array([[1.        , 1.        , 0.89803922, ... ],
       [0.40627451, 0.14694348, 0.02328335, 1.        ],
       [0.4       , 0.14509804, 0.02352941, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 0.898039, 1.      ],
E                  [1.      , 0.999016, 0.892995, 1.      ],
E                  [1.      , 0.998032, 0.887951, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.999016, 0.892995, 1.      ],
E                  [1.      , 0.998032, 0.887951, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[YlOrBr_r] _______________________

name = 'YlOrBr_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59300>, array([[0.4       , 0.14509804, 0.02352941, ... ],
       [1.        , 0.99901576, 0.892995  , 1.        ],
       [1.        , 1.        , 0.89803922, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.4     , 0.145098, 0.023529, 1.      ],
E                  [0.406275, 0.146943, 0.023283, 1.      ],
E                  [0.412549, 0.148789, 0.023037, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.406275, 0.146943, 0.023283, 1.      ],
E                  [0.412549, 0.148789, 0.023037, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[YlOrRd] ________________________

name = 'YlOrRd'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae97ba5c0>, array([[1.        , 1.        , 0.8       , ... ],
       [0.50946559, 0.        , 0.14901961, 1.        ],
       [0.50196078, 0.        , 0.14901961, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 0.8     , 1.      ],
E                  [1.      , 0.997785, 0.794587, 1.      ],
E                  [1.      , 0.995571, 0.789173, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.997785, 0.794587, 1.      ],
E                  [1.      , 0.995571, 0.789173, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[YlOrRd_r] _______________________

name = 'YlOrRd_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a980>, array([[0.50196078, 0.        , 0.14901961, ... ],
       [1.        , 0.99778547, 0.7945867 , 1.        ],
       [1.        , 1.        , 0.8       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.501961, 0.      , 0.14902 , 1.      ],
E                  [0.509466, 0.      , 0.14902 , 1.      ],
E                  [0.51697 , 0.      , 0.14902 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.509466, 0.      , 0.14902 , 1.      ],
E                  [0.51697 , 0.      , 0.14902 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[afmhot] ________________________

name = 'afmhot'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b587c0>, array([[0.        , 0.        , 0.        , ... ],
       [1.        , 1.        , 0.99215686, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.007843, 0.      , 0.      , 1.      ],
E                  [0.015686, 0.      , 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.007843, 0.      , 0.      , 1.      ],
E                  [0.015686, 0.      , 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[afmhot_r] _______________________

name = 'afmhot_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a5c0>, array([[1.        , 1.        , 1.        , ... ],
       [0.00784314, 0.        , 0.        , 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [1.      , 1.      , 0.992157, 1.      ],
E                  [1.      , 1.      , 0.984314, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 1.      , 0.992157, 1.      ],
E                  [1.      , 1.      , 0.984314, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[autumn] ________________________

name = 'autumn'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5b7e0>, array([[1.        , 0.        , 0.        , ... ],
       [1.        , 0.99607843, 0.        , 1.        ],
       [1.        , 1.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.      , 1.      ],
E                  [1.      , 0.003922, 0.      , 1.      ],
E                  [1.      , 0.007843, 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.003922, 0.      , 1.      ],
E                  [1.      , 0.007843, 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[autumn_r] _______________________

name = 'autumn_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b587c0>, array([[1.        , 1.        , 0.        , ... ],
       [1.        , 0.00392157, 0.        , 1.        ],
       [1.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 0.      , 1.      ],
E                  [1.      , 0.996078, 0.      , 1.      ],
E                  [1.      , 0.992157, 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.996078, 0.      , 1.      ],
E                  [1.      , 0.992157, 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[binary] ________________________

name = 'binary'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59800>, array([[1.        , 1.        , 1.        , ... ],
       [0.00392157, 0.00392157, 0.00392157, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[binary_r] _______________________

name = 'binary_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b58fe0>, array([[0.        , 0.        , 0.        , ... ],
       [0.99607843, 0.99607843, 0.99607843, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[bone] _________________________

name = 'bone'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5aac0>, array([[0.        , 0.        , 0.        , ... ],
       [0.99463848, 0.99656863, 0.99656863, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.003431, 0.003431, 0.004774, 1.      ],
E                  [0.006863, 0.006863, 0.009548, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003431, 0.003431, 0.004774, 1.      ],
E                  [0.006863, 0.006863, 0.009548, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[bone_r] ________________________

name = 'bone_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5ab60>, array([[1.        , 1.        , 1.        , ... ],
       [0.00343137, 0.00343137, 0.00477408, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.994638, 0.996569, 0.996569, 1.      ],
E                  [0.989277, 0.993137, 0.993137, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.994638, 0.996569, 0.996569, 1.      ],
E                  [0.989277, 0.993137, 0.993137, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_________________________ test_colormap_reversing[brg] _________________________

name = 'brg'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a840>, array([[0.        , 0.        , 1.        , ... ],
       [0.00784314, 0.99215686, 0.        , 1.        ],
       [0.        , 1.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 1.      , 1.      ],
E                  [0.007843, 0.      , 0.992157, 1.      ],
E                  [0.015686, 0.      , 0.984314, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.007843, 0.      , 0.992157, 1.      ],
E                  [0.015686, 0.      , 0.984314, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[brg_r] ________________________

name = 'brg_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59080>, array([[0.        , 1.        , 0.        , ... ],
       [0.00784314, 0.        , 0.99215686, 1.        ],
       [0.        , 0.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 1.      , 0.      , 1.      ],
E                  [0.007843, 0.992157, 0.      , 1.      ],
E                  [0.015686, 0.984314, 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.007843, 0.992157, 0.      , 1.      ],
E                  [0.015686, 0.984314, 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_________________________ test_colormap_reversing[bwr] _________________________

name = 'bwr'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5b6a0>, array([[0.        , 0.        , 1.        , ... ],
       [1.        , 0.00784314, 0.00784314, 1.        ],
       [1.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 1.      , 1.      ],
E                  [0.007843, 0.007843, 1.      , 1.      ],
E                  [0.015686, 0.015686, 1.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.007843, 0.007843, 1.      , 1.      ],
E                  [0.015686, 0.015686, 1.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[bwr_r] ________________________

name = 'bwr_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5afc0>, array([[1.        , 0.        , 0.        , ... ],
       [0.00784314, 0.00784314, 1.        , 1.        ],
       [0.        , 0.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.      , 1.      ],
E                  [1.      , 0.007843, 0.007843, 1.      ],
E                  [1.      , 0.015686, 0.015686, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.007843, 0.007843, 1.      ],
E                  [1.      , 0.015686, 0.015686, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[cividis] _______________________

name = 'cividis'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5b380>, array([[0.      , 0.135112, 0.304751, 1.    ....207561, 1.      ],
       [0.995503, 0.903866, 0.21237 , 1.      ],
       [0.995737, 0.909344, 0.217772, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.135112, 0.304751, 1.      ],
E                  [0.      , 0.138068, 0.311105, 1.      ],
E                  [0.      , 0.141013, 0.317579, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.138068, 0.311105, 1.      ],
E                  [0.      , 0.141013, 0.317579, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[cividis_r] ______________________

name = 'cividis_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5b560>, array([[0.995737, 0.909344, 0.217772, 1.    ....317579, 1.      ],
       [0.      , 0.138068, 0.311105, 1.      ],
       [0.      , 0.135112, 0.304751, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.995737, 0.909344, 0.217772, 1.      ],
E                  [0.995503, 0.903866, 0.21237 , 1.      ],
E                  [0.995249, 0.898384, 0.207561, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.995503, 0.903866, 0.21237 , 1.      ],
E                  [0.995249, 0.898384, 0.207561, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[cool] _________________________

name = 'cool'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5bd80>, array([[0.        , 1.        , 1.        , ... ],
       [0.99607843, 0.00392157, 1.        , 1.        ],
       [1.        , 0.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 1.      , 1.      , 1.      ],
E                  [0.003922, 0.996078, 1.      , 1.      ],
E                  [0.007843, 0.992157, 1.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003922, 0.996078, 1.      , 1.      ],
E                  [0.007843, 0.992157, 1.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[cool_r] ________________________

name = 'cool_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5ad40>, array([[1.        , 0.        , 1.        , ... ],
       [0.00392157, 0.99607843, 1.        , 1.        ],
       [0.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 1.      , 1.      ],
E                  [0.996078, 0.003922, 1.      , 1.      ],
E                  [0.992157, 0.007843, 1.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996078, 0.003922, 1.      , 1.      ],
E                  [0.992157, 0.007843, 1.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[coolwarm] _______________________

name = 'coolwarm'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5bec0>, array([[0.2298057 , 0.29871797, 0.75368315, ... ],
       [0.71155385, 0.03333685, 0.15448471, 1.        ],
       [0.70567316, 0.01555616, 0.15023281, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.229806, 0.298718, 0.753683, 1.      ],
E                  [0.234377, 0.305542, 0.75968 , 1.      ],
E                  [0.238948, 0.312365, 0.765676, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.234377, 0.305542, 0.75968 , 1.      ],
E                  [0.238948, 0.312365, 0.765676, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[coolwarm_r] ______________________

name = 'coolwarm_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c860>, array([[0.70567316, 0.01555616, 0.15023281, ... ],
       [0.23437708, 0.30554173, 0.75967953, 1.        ],
       [0.2298057 , 0.29871797, 0.75368315, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.705673, 0.015556, 0.150233, 1.      ],
E                  [0.711554, 0.033337, 0.154485, 1.      ],
E                  [0.717435, 0.051118, 0.158737, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.711554, 0.033337, 0.154485, 1.      ],
E                  [0.717435, 0.051118, 0.158737, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[copper] ________________________

name = 'copper'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5b880>, array([[0.        , 0.        , 0.        , ... ],
       [1.        , 0.77813647, 0.49554902, 1.        ],
       [1.        , 0.7812    , 0.4975    , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.004844, 0.003064, 0.001951, 1.      ],
E                  [0.009689, 0.006127, 0.003902, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.004844, 0.003064, 0.001951, 1.      ],
E                  [0.009689, 0.006127, 0.003902, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[copper_r] _______________________

name = 'copper_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5ab60>, array([[1.        , 0.7812    , 0.4975    , ... ],
       [0.00484429, 0.00306353, 0.00195098, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.7812  , 0.4975  , 1.      ],
E                  [1.      , 0.778136, 0.495549, 1.      ],
E                  [1.      , 0.775073, 0.493598, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.778136, 0.495549, 1.      ],
E                  [1.      , 0.775073, 0.493598, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[cubehelix] ______________________

name = 'cubehelix'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5b560>, array([[0.        , 0.        , 0.        , ... ],
       [0.99313647, 0.99791031, 0.99427639, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.006716, 0.002119, 0.00597 , 1.      ],
E                  [0.013252, 0.004287, 0.012162, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.006716, 0.002119, 0.00597 , 1.      ],
E                  [0.013252, 0.004287, 0.012162, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[cubehelix_r] _____________________

name = 'cubehelix_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c040>, array([[1.        , 1.        , 1.        , ... ],
       [0.00671629, 0.00211857, 0.00597023, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.993136, 0.99791 , 0.994276, 1.      ],
E                  [0.986161, 0.995828, 0.98882 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.993136, 0.99791 , 0.994276, 1.      ],
E                  [0.986161, 0.995828, 0.98882 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[flag] _________________________

name = 'flag'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b591c0>, array([[1.        , 0.        , 0.        , ... ],
       [0.        , 0.        , 0.20978927, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 3 / 1024 (0.293%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.      , 1.      ],
E                  [1.      , 0.378411, 0.209789, 1.      ],
E                  [1.      , 0.700543, 0.49307 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.378411, 0.209789, 1.      ],
E                  [1.      , 0.700543, 0.49307 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[flag_r] ________________________

name = 'flag_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a520>, array([[0.        , 0.        , 0.        , ... ],
       [1.        , 0.37841105, 0.20978927, 1.        ],
       [1.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 3 / 1024 (0.293%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.      , 0.      , 0.209789, 1.      ],
E                  [0.      , 0.      , 0.49307 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.209789, 1.      ],
E                  [0.      , 0.      , 0.49307 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[gist_earth] ______________________

name = 'gist_earth'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6ccc0>, array([[0.        , 0.        , 0.        , ... ],
       [0.98781369, 0.97323701, 0.97247975, 1.        ],
       [0.9922    , 0.9843    , 0.9843    , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.002613, 0.      , 0.168692, 1.      ],
E                  [0.005227, 0.      , 0.221664, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.002613, 0.      , 0.168692, 1.      ],
E                  [0.005227, 0.      , 0.221664, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
____________________ test_colormap_reversing[gist_earth_r] _____________________

name = 'gist_earth_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c400>, array([[0.9922    , 0.9843    , 0.9843    , ... ],
       [0.00261345, 0.        , 0.16869201, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.9922  , 0.9843  , 0.9843  , 1.      ],
E                  [0.987814, 0.973237, 0.97248 , 1.      ],
E                  [0.983427, 0.961785, 0.960659, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.987814, 0.973237, 0.97248 , 1.      ],
E                  [0.983427, 0.961785, 0.960659, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[gist_gray] ______________________

name = 'gist_gray'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5ad40>, array([[0.        , 0.        , 0.        , ... ],
       [0.99607843, 0.99607843, 0.99607843, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[gist_gray_r] _____________________

name = 'gist_gray_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b596c0>, array([[1.        , 1.        , 1.        , ... ],
       [0.00392157, 0.00392157, 0.00392157, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[gist_heat] ______________________

name = 'gist_heat'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d4e0>, array([[0.        , 0.        , 0.        , ... ],
       [1.        , 0.99215686, 0.98431373, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.005882, 0.      , 0.      , 1.      ],
E                  [0.011765, 0.      , 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.005882, 0.      , 0.      , 1.      ],
E                  [0.011765, 0.      , 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[gist_heat_r] _____________________

name = 'gist_heat_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c0e0>, array([[1.        , 1.        , 1.        , ... ],
       [0.00588235, 0.        , 0.        , 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [1.      , 0.992157, 0.984314, 1.      ],
E                  [1.      , 0.984314, 0.968627, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.992157, 0.984314, 1.      ],
E                  [1.      , 0.984314, 0.968627, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[gist_ncar] ______________________

name = 'gist_ncar'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5ab60>, array([[0.        , 0.        , 0.502     , ... ],
       [0.99330877, 0.95433391, 0.9937163 , 1.        ],
       [0.9961    , 0.9725    , 0.9961    , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.502   , 1.      ],
E                  [0.      , 0.02862 , 0.465106, 1.      ],
E                  [0.      , 0.05724 , 0.428213, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.02862 , 0.465106, 1.      ],
E                  [0.      , 0.05724 , 0.428213, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[gist_ncar_r] _____________________

name = 'gist_ncar_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5b7e0>, array([[0.9961    , 0.9725    , 0.9961    , ... ],
       [0.        , 0.02861976, 0.4651065 , 1.        ],
       [0.        , 0.        , 0.502     , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.9961  , 0.9725  , 0.9961  , 1.      ],
E                  [0.993309, 0.954334, 0.993716, 1.      ],
E                  [0.990518, 0.936168, 0.991333, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.993309, 0.954334, 0.993716, 1.      ],
E                  [0.990518, 0.936168, 0.991333, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
____________________ test_colormap_reversing[gist_rainbow] _____________________

name = 'gist_rainbow'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d1c0>, array([[1.        , 0.        , 0.16      , ... ],
       [1.        , 0.        , 0.77131287, 1.        ],
       [1.        , 0.        , 0.75      , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.16    , 1.      ],
E                  [1.      , 0.      , 0.139085, 1.      ],
E                  [1.      , 0.      , 0.11817 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.      , 0.139085, 1.      ],
E                  [1.      , 0.      , 0.11817 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
___________________ test_colormap_reversing[gist_rainbow_r] ____________________

name = 'gist_rainbow_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c860>, array([[1.        , 0.        , 0.75      , ... ],
       [1.        , 0.        , 0.13908497, 1.        ],
       [1.        , 0.        , 0.16      , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.75    , 1.      ],
E                  [1.      , 0.      , 0.771313, 1.      ],
E                  [1.      , 0.      , 0.792626, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.      , 0.771313, 1.      ],
E                  [1.      , 0.      , 0.792626, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[gist_stern] ______________________

name = 'gist_stern'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b59080>, array([[0.        , 0.        , 0.        , ... ],
       [0.99607843, 0.99607843, 0.98520163, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.071692, 0.003922, 0.007843, 1.      ],
E                  [0.143385, 0.007843, 0.015686, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.071692, 0.003922, 0.007843, 1.      ],
E                  [0.143385, 0.007843, 0.015686, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
____________________ test_colormap_reversing[gist_stern_r] _____________________

name = 'gist_stern_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6df80>, array([[1.        , 1.        , 1.        , ... ],
       [0.0716923 , 0.00392157, 0.00784314, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.996078, 0.996078, 0.985202, 1.      ],
E                  [0.992157, 0.992157, 0.970403, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996078, 0.996078, 0.985202, 1.      ],
E                  [0.992157, 0.992157, 0.970403, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[gist_yarg] ______________________

name = 'gist_yarg'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d300>, array([[1.        , 1.        , 1.        , ... ],
       [0.00392157, 0.00392157, 0.00392157, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[gist_yarg_r] _____________________

name = 'gist_yarg_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c040>, array([[0.        , 0.        , 0.        , ... ],
       [0.99607843, 0.99607843, 0.99607843, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[gnuplot] _______________________

name = 'gnuplot'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a020>, array([[0.00000000e+00, 0.00000000e+00, 0.00...281370e-01, 0.00000000e+00, 1.00000000e+00],
       [1.00000000e+00, 1.00000000e+00, 0.00000000e+00, 1.00000000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 1.000000e+00],
E                  [6.262243e-02, 6.030863e-08, 2.463745e-02, 1.000000e+00],
E                  [8.856149e-02, 4.824690e-07, 4.925994e-02, 1.000000e+00],...
E            y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00],
E                  [6.262243e-02, 6.030863e-08, 2.463745e-02, 1.000000e+00],
E                  [8.856149e-02, 4.824690e-07, 4.925994e-02, 1.000000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[gnuplot2] _______________________

name = 'gnuplot2'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6e200>, array([[0.        , 0.        , 0.        , ... ],
       [1.        , 1.        , 0.95098039, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.      , 0.      , 0.015686, 1.      ],
E                  [0.      , 0.      , 0.031373, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.015686, 1.      ],
E                  [0.      , 0.      , 0.031373, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[gnuplot2_r] ______________________

name = 'gnuplot2_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d8a0>, array([[1.        , 1.        , 1.        , ... ],
       [0.        , 0.        , 0.01568627, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [1.      , 1.      , 0.95098 , 1.      ],
E                  [1.      , 1.      , 0.901961, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 1.      , 0.95098 , 1.      ],
E                  [1.      , 1.      , 0.901961, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[gnuplot_r] ______________________

name = 'gnuplot_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c400>, array([[1.00000000e+00, 1.00000000e+00, 0.00...086294e-08, 2.46374492e-02, 1.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.000000e+00, 1.000000e+00, 0.000000e+00, 1.000000e+00],
E                  [9.980373e-01, 9.882814e-01, 0.000000e+00, 1.000000e+00],
E                  [9.960707e-01, 9.766547e-01, 0.000000e+00, 1.000000e+00],...
E            y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00],
E                  [9.980373e-01, 9.882814e-01, 0.000000e+00, 1.000000e+00],
E                  [9.960707e-01, 9.766547e-01, 0.000000e+00, 1.000000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[gray] _________________________

name = 'gray'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a8e0>, array([[0.        , 0.        , 0.        , ... ],
       [0.99607843, 0.99607843, 0.99607843, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003922, 0.003922, 0.003922, 1.      ],
E                  [0.007843, 0.007843, 0.007843, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[gray_r] ________________________

name = 'gray_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6ea20>, array([[1.        , 1.        , 1.        , ... ],
       [0.00392157, 0.00392157, 0.00392157, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996078, 0.996078, 0.996078, 1.      ],
E                  [0.992157, 0.992157, 0.992157, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_________________________ test_colormap_reversing[hot] _________________________

name = 'hot'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6e520>, array([[0.0416    , 0.        , 0.        , ... ],
       [1.        , 1.        , 0.98455881, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.0416  , 0.      , 0.      , 1.      ],
E                  [0.051895, 0.      , 0.      , 1.      ],
E                  [0.06219 , 0.      , 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.051895, 0.      , 0.      , 1.      ],
E                  [0.06219 , 0.      , 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[hot_r] ________________________

name = 'hot_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c0e0>, array([[1.        , 1.        , 1.        , ... ],
       [0.05189484, 0.        , 0.        , 1.        ],
       [0.0416    , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [1.      , 1.      , 0.984559, 1.      ],
E                  [1.      , 1.      , 0.969118, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 1.      , 0.984559, 1.      ],
E                  [1.      , 1.      , 0.969118, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_________________________ test_colormap_reversing[hsv] _________________________

name = 'hsv'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b5a8e0>, array([[1.        , 0.        , 0.        , ... ],
       [1.        , 0.        , 0.11691179, 1.        ],
       [1.        , 0.        , 0.09375   , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.      , 1.      ],
E                  [1.      , 0.023162, 0.      , 1.      ],
E                  [1.      , 0.046324, 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.023162, 0.      , 1.      ],
E                  [1.      , 0.046324, 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[hsv_r] ________________________

name = 'hsv_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6e200>, array([[1.        , 0.        , 0.09375   , ... ],
       [1.        , 0.02316179, 0.        , 1.        ],
       [1.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.09375 , 1.      ],
E                  [1.      , 0.      , 0.116912, 1.      ],
E                  [1.      , 0.      , 0.140074, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.      , 0.116912, 1.      ],
E                  [1.      , 0.      , 0.140074, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[inferno] _______________________

name = 'inferno'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6ea20>, array([[1.46200e-03, 4.66000e-04, 1.38660e-0....61676 , 1.      ],
       [0.982257, 0.994109, 0.631017, 1.      ],
       [0.988362, 0.998364, 0.644924, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.46200e-03, 4.66000e-04, 1.38660e-02, 1.00000e+00],
E                  [2.26700e-03, 1.27000e-03, 1.85700e-02, 1.00000e+00],
E                  [3.29900e-03, 2.24900e-03, 2.42390e-02, 1.00000e+00],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.002267, 0.00127 , 0.01857 , 1.      ],
E                  [0.003299, 0.002249, 0.024239, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[inferno_r] ______________________

name = 'inferno_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c860>, array([[0.988362, 0.998364, 0.644924, 1.    ...   [2.26700e-03, 1.27000e-03, 1.85700e-02, 1.00000e+00],
       [1.46200e-03, 4.66000e-04, 1.38660e-02, 1.00000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.988362, 0.998364, 0.644924, 1.      ],
E                  [0.982257, 0.994109, 0.631017, 1.      ],
E                  [0.976511, 0.989753, 0.61676 , 1.      ],...
E            y: array([[0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00],
E                  [9.82257e-01, 9.94109e-01, 6.31017e-01, 1.00000e+00],
E                  [9.76511e-01, 9.89753e-01, 6.16760e-01, 1.00000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_________________________ test_colormap_reversing[jet] _________________________

name = 'jet'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6e700>, array([[0.        , 0.        , 0.5       , ... ],
       [0.51782531, 0.        , 0.        , 1.        ],
       [0.5       , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.5     , 1.      ],
E                  [0.      , 0.      , 0.517825, 1.      ],
E                  [0.      , 0.      , 0.535651, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.517825, 1.      ],
E                  [0.      , 0.      , 0.535651, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[jet_r] ________________________

name = 'jet_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6e8e0>, array([[0.5       , 0.        , 0.        , ... ],
       [0.        , 0.        , 0.51782531, 1.        ],
       [0.        , 0.        , 0.5       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.5     , 0.      , 0.      , 1.      ],
E                  [0.517825, 0.      , 0.      , 1.      ],
E                  [0.535651, 0.      , 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.517825, 0.      , 0.      , 1.      ],
E                  [0.535651, 0.      , 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[magma] ________________________

name = 'magma'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d620>, array([[1.46200e-03, 4.66000e-04, 1.38660e-0....734536, 1.      ],
       [0.987387, 0.984288, 0.742002, 1.      ],
       [0.987053, 0.991438, 0.749504, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.46200e-03, 4.66000e-04, 1.38660e-02, 1.00000e+00],
E                  [2.25800e-03, 1.29500e-03, 1.83310e-02, 1.00000e+00],
E                  [3.27900e-03, 2.30500e-03, 2.37080e-02, 1.00000e+00],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.002258, 0.001295, 0.018331, 1.      ],
E                  [0.003279, 0.002305, 0.023708, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[magma_r] _______________________

name = 'magma_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c040>, array([[0.987053, 0.991438, 0.749504, 1.    ...   [2.25800e-03, 1.29500e-03, 1.83310e-02, 1.00000e+00],
       [1.46200e-03, 4.66000e-04, 1.38660e-02, 1.00000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.987053, 0.991438, 0.749504, 1.      ],
E                  [0.987387, 0.984288, 0.742002, 1.      ],
E                  [0.987691, 0.977154, 0.734536, 1.      ],...
E            y: array([[0.00000e+00, 0.00000e+00, 0.00000e+00, 0.00000e+00],
E                  [9.87387e-01, 9.84288e-01, 7.42002e-01, 1.00000e+00],
E                  [9.87691e-01, 9.77154e-01, 7.34536e-01, 1.00000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
____________________ test_colormap_reversing[nipy_spectral] ____________________

name = 'nipy_spectral'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6e5c0>, array([[0.        , 0.        , 0.        , ... ],
       [0.8       , 0.7372549 , 0.7372549 , 1.        ],
       [0.8       , 0.8       , 0.8       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.      , 1.      ],
E                  [0.036604, 0.      , 0.041827, 1.      ],
E                  [0.073208, 0.      , 0.083655, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.036604, 0.      , 0.041827, 1.      ],
E                  [0.073208, 0.      , 0.083655, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
___________________ test_colormap_reversing[nipy_spectral_r] ___________________

name = 'nipy_spectral_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d620>, array([[0.8       , 0.8       , 0.8       , ... ],
       [0.03660392, 0.        , 0.04182745, 1.        ],
       [0.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.8     , 0.8     , 0.8     , 1.      ],
E                  [0.8     , 0.737255, 0.737255, 1.      ],
E                  [0.8     , 0.67451 , 0.67451 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.8     , 0.737255, 0.737255, 1.      ],
E                  [0.8     , 0.67451 , 0.67451 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[ocean] ________________________

name = 'ocean'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d800>, array([[0.        , 0.5       , 0.        , ... ],
       [0.98823529, 0.99411765, 0.99607843, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.5     , 0.      , 1.      ],
E                  [0.      , 0.494118, 0.003922, 1.      ],
E                  [0.      , 0.488235, 0.007843, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.494118, 0.003922, 1.      ],
E                  [0.      , 0.488235, 0.007843, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[ocean_r] _______________________

name = 'ocean_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c400>, array([[1.        , 1.        , 1.        , ... ],
       [0.        , 0.49411765, 0.00392157, 1.        ],
       [0.        , 0.5       , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.988235, 0.994118, 0.996078, 1.      ],
E                  [0.976471, 0.988235, 0.992157, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.988235, 0.994118, 0.996078, 1.      ],
E                  [0.976471, 0.988235, 0.992157, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[pink] _________________________

name = 'pink'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6f2e0>, array([[0.1178    , 0.        , 0.        , ... ],
       [0.99868935, 0.99868935, 0.99608831, 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.1178  , 0.      , 0.      , 1.      ],
E                  [0.137085, 0.025415, 0.025415, 1.      ],
E                  [0.156369, 0.050829, 0.050829, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.137085, 0.025415, 0.025415, 1.      ],
E                  [0.156369, 0.050829, 0.050829, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[pink_r] ________________________

name = 'pink_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d800>, array([[1.        , 1.        , 1.        , ... ],
       [0.13708469, 0.02541472, 0.02541472, 1.        ],
       [0.1178    , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.998689, 0.998689, 0.996088, 1.      ],
E                  [0.997379, 0.997379, 0.992177, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.998689, 0.998689, 0.996088, 1.      ],
E                  [0.997379, 0.997379, 0.992177, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[plasma] ________________________

name = 'plasma'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6df80>, array([[0.050383, 0.029803, 0.527975, 1.    ....146861, 1.      ],
       [0.941896, 0.96859 , 0.140956, 1.      ],
       [0.940015, 0.975158, 0.131326, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.050383, 0.029803, 0.527975, 1.      ],
E                  [0.063536, 0.028426, 0.533124, 1.      ],
E                  [0.075353, 0.027206, 0.538007, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.063536, 0.028426, 0.533124, 1.      ],
E                  [0.075353, 0.027206, 0.538007, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[plasma_r] _______________________

name = 'plasma_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c0e0>, array([[0.940015, 0.975158, 0.131326, 1.    ....538007, 1.      ],
       [0.063536, 0.028426, 0.533124, 1.      ],
       [0.050383, 0.029803, 0.527975, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.940015, 0.975158, 0.131326, 1.      ],
E                  [0.941896, 0.96859 , 0.140956, 1.      ],
E                  [0.944152, 0.961916, 0.146861, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.941896, 0.96859 , 0.140956, 1.      ],
E                  [0.944152, 0.961916, 0.146861, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[prism] ________________________

name = 'prism'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6df80>, array([[1.        , 0.        , 0.        , ... ],
       [0.51090437, 1.        , 0.        , 1.        ],
       [0.32950713, 0.99825489, 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 0.      , 1.      ],
E                  [1.      , 0.      , 0.      , 1.      ],
E                  [1.      , 0.129645, 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.      , 0.      , 1.      ],
E                  [1.      , 0.129645, 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[prism_r] _______________________

name = 'prism_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6ea20>, array([[0.32950713, 0.99825489, 0.        , ... ],
       [1.        , 0.        , 0.        , 1.        ],
       [1.        , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.329507, 0.998255, 0.      , 1.      ],
E                  [0.510904, 1.      , 0.      , 1.      ],
E                  [0.702791, 1.      , 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.510904, 1.      , 0.      , 1.      ],
E                  [0.702791, 1.      , 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[rainbow] _______________________

name = 'rainbow'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6fd80>, array([[0.5       , 0.        , 1.        , ...196595e-02, 6.15994664e-03, 1.00000000e+00],
       [1.00000000e+00, 1.22464680e-16, 6.12323400e-17, 1.00000000e+00]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.5     , 0.      , 1.      , 1.      ],
E                  [0.492157, 0.01232 , 0.999981, 1.      ],
E                  [0.484314, 0.024637, 0.999924, 1.      ],...
E            y: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00],
E                  [4.921569e-01, 1.231966e-02, 9.999810e-01, 1.000000e+00],
E                  [4.843137e-01, 2.463745e-02, 9.999241e-01, 1.000000e+00],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[rainbow_r] ______________________

name = 'rainbow_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afc4a0>, array([[1.00000000e+00, 1.22464680e-16, 6.12... ],
       [0.49215686, 0.01231966, 0.99998103, 1.        ],
       [0.5       , 0.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.000000e+00, 1.224647e-16, 6.123234e-17, 1.000000e+00],
E                  [1.000000e+00, 1.231966e-02, 6.159947e-03, 1.000000e+00],
E                  [1.000000e+00, 2.463745e-02, 1.231966e-02, 1.000000e+00],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.01232 , 0.00616 , 1.      ],
E                  [1.      , 0.024637, 0.01232 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[seismic] _______________________

name = 'seismic'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6fd80>, array([[0.        , 0.        , 0.3       , ... ],
       [0.50784314, 0.        , 0.        , 1.        ],
       [0.5       , 0.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 0.3     , 1.      ],
E                  [0.      , 0.      , 0.31098 , 1.      ],
E                  [0.      , 0.      , 0.321961, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.31098 , 1.      ],
E                  [0.      , 0.      , 0.321961, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[seismic_r] ______________________

name = 'seismic_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6f4c0>, array([[0.5       , 0.        , 0.        , ... ],
       [0.        , 0.        , 0.31098039, 1.        ],
       [0.        , 0.        , 0.3       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 4 / 1024 (0.391%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.5     , 0.      , 0.      , 1.      ],
E                  [0.507843, 0.      , 0.      , 1.      ],
E                  [0.515686, 0.      , 0.      , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.507843, 0.      , 0.      , 1.      ],
E                  [0.515686, 0.      , 0.      , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[spring] ________________________

name = 'spring'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6ec00>, array([[1.        , 0.        , 1.        , ... ],
       [1.        , 0.99607843, 0.00392157, 1.        ],
       [1.        , 1.        , 0.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 0.      , 1.      , 1.      ],
E                  [1.      , 0.003922, 0.996078, 1.      ],
E                  [1.      , 0.007843, 0.992157, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.003922, 0.996078, 1.      ],
E                  [1.      , 0.007843, 0.992157, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[spring_r] _______________________

name = 'spring_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afc9a0>, array([[1.        , 1.        , 0.        , ... ],
       [1.        , 0.00392157, 0.99607843, 1.        ],
       [1.        , 0.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 1024 (0.586%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 0.      , 1.      ],
E                  [1.      , 0.996078, 0.003922, 1.      ],
E                  [1.      , 0.992157, 0.007843, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [1.      , 0.996078, 0.003922, 1.      ],
E                  [1.      , 0.992157, 0.007843, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[summer] ________________________

name = 'summer'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6ec00>, array([[0.        , 0.5       , 0.4       , ... ],
       [0.99607843, 0.99803922, 0.4       , 1.        ],
       [1.        , 1.        , 0.4       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.5     , 0.4     , 1.      ],
E                  [0.003922, 0.501961, 0.4     , 1.      ],
E                  [0.007843, 0.503922, 0.4     , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.003922, 0.501961, 0.4     , 1.      ],
E                  [0.007843, 0.503922, 0.4     , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[summer_r] _______________________

name = 'summer_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6eac0>, array([[1.        , 1.        , 0.4       , ... ],
       [0.00392157, 0.50196078, 0.4       , 1.        ],
       [0.        , 0.5       , 0.4       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 7 / 1024 (0.684%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 0.4     , 1.      ],
E                  [0.996078, 0.998039, 0.4     , 1.      ],
E                  [0.992157, 0.996078, 0.4     , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.996078, 0.998039, 0.4     , 1.      ],
E                  [0.992157, 0.996078, 0.4     , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[tab10] ________________________

name = 'tab10'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c7c0>, array([[0.12156863, 0.46666667, 0.70588235, ... ],
       [0.7372549 , 0.74117647, 0.13333333, 1.        ],
       [0.09019608, 0.74509804, 0.81176471, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 40 (15%)
E           Max absolute difference: 0.27843137
E           Max relative difference: 0.37368421
E            x: array([[0.121569, 0.466667, 0.705882, 1.      ],
E                  [1.      , 0.498039, 0.054902, 1.      ],
E                  [0.172549, 0.627451, 0.172549, 1.      ],...
E            y: array([[0.090196, 0.745098, 0.811765, 1.      ],
E                  [1.      , 0.498039, 0.054902, 1.      ],
E                  [0.172549, 0.627451, 0.172549, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[tab10_r] _______________________

name = 'tab10_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afc0e0>, array([[0.09019608, 0.74509804, 0.81176471, ... ],
       [1.        , 0.49803922, 0.05490196, 1.        ],
       [0.12156863, 0.46666667, 0.70588235, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 40 (15%)
E           Max absolute difference: 0.27843137
E           Max relative difference: 0.59663866
E            x: array([[0.090196, 0.745098, 0.811765, 1.      ],
E                  [0.737255, 0.741176, 0.133333, 1.      ],
E                  [0.498039, 0.498039, 0.498039, 1.      ],...
E            y: array([[0.121569, 0.466667, 0.705882, 1.      ],
E                  [0.737255, 0.741176, 0.133333, 1.      ],
E                  [0.498039, 0.498039, 0.498039, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[tab20] ________________________

name = 'tab20'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6fce0>, array([[0.12156863, 0.46666667, 0.70588235, ... ],
       [0.09019608, 0.74509804, 0.81176471, 1.        ],
       [0.61960784, 0.85490196, 0.89803922, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 80 (7.5%)
E           Max absolute difference: 0.49803922
E           Max relative difference: 0.80379747
E            x: array([[0.121569, 0.466667, 0.705882, 1.      ],
E                  [0.682353, 0.780392, 0.909804, 1.      ],
E                  [1.      , 0.498039, 0.054902, 1.      ],...
E            y: array([[0.619608, 0.854902, 0.898039, 1.      ],
E                  [0.682353, 0.780392, 0.909804, 1.      ],
E                  [1.      , 0.498039, 0.054902, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[tab20_r] _______________________

name = 'tab20_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6c0e0>, array([[0.61960784, 0.85490196, 0.89803922, ... ],
       [0.68235294, 0.78039216, 0.90980392, 1.        ],
       [0.12156863, 0.46666667, 0.70588235, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 80 (7.5%)
E           Max absolute difference: 0.49803922
E           Max relative difference: 4.09677419
E            x: array([[0.619608, 0.854902, 0.898039, 1.      ],
E                  [0.090196, 0.745098, 0.811765, 1.      ],
E                  [0.858824, 0.858824, 0.552941, 1.      ],...
E            y: array([[0.121569, 0.466667, 0.705882, 1.      ],
E                  [0.090196, 0.745098, 0.811765, 1.      ],
E                  [0.858824, 0.858824, 0.552941, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[tab20b] ________________________

name = 'tab20b'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afd080>, array([[0.22352941, 0.23137255, 0.4745098 , ... ],
       [0.80784314, 0.42745098, 0.74117647, 1.        ],
       [0.87058824, 0.61960784, 0.83921569, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 80 (7.5%)
E           Max absolute difference: 0.64705882
E           Max relative difference: 0.74324324
E            x: array([[0.223529, 0.231373, 0.47451 , 1.      ],
E                  [0.321569, 0.329412, 0.639216, 1.      ],
E                  [0.419608, 0.431373, 0.811765, 1.      ],...
E            y: array([[0.870588, 0.619608, 0.839216, 1.      ],
E                  [0.321569, 0.329412, 0.639216, 1.      ],
E                  [0.419608, 0.431373, 0.811765, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[tab20b_r] _______________________

name = 'tab20b_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afc9a0>, array([[0.87058824, 0.61960784, 0.83921569, ... ],
       [0.32156863, 0.32941176, 0.63921569, 1.        ],
       [0.22352941, 0.23137255, 0.4745098 , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 80 (7.5%)
E           Max absolute difference: 0.64705882
E           Max relative difference: 2.89473684
E            x: array([[0.870588, 0.619608, 0.839216, 1.      ],
E                  [0.807843, 0.427451, 0.741176, 1.      ],
E                  [0.647059, 0.317647, 0.580392, 1.      ],...
E            y: array([[0.223529, 0.231373, 0.47451 , 1.      ],
E                  [0.807843, 0.427451, 0.741176, 1.      ],
E                  [0.647059, 0.317647, 0.580392, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[tab20c] ________________________

name = 'tab20c'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6e5c0>, array([[0.19215686, 0.50980392, 0.74117647, ... ],
       [0.74117647, 0.74117647, 0.74117647, 1.        ],
       [0.85098039, 0.85098039, 0.85098039, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 80 (7.5%)
E           Max absolute difference: 0.65882353
E           Max relative difference: 0.77419355
E            x: array([[0.192157, 0.509804, 0.741176, 1.      ],
E                  [0.419608, 0.682353, 0.839216, 1.      ],
E                  [0.619608, 0.792157, 0.882353, 1.      ],...
E            y: array([[0.85098 , 0.85098 , 0.85098 , 1.      ],
E                  [0.419608, 0.682353, 0.839216, 1.      ],
E                  [0.619608, 0.792157, 0.882353, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[tab20c_r] _______________________

name = 'tab20c_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6ea20>, array([[0.85098039, 0.85098039, 0.85098039, ... ],
       [0.41960784, 0.68235294, 0.83921569, 1.        ],
       [0.19215686, 0.50980392, 0.74117647, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 6 / 80 (7.5%)
E           Max absolute difference: 0.65882353
E           Max relative difference: 3.42857143
E            x: array([[0.85098 , 0.85098 , 0.85098 , 1.      ],
E                  [0.741176, 0.741176, 0.741176, 1.      ],
E                  [0.588235, 0.588235, 0.588235, 1.      ],...
E            y: array([[0.192157, 0.509804, 0.741176, 1.      ],
E                  [0.741176, 0.741176, 0.741176, 1.      ],
E                  [0.588235, 0.588235, 0.588235, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[terrain] _______________________

name = 'terrain'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afce00>, array([[0.2       , 0.2       , 0.6       , ... ],
       [0.99215686, 0.98996078, 0.9894902 , 1.        ],
       [1.        , 1.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.2     , 0.2     , 0.6     , 1.      ],
E                  [0.194771, 0.210458, 0.610458, 1.      ],
E                  [0.189542, 0.220915, 0.620915, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.194771, 0.210458, 0.610458, 1.      ],
E                  [0.189542, 0.220915, 0.620915, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[terrain_r] ______________________

name = 'terrain_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afd120>, array([[1.        , 1.        , 1.        , ... ],
       [0.19477124, 0.21045752, 0.61045752, 1.        ],
       [0.2       , 0.2       , 0.6       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[1.      , 1.      , 1.      , 1.      ],
E                  [0.992157, 0.989961, 0.98949 , 1.      ],
E                  [0.984314, 0.979922, 0.97898 , 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.992157, 0.989961, 0.98949 , 1.      ],
E                  [0.984314, 0.979922, 0.97898 , 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
________________________ test_colormap_reversing[turbo] ________________________

name = 'turbo'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6d800>, array([[0.18995, 0.07176, 0.23217, 1.     ],...0.02354, 0.00863, 1.     ],
       [0.49321, 0.01963, 0.00955, 1.     ],
       [0.4796 , 0.01583, 0.01055, 1.     ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.18995, 0.07176, 0.23217, 1.     ],
E                  [0.19483, 0.08339, 0.26149, 1.     ],
E                  [0.19956, 0.09498, 0.29024, 1.     ],...
E            y: array([[0.     , 0.     , 0.     , 0.     ],
E                  [0.19483, 0.08339, 0.26149, 1.     ],
E                  [0.19956, 0.09498, 0.29024, 1.     ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[turbo_r] _______________________

name = 'turbo_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afdda0>, array([[0.4796 , 0.01583, 0.01055, 1.     ],...0.09498, 0.29024, 1.     ],
       [0.19483, 0.08339, 0.26149, 1.     ],
       [0.18995, 0.07176, 0.23217, 1.     ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.4796 , 0.01583, 0.01055, 1.     ],
E                  [0.49321, 0.01963, 0.00955, 1.     ],
E                  [0.50664, 0.02354, 0.00863, 1.     ],...
E            y: array([[0.     , 0.     , 0.     , 0.     ],
E                  [0.49321, 0.01963, 0.00955, 1.     ],
E                  [0.50664, 0.02354, 0.00863, 1.     ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[twilight] _______________________

name = 'twilight'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afd440>, array([[0.88575016, 0.85000925, 0.88797365, ... ],
       [0.88554715, 0.84987174, 0.88336206, 1.        ],
       [0.88571155, 0.85002186, 0.88572539, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 2040 (0.392%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.88575 , 0.850009, 0.887974, 1.      ],
E                  [0.883785, 0.850729, 0.887232, 1.      ],
E                  [0.881722, 0.851276, 0.886381, 1.      ],...
E            y: array([[0.88575 , 0.850009, 0.887974, 1.      ],
E                  [0.883785, 0.850729, 0.887232, 1.      ],
E                  [0.881722, 0.851276, 0.886381, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_____________________ test_colormap_reversing[twilight_r] ______________________

name = 'twilight_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afd9e0>, array([[0.88571155, 0.85002186, 0.88572539, ... ],
       [0.8837852 , 0.85072941, 0.88723222, 1.        ],
       [0.88575016, 0.85000925, 0.88797365, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 2040 (0.392%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.885712, 0.850022, 0.885725, 1.      ],
E                  [0.885547, 0.849872, 0.883362, 1.      ],
E                  [0.885259, 0.849559, 0.880884, 1.      ],...
E            y: array([[0.885712, 0.850022, 0.885725, 1.      ],
E                  [0.885547, 0.849872, 0.883362, 1.      ],
E                  [0.885259, 0.849559, 0.880884, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
__________________ test_colormap_reversing[twilight_shifted] ___________________

name = 'twilight_shifted'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6cc20>, array([[0.18739228, 0.0771021 , 0.21618875, ... ],
       [0.18774482, 0.07725159, 0.21387449, 1.        ],
       [0.18488036, 0.07942573, 0.21307652, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 2040 (0.392%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.187392, 0.077102, 0.216189, 1.      ],
E                  [0.189759, 0.07502 , 0.219301, 1.      ],
E                  [0.191994, 0.073183, 0.222434, 1.      ],...
E            y: array([[0.187392, 0.077102, 0.216189, 1.      ],
E                  [0.189759, 0.07502 , 0.219301, 1.      ],
E                  [0.191994, 0.073183, 0.222434, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_________________ test_colormap_reversing[twilight_shifted_r] __________________

name = 'twilight_shifted_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afc5e0>, array([[0.18488036, 0.07942573, 0.21307652, ... ],
       [0.18975854, 0.07501986, 0.21930051, 1.        ],
       [0.18739228, 0.0771021 , 0.21618875, 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 2040 (0.392%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.18488 , 0.079426, 0.213077, 1.      ],
E                  [0.187745, 0.077252, 0.213874, 1.      ],
E                  [0.190496, 0.075311, 0.214656, 1.      ],...
E            y: array([[0.18488 , 0.079426, 0.213077, 1.      ],
E                  [0.187745, 0.077252, 0.213874, 1.      ],
E                  [0.190496, 0.075311, 0.214656, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[viridis] _______________________

name = 'viridis'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afda80>, array([[0.267004, 0.004874, 0.329415, 1.    ....130215, 1.      ],
       [0.983868, 0.904867, 0.136897, 1.      ],
       [0.993248, 0.906157, 0.143936, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.267004, 0.004874, 0.329415, 1.      ],
E                  [0.26851 , 0.009605, 0.335427, 1.      ],
E                  [0.269944, 0.014625, 0.341379, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.26851 , 0.009605, 0.335427, 1.      ],
E                  [0.269944, 0.014625, 0.341379, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[viridis_r] ______________________

name = 'viridis_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afc0e0>, array([[0.993248, 0.906157, 0.143936, 1.    ....341379, 1.      ],
       [0.26851 , 0.009605, 0.335427, 1.      ],
       [0.267004, 0.004874, 0.329415, 1.      ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 8 / 1024 (0.781%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.993248, 0.906157, 0.143936, 1.      ],
E                  [0.983868, 0.904867, 0.136897, 1.      ],
E                  [0.974417, 0.90359 , 0.130215, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.983868, 0.904867, 0.136897, 1.      ],
E                  [0.974417, 0.90359 , 0.130215, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
_______________________ test_colormap_reversing[winter] ________________________

name = 'winter'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9b6f100>, array([[0.        , 0.        , 1.        , ... ],
       [0.        , 0.99607843, 0.50196078, 1.        ],
       [0.        , 1.        , 0.5       , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 0.      , 1.      , 1.      ],
E                  [0.      , 0.003922, 0.998039, 1.      ],
E                  [0.      , 0.007843, 0.996078, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.003922, 0.998039, 1.      ],
E                  [0.      , 0.007843, 0.996078, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_colormap_reversing[winter_r] _______________________

name = 'winter_r'

    @pytest.mark.parametrize('name', sorted(mpl.colormaps()))
    def test_colormap_reversing(name):
        """
        Check the generated _lut data of a colormap and corresponding reversed
        colormap if they are almost the same.
        """
        cmap = mpl.colormaps[name]
        cmap_r = cmap.reversed()
        if not cmap_r._isinit:
            cmap._init()
            cmap_r._init()
>       assert_array_almost_equal(cmap._lut[:-3], cmap_r._lut[-4::-1])

lib/matplotlib/tests/test_colors.py:1217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_array_almost_equal.<locals>.compare at 0x2aaae9afe700>, array([[0.        , 1.        , 0.5       , ... ],
       [0.        , 0.00392157, 0.99803922, 1.        ],
       [0.        , 0.        , 1.        , 1.        ]]))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 6 decimals', 'precision': 6, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 6 decimals
E           
E           Mismatched elements: 5 / 1024 (0.488%)
E           Max absolute difference: 1.
E           Max relative difference: 1.
E            x: array([[0.      , 1.      , 0.5     , 1.      ],
E                  [0.      , 0.996078, 0.501961, 1.      ],
E                  [0.      , 0.992157, 0.503922, 1.      ],...
E            y: array([[0.      , 0.      , 0.      , 0.      ],
E                  [0.      , 0.996078, 0.501961, 1.      ],
E                  [0.      , 0.992157, 0.503922, 1.      ],...

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: AssertionError
______________________ test_non_mutable_get_values[over] _______________________

kind = 'over'

    @pytest.mark.parametrize('kind', ('over', 'under', 'bad'))
    def test_non_mutable_get_values(kind):
        cmap = copy.copy(mpl.colormaps['viridis'])
        init_value = getattr(cmap, f'get_{kind}')()
        getattr(cmap, f'set_{kind}')('k')
        black_value = getattr(cmap, f'get_{kind}')()
>       assert np.all(black_value == [0, 0, 0, 1])
E       assert False
E        +  where False = <function all at 0x2aaaad0862b0>(array([0., 0., 0., 0.]) == [0, 0, 0, 1]
E        +    where <function all at 0x2aaaad0862b0> = np.all
E           
E           Use -v to get more diff)

lib/matplotlib/tests/test_colors.py:1415: AssertionError
______________________ test_non_mutable_get_values[under] ______________________

kind = 'under'

    @pytest.mark.parametrize('kind', ('over', 'under', 'bad'))
    def test_non_mutable_get_values(kind):
        cmap = copy.copy(mpl.colormaps['viridis'])
        init_value = getattr(cmap, f'get_{kind}')()
        getattr(cmap, f'set_{kind}')('k')
        black_value = getattr(cmap, f'get_{kind}')()
>       assert np.all(black_value == [0, 0, 0, 1])
E       assert False
E        +  where False = <function all at 0x2aaaad0862b0>(array([0., 0., 0., 0.]) == [0, 0, 0, 1]
E        +    where <function all at 0x2aaaad0862b0> = np.all
E           
E           Use -v to get more diff)

lib/matplotlib/tests/test_colors.py:1415: AssertionError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_colors.py::test_create_lookup_table[5-result0]
PASSED lib/matplotlib/tests/test_colors.py::test_create_lookup_table[2-result1]
PASSED lib/matplotlib/tests/test_colors.py::test_create_lookup_table[1-result2]
PASSED lib/matplotlib/tests/test_colors.py::test_index_dtype[uint8]
PASSED lib/matplotlib/tests/test_colors.py::test_index_dtype[int]
PASSED lib/matplotlib/tests/test_colors.py::test_index_dtype[float16]
PASSED lib/matplotlib/tests/test_colors.py::test_index_dtype[float]
PASSED lib/matplotlib/tests/test_colors.py::test_register_cmap
PASSED lib/matplotlib/tests/test_colors.py::test_colormaps_get_cmap
PASSED lib/matplotlib/tests/test_colors.py::test_unregister_builtin_cmap
PASSED lib/matplotlib/tests/test_colors.py::test_colormap_copy
PASSED lib/matplotlib/tests/test_colors.py::test_colormap_equals
PASSED lib/matplotlib/tests/test_colors.py::test_colormap_endian
PASSED lib/matplotlib/tests/test_colors.py::test_colormap_return_types
PASSED lib/matplotlib/tests/test_colors.py::test_CenteredNorm
PASSED lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[-1-2]
PASSED lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[3-1]
PASSED lib/matplotlib/tests/test_colors.py::test_LogNorm
PASSED lib/matplotlib/tests/test_colors.py::test_LogNorm_inverse
PASSED lib/matplotlib/tests/test_colors.py::test_PowerNorm
PASSED lib/matplotlib/tests/test_colors.py::test_PowerNorm_translation_invariance
PASSED lib/matplotlib/tests/test_colors.py::test_Normalize
PASSED lib/matplotlib/tests/test_colors.py::test_FuncNorm
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmin
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmax
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scale
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center_max
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Even
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Odd
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminEqualsVcenter
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VmaxEqualsVcenter
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminGTVcenter
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VcenterGTVmax
PASSED lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_premature_scaling
PASSED lib/matplotlib/tests/test_colors.py::test_SymLogNorm
PASSED lib/matplotlib/tests/test_colors.py::test_SymLogNorm_colorbar
PASSED lib/matplotlib/tests/test_colors.py::test_SymLogNorm_single_zero
PASSED lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_init
PASSED lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_norm
PASSED lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors[png]
PASSED lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors2
PASSED lib/matplotlib/tests/test_colors.py::test_rgb_hsv_round_trip
PASSED lib/matplotlib/tests/test_colors.py::test_autoscale_masked
PASSED lib/matplotlib/tests/test_colors.py::test_light_source_shading_empty_mask
PASSED lib/matplotlib/tests/test_colors.py::test_light_source_hillshading
PASSED lib/matplotlib/tests/test_colors.py::test_light_source_planar_hillshading
PASSED lib/matplotlib/tests/test_colors.py::test_color_names
PASSED lib/matplotlib/tests/test_colors.py::test_pandas_iterable
PASSED lib/matplotlib/tests/test_colors.py::test_has_alpha_channel
PASSED lib/matplotlib/tests/test_colors.py::test_cn
PASSED lib/matplotlib/tests/test_colors.py::test_conversions
PASSED lib/matplotlib/tests/test_colors.py::test_conversions_masked
PASSED lib/matplotlib/tests/test_colors.py::test_to_rgba_array_single_str
PASSED lib/matplotlib/tests/test_colors.py::test_to_rgba_array_alpha_array
PASSED lib/matplotlib/tests/test_colors.py::test_failed_conversions
PASSED lib/matplotlib/tests/test_colors.py::test_grey_gray
PASSED lib/matplotlib/tests/test_colors.py::test_tableau_order
PASSED lib/matplotlib/tests/test_colors.py::test_ndarray_subclass_norm
PASSED lib/matplotlib/tests/test_colors.py::test_same_color
PASSED lib/matplotlib/tests/test_colors.py::test_hex_shorthand_notation
PASSED lib/matplotlib/tests/test_colors.py::test_repr_png
PASSED lib/matplotlib/tests/test_colors.py::test_repr_html
PASSED lib/matplotlib/tests/test_colors.py::test_get_under_over_bad
PASSED lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[bad]
PASSED lib/matplotlib/tests/test_colors.py::test_colormap_alpha_array
PASSED lib/matplotlib/tests/test_colors.py::test_colormap_bad_data_with_alpha
PASSED lib/matplotlib/tests/test_colors.py::test_2d_to_rgba
PASSED lib/matplotlib/tests/test_colors.py::test_set_dict_to_rgba
PASSED lib/matplotlib/tests/test_colors.py::test_norm_deepcopy
PASSED lib/matplotlib/tests/test_colors.py::test_norm_callback
PASSED lib/matplotlib/tests/test_colors.py::test_scalarmappable_norm_update
PASSED lib/matplotlib/tests/test_colors.py::test_norm_update_figs[png]
PASSED lib/matplotlib/tests/test_colors.py::test_norm_update_figs[pdf]
PASSED lib/matplotlib/tests/test_colors.py::test_make_norm_from_scale_name
PASSED lib/matplotlib/tests/test_colors.py::test_color_sequences
PASSED lib/matplotlib/tests/test_colors.py::test_cm_set_cmap_error
SKIPPED [1] lib/matplotlib/testing/compare.py:285: Don't know how to convert .svg files to png
FAILED lib/matplotlib/tests/test_colors.py::test_resampled - AssertionError: 
FAILED lib/matplotlib/tests/test_colors.py::test_double_register_builtin_cmap
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_invalid - Assertion...
FAILED lib/matplotlib/tests/test_colors.py::test_BoundaryNorm - AssertionError: 
FAILED lib/matplotlib/tests/test_colors.py::test_boundarynorm_and_colorbarbase[png]
FAILED lib/matplotlib/tests/test_colors.py::test_light_source_topo_surface[png]
FAILED lib/matplotlib/tests/test_colors.py::test_light_source_shading_default
FAILED lib/matplotlib/tests/test_colors.py::test_light_source_masked_shading
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg] - As...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg_r] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr] - As...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr_r] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot] - As...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot_r] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv] - As...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv_r] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet] - As...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet_r] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink] - A...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo] - ...
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis_r]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter]
FAILED lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter_r]
FAILED lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[over]
FAILED lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[under]
================== 176 failed, 79 passed, 1 skipped in 54.61s ==================
+ git checkout a3011dfd1aaa2487cce8aa7369475533133ef777 lib/matplotlib/tests/test_colors.py
Updated 1 path from fba3126962
