diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285d..8408b7b 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -977,6 +977,14 @@ class Card(_Verify):
         elif self.field_specifier:
             value = _format_value(self._value).strip()
             value = f"'{self.field_specifier}: {value}'"
+        elif isinstance(self._value, str) and self._value.endswith("''"):
+            # Special handling for strings ending with double single-quotes
+            formatted_value = _format_value(self._value[:-2])  # Format without the trailing ''
+            if len(formatted_value) + 2 <= 20:  # Assuming 20 is the max length for the value field
+                value = f"{formatted_value}''"
+            else:
+                # If adding '' would exceed the length, we need to truncate
+                value = f"{formatted_value[:-2]}''"
         else:
             value = _format_value(value)
 
diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py
index c573100..9f436bf 100644
--- a/astropy/io/fits/tests/test_header.py
+++ b/astropy/io/fits/tests/test_header.py
@@ -3197,3 +3197,40 @@ def test_subclass():
     assert copy_.comments["c"] == "no comment"
     my_header.extend((("d", 4.0),))
     assert my_header.comments["d"] == "no comment"
+    def test_card_double_single_quotes(self):
+        """Test Card handling of values with double single-quotes."""
+        for n in range(60, 70):
+            card1 = fits.Card('CONFIG', "x" * n + "''")
+            card2 = fits.Card.fromstring(str(card1))
+            assert card1.value == card2.value, f"Mismatch for length {n}"
+
+    def test_card_double_single_quotes_middle(self):
+        """Test Card handling of values with double single-quotes in the middle."""
+        for n in range(50, 70):
+            value = "x" * n + "''" + "x" * 10
+            card1 = fits.Card('CONFIG', value)
+            card2 = fits.Card.fromstring(str(card1))
+            assert card1.value == card2.value, f"Mismatch for length {n}"
+
+    def test_card_double_single_quotes_edge_cases(self):
+        """Test Card handling of values with double single-quotes in edge cases."""
+        # Test with exactly 68 characters before the double single-quotes
+        card1 = fits.Card('CONFIG', "x" * 68 + "''")
+        card2 = fits.Card.fromstring(str(card1))
+        assert card1.value == card2.value
+
+        # Test with 69 characters before the double single-quotes (should be truncated)
+        card1 = fits.Card('CONFIG', "x" * 69 + "''")
+        card2 = fits.Card.fromstring(str(card1))
+        assert card1.value == card2.value
+        assert len(card2.value) == 70  # 68 'x' + ''
+
+        # Test with double single-quotes at the very beginning
+        card1 = fits.Card('CONFIG', "''")
+        card2 = fits.Card.fromstring(str(card1))
+        assert card1.value == card2.value
+
+        # Test with double single-quotes at the very end of a long string
+        card1 = fits.Card('CONFIG', "x" * 68 + "''")
+        card2 = fits.Card.fromstring(str(card1))
+        assert card1.value == card2.value
