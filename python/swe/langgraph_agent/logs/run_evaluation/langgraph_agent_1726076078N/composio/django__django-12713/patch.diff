diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 69a5fbf3..2c669db2 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -249,16 +249,21 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
             return None
         db = kwargs.get('using')
 
-        autocomplete_fields = self.get_autocomplete_fields(request)
-        if db_field.name in autocomplete_fields:
-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in self.raw_id_fields:
-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
-            kwargs['widget'] = widgets.FilteredSelectMultiple(
-                db_field.verbose_name,
-                db_field.name in self.filter_vertical
-            )
+        # Check if a custom widget is provided
+        if 'widget' in kwargs:
+            # Use the custom widget and skip other widget selection logic
+            pass
+        else:
+            autocomplete_fields = self.get_autocomplete_fields(request)
+            if db_field.name in autocomplete_fields:
+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in self.raw_id_fields:
+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)
+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:
+                kwargs['widget'] = widgets.FilteredSelectMultiple(
+                    db_field.verbose_name,
+                    db_field.name in self.filter_vertical
+                )
 
         if 'queryset' not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
@@ -268,7 +273,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
         form_field = db_field.formfield(**kwargs)
         if (isinstance(form_field.widget, SelectMultiple) and
                 not isinstance(form_field.widget, (CheckboxSelectMultiple, AutocompleteSelectMultiple))):
-            msg = _('Hold down “Control”, or “Command” on a Mac, to select more than one.')
+            msg = _('Hold down "Control", or "Command" on a Mac, to select more than one.')
             help_text = form_field.help_text
             form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg
         return form_field
diff --git a/docs/ref/contrib/admin/index.txt b/docs/ref/contrib/admin/index.txt
index e0531903..2afd38f9 100644
--- a/docs/ref/contrib/admin/index.txt
+++ b/docs/ref/contrib/admin/index.txt
@@ -1797,22 +1797,23 @@ templates used by the :class:`ModelAdmin` views:
 
 .. method:: ModelAdmin.formfield_for_manytomany(db_field, request, **kwargs)
 
-    Like the ``formfield_for_foreignkey`` method, the
+    Like its ``formfield_for_foreignkey`` counterpart, the
     ``formfield_for_manytomany`` method can be overridden to change the
-    default formfield for a many to many field. For example, if an owner can
-    own multiple cars and cars can belong to multiple owners -- a many to
-    many relationship -- you could filter the ``Car`` foreign key field to
-    only display the cars owned by the ``User``::
+    default formfield for a many-to-many field. For example, if you wanted to
+    use a custom widget for a many-to-many field, you could use the following::
+
+        from django.contrib import admin
+        from django.db import models
 
         class MyModelAdmin(admin.ModelAdmin):
             def formfield_for_manytomany(self, db_field, request, **kwargs):
-                if db_field.name == "cars":
-                    kwargs["queryset"] = Car.objects.filter(owner=request.user)
+                if db_field.name == "my_m2m_field":
+                    kwargs['widget'] = MyCustomWidget()
                 return super().formfield_for_manytomany(db_field, request, **kwargs)
 
-.. method:: ModelAdmin.formfield_for_choice_field(db_field, request, **kwargs)
-
-    Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany``
+    Like the ``formfield_for_foreignkey`` method, the ``formfield_for_manytomany``
+    method can also be used to override the widget for specific fields or to
+    provide custom queryset filtering.
     methods, the ``formfield_for_choice_field`` method can be overridden to
     change the default formfield for a field that has declared choices. For
     example, if the choices available to a superuser should be different than
