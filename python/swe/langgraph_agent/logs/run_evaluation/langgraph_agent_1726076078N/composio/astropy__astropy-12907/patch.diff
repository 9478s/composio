diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py
index a308e27..978fbfd 100644
--- a/astropy/modeling/separable.py
+++ b/astropy/modeling/separable.py
@@ -55,9 +55,9 @@ def is_separable(transform):
 
     """
     if transform.n_inputs == 1 and transform.n_outputs > 1:
-        is_separable = np.array([False] * transform.n_outputs).T
+        is_separable = np.array([False] * transform.n_outputs)
         return is_separable
-    separable_matrix = _separable(transform)
+    separable_matrix, _, _ = _separable(transform)
     is_separable = separable_matrix.sum(1)
     is_separable = np.where(is_separable != 1, False, True)
     return is_separable
@@ -97,7 +97,7 @@ def separability_matrix(transform):
     if transform.n_inputs == 1 and transform.n_outputs > 1:
         return np.ones((transform.n_outputs, transform.n_inputs),
                        dtype=np.bool_)
-    separable_matrix = _separable(transform)
+    separable_matrix, _, _ = _separable(transform)
     separable_matrix = np.where(separable_matrix != 0, True, False)
     return separable_matrix
 
@@ -286,6 +286,72 @@ def _cdot(left, right):
                 cright, cleft))
     return result
 
+def _combine_matrices(left_matrix, right_matrix, left_inputs, left_outputs, right_inputs, right_outputs, op):
+    """
+    Combine separability matrices for nested CompoundModels.
+
+    Parameters
+    ----------
+    left_matrix : ndarray
+        Separability matrix of the left model
+    right_matrix : ndarray
+        Separability matrix of the right model
+    left_inputs : int
+        Number of inputs of the left model
+    left_outputs : int
+        Number of outputs of the left model
+    right_inputs : int
+        Number of inputs of the right model
+    right_outputs : int
+        Number of outputs of the right model
+    op : str
+        Operator used to combine the models ('&' or '|')
+
+    Returns
+    -------
+    combined_matrix : ndarray
+        Combined separability matrix
+    """
+    if op == '&':
+        return np.block([[left_matrix, np.zeros((left_outputs, right_inputs))],
+                         [np.zeros((right_outputs, left_inputs)), right_matrix]])
+    elif op == '|':
+        return np.dot(right_matrix, left_matrix)
+    else:
+        raise ValueError(f"Unsupported operator: {op}")
+
+def _separable(transform):
+    """
+    Calculate the separability of outputs.
+
+    Parameters
+    ----------
+    transform : `astropy.modeling.Model`
+        A transform (usually a compound model).
+
+    Returns
+    -------
+    is_separable : tuple
+        A tuple containing:
+        - ndarray of dtype np.bool: The separability matrix
+        - int: Number of inputs
+        - int: Number of outputs
+    """
+    if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:
+        return transform_matrix, transform.n_inputs, transform.n_outputs
+    elif isinstance(transform, CompoundModel):
+        left_matrix, left_inputs, left_outputs = _separable(transform.left)
+        right_matrix, right_inputs, right_outputs = _separable(transform.right)
+        
+        combined_matrix = _combine_matrices(left_matrix, right_matrix, 
+                                            left_inputs, left_outputs, 
+                                            right_inputs, right_outputs, 
+                                            transform.op)
+        
+        return combined_matrix, transform.n_inputs, transform.n_outputs
+    elif isinstance(transform, Model):
+        matrix = _coord_matrix(transform, 'left', transform.n_outputs)
+        return matrix, transform.n_inputs, transform.n_outputs
 
 def _separable(transform):
     """
diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py
index 8dfe5c8..752009a 100644
--- a/astropy/modeling/tests/test_separable.py
+++ b/astropy/modeling/tests/test_separable.py
@@ -147,4 +147,42 @@ def test_custom_model_separable():
         return x + y
 
     assert not model_c().separable
-    assert np.all(separability_matrix(model_c()) == [True, True])
+
+def test_nested_compound_models():
+    # Test case for nested CompoundModels
+    cm = models.Linear1D(10) & models.Linear1D(5)
+    nested_cm = models.Pix2Sky_TAN() & cm
+
+    # Test separability_matrix
+    sep_matrix = separability_matrix(nested_cm)
+    expected_matrix = np.array([
+        [True, True, False, False],
+        [True, True, False, False],
+        [False, False, True, False],
+        [False, False, False, True]
+    ])
+    assert_allclose(sep_matrix, expected_matrix)
+
+    # Test is_separable
+    is_sep = is_separable(nested_cm)
+    expected_is_sep = np.array([False, False, True, True])
+    assert_allclose(is_sep, expected_is_sep)
+
+def test_complex_nested_compound_models():
+    # Test case for more complex nested CompoundModels
+    cm1 = models.Linear1D(10) & models.Linear1D(5)
+    cm2 = models.Polynomial2D(2) | models.Rotation2D(30)
+    nested_cm = models.Pix2Sky_TAN() & cm1 | cm2
+
+    # Test separability_matrix
+    sep_matrix = separability_matrix(nested_cm)
+    expected_matrix = np.array([
+        [True, True, True, True],
+        [True, True, True, True]
+    ])
+    assert_allclose(sep_matrix, expected_matrix)
+
+    # Test is_separable
+    is_sep = is_separable(nested_cm)
+    expected_is_sep = np.array([False, False])
+    assert_allclose(is_sep, expected_is_sep)
