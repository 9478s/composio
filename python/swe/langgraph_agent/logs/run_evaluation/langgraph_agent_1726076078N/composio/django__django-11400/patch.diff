diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py
index d65e01d5..1a54f772 100644
--- a/django/contrib/admin/filters.py
+++ b/django/contrib/admin/filters.py
@@ -194,10 +194,18 @@ class RelatedFieldListFilter(FieldListFilter):
         return [self.lookup_kwarg, self.lookup_kwarg_isnull]
 
     def field_choices(self, field, request, model_admin):
-        ordering = ()
         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
         if related_admin is not None:
             ordering = related_admin.get_ordering(request)
+        else:
+            ordering = None
+        
+        if not ordering:
+            if field.remote_field.model._meta.ordering:
+                ordering = field.remote_field.model._meta.ordering
+            else:
+                ordering = ('pk',)
+        
         return field.get_choices(include_blank=False, ordering=ordering)
 
     def choices(self, changelist):
@@ -408,7 +416,6 @@ class AllValuesFieldListFilter(FieldListFilter):
         if include_none:
             yield {
                 'selected': bool(self.lookup_val_isnull),
-                'query_string': changelist.get_query_string({self.lookup_kwarg_isnull: 'True'}, [self.lookup_kwarg]),
                 'display': self.empty_value_display,
             }
 
@@ -419,4 +426,16 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)
 class RelatedOnlyFieldListFilter(RelatedFieldListFilter):
     def field_choices(self, field, request, model_admin):
         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)
-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})
+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)
+        if related_admin is not None:
+            ordering = related_admin.get_ordering(request)
+        else:
+            ordering = None
+        
+        if not ordering:
+            if field.remote_field.model._meta.ordering:
+                ordering = field.remote_field.model._meta.ordering
+            else:
+                ordering = ('pk',)
+        
+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)
