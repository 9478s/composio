diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 3a50654..89dd704 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -166,10 +166,10 @@ def _get_aligned_offsets(hd_list, height, align="baseline"):
         descent = max(d for h, d in hd_list)
         height = height_descent + descent
         offsets = [0. for h, d in hd_list]
-    elif align in ["left", "top"]:
+    elif align in ["left", "bottom"]:  # Changed from "top" to "bottom"
         descent = 0.
         offsets = [d for h, d in hd_list]
-    elif align in ["right", "bottom"]:
+    elif align in ["right", "top"]:  # Changed from "bottom" to "top"
         descent = 0.
         offsets = [height - h + d for h, d in hd_list]
     elif align == "center":
@@ -459,9 +459,31 @@ class VPacker(PackerBase):
 class HPacker(PackerBase):
     """
     HPacker packs its children horizontally, automatically adjusting their
-    relative positions at draw time.
-    """
+    positions so that they do not overlap with each other.
 
+    Parameters
+    ----------
+    pad : float, default: 0.0
+        Padding between items, in points.
+    sep : float, default: 0.0
+        Spacing between items, in points.
+    width : float, default: None
+        A fixed width, in points.
+    height : float, default: None
+        A fixed height, in points.
+    align : {'baseline', 'left', 'top', 'right', 'bottom', 'center'}, default: 'baseline'
+        The alignment of the boxes. For vertical alignment:
+        - 'top': Align the top edges of the boxes.
+        - 'bottom': Align the bottom edges of the boxes.
+        - 'center': Align the vertical centers of the boxes.
+        For horizontal alignment:
+        - 'left': Align the left edges of the boxes.
+        - 'right': Align the right edges of the boxes.
+        - 'center': Align the horizontal centers of the boxes.
+        - 'baseline': Align the baselines of the text (if any).
+    mode : {'fixed', 'expand', 'equal'}, default: 'fixed'
+        The packing mode.
+    """
     def get_extent_offsets(self, renderer):
         # docstring inherited
         dpicor = renderer.points_to_pixels(1.)
diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py
index 02756ff..29bf479 100644
--- a/lib/matplotlib/tests/test_offsetbox.py
+++ b/lib/matplotlib/tests/test_offsetbox.py
@@ -334,4 +334,60 @@ def test_arrowprops_copied():
                         boxcoords="axes fraction", box_alignment=(0., .5),
                         arrowprops=arrowprops)
     assert ab.arrowprops is not ab
-    assert arrowprops["relpos"] == (.3, .7)
+def test_hpacker_alignment():
+    from matplotlib.offsetbox import HPacker, DrawingArea
+    from matplotlib.patches import Rectangle
+
+    # Create two DrawingAreas with different heights
+    da1 = DrawingArea(10, 20)
+    da1.add_artist(Rectangle((0, 0), 10, 20))
+
+    da2 = DrawingArea(10, 30)
+    da2.add_artist(Rectangle((0, 0), 10, 30))
+
+    # Test top alignment
+    hpack_top = HPacker(children=[da1, da2], pad=0, sep=0, align="top")
+    _, _, _, _, offsets_top = hpack_top.get_extent_offsets(None)
+    assert offsets_top[0][1] == offsets_top[1][1], "Top edges should be aligned"
+
+    # Test bottom alignment
+    hpack_bottom = HPacker(children=[da1, da2], pad=0, sep=0, align="bottom")
+    _, _, _, _, offsets_bottom = hpack_bottom.get_extent_offsets(None)
+    assert (offsets_bottom[0][1] + 20 == offsets_bottom[1][1] + 30), "Bottom edges should be aligned"
+
+    # Test center alignment
+    hpack_center = HPacker(children=[da1, da2], pad=0, sep=0, align="center")
+    _, _, _, _, offsets_center = hpack_center.get_extent_offsets(None)
+    assert (offsets_center[0][1] + 10 == offsets_center[1][1] + 15), "Centers should be aligned"
+
+def test_hpacker_vertical_alignment():
+    from matplotlib.offsetbox import HPacker, DrawingArea
+    from matplotlib.patches import Rectangle
+
+    # Create two DrawingAreas with different heights
+    da1 = DrawingArea(10, 20)
+    da1.add_artist(Rectangle((0, 0), 10, 20))
+
+    da2 = DrawingArea(10, 30)
+    da2.add_artist(Rectangle((0, 0), 10, 30))
+
+    # Test all vertical alignment options
+    alignments = ['top', 'bottom', 'center', 'baseline']
+    for align in alignments:
+        hpack = HPacker(children=[da1, da2], pad=0, sep=0, align=align)
+        _, height, _, _, offsets = hpack.get_extent_offsets(None)
+
+        if align == 'top':
+            assert offsets[0][1] == offsets[1][1], f"{align} alignment failed"
+        elif align == 'bottom':
+            assert (offsets[0][1] + 20 == offsets[1][1] + 30), f"{align} alignment failed"
+        elif align == 'center':
+            assert (offsets[0][1] + 10 == offsets[1][1] + 15), f"{align} alignment failed"
+        elif align == 'baseline':
+            # Baseline alignment should behave like bottom alignment for rectangles
+            assert (offsets[0][1] + 20 == offsets[1][1] + 30), f"{align} alignment failed"
+
+        # Check that the height of the HPacker is correct
+        assert height == max(20, 30), f"Incorrect height for {align} alignment"
+
+# Add more tests here if needed
