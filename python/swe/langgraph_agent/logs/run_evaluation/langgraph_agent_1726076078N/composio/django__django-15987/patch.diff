diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index ac97f131..53767c19 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -2,6 +2,7 @@ import functools
 import glob
 import gzip
 import os
+from pathlib import Path
 import sys
 import warnings
 import zipfile
@@ -279,14 +280,17 @@ class Command(BaseCommand):
                 )
 
     def get_fixture_name_and_dirs(self, fixture_name):
-        dirname, basename = os.path.split(fixture_name)
-        if os.path.isabs(fixture_name):
-            fixture_dirs = [dirname]
+        from pathlib import Path
+        fixture_path = Path(fixture_name)
+        if fixture_path.is_absolute():
+            fixture_dirs = [fixture_path.parent]
+            basename = fixture_path.name
         else:
             fixture_dirs = self.fixture_dirs
-            if os.path.sep in os.path.normpath(fixture_name):
-                fixture_dirs = [os.path.join(dir_, dirname) for dir_ in fixture_dirs]
-        return basename, fixture_dirs
+            if '/' in str(fixture_path):
+                fixture_dirs = [Path(dir_) / fixture_path.parent for dir_ in fixture_dirs]
+            basename = fixture_path.name
+        return basename, [str(d) for d in fixture_dirs]
 
     def get_targets(self, fixture_name, ser_fmt, cmp_fmt):
         databases = [self.using, None]
@@ -311,9 +315,12 @@ class Command(BaseCommand):
                 fixture_files_in_dir.append((candidate, fixture_dir, fixture_name))
         return fixture_files_in_dir
 
+    @functools.lru_cache(maxsize=None)
     @functools.lru_cache(maxsize=None)
     def find_fixtures(self, fixture_label):
         """Find fixture files for a given label."""
+        from pathlib import Path
+
         if fixture_label == READ_STDIN:
             return [(READ_STDIN, None, READ_STDIN)]
 
@@ -324,7 +331,11 @@ class Command(BaseCommand):
         fixture_name, fixture_dirs = self.get_fixture_name_and_dirs(fixture_name)
         targets = self.get_targets(fixture_name, ser_fmt, cmp_fmt)
         fixture_files = []
+        seen_dirs = set()
         for fixture_dir in fixture_dirs:
+            if Path(fixture_dir) in seen_dirs:
+                continue
+            seen_dirs.add(Path(fixture_dir))
             if self.verbosity >= 2:
                 self.stdout.write("Checking %s for fixtures..." % humanize(fixture_dir))
             fixture_files_in_dir = self.find_fixture_files_in_dir(
@@ -337,13 +348,6 @@ class Command(BaseCommand):
                     "No fixture '%s' in %s." % (fixture_name, humanize(fixture_dir))
                 )
 
-            # Check kept for backwards-compatibility; it isn't clear why
-            # duplicates are only allowed in different directories.
-            if len(fixture_files_in_dir) > 1:
-                raise CommandError(
-                    "Multiple fixtures named '%s' in %s. Aborting."
-                    % (fixture_name, humanize(fixture_dir))
-                )
             fixture_files.extend(fixture_files_in_dir)
 
         if not fixture_files:
