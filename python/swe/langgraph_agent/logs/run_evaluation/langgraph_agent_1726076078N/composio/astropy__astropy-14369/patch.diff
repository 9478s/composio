diff --git a/astropy/io/ascii/cds.py b/astropy/io/ascii/cds.py
index 7a83fc3..2275eba 100644
--- a/astropy/io/ascii/cds.py
+++ b/astropy/io/ascii/cds.py
@@ -9,6 +9,21 @@ cds.py:
 """
 
 
+import fnmatch
+import itertools
+import os
+import re
+from contextlib import suppress
+
+from astropy.units import Unit
+
+from . import core, fixedwidth
+from .cds_units import CdsUnit
+
+__doctest_skip__ = ["*"]
+
+
+
 import fnmatch
 import itertools
 import os
@@ -126,12 +141,12 @@ class CdsHeader(core.BaseHeader):
                 col.start = int(
                     re.sub(r'[-\s]', '', match.group('start') or match.group('end'))) - 1  # fmt: skip
                 col.end = int(match.group("end"))
+
                 unit = match.group("units")
                 if unit == "---":
                     col.unit = None  # "---" is the marker for no unit in CDS/MRT table
                 else:
-                    col.unit = Unit(unit, format="cds", parse_strict="warn")
-                col.description = (match.group("descr") or "").strip()
+                    col.unit = CdsUnit.from_cds(unit)  # Use the new CdsUnit class
                 col.raw_type = match.group("format")
                 col.type = self.get_col_type(col)
 
diff --git a/astropy/io/ascii/cds_units.py b/astropy/io/ascii/cds_units.py
new file mode 100644
index 0000000..54ef716
--- /dev/null
+++ b/astropy/io/ascii/cds_units.py
@@ -0,0 +1,22 @@
+from astropy import units as u
+
+class CdsUnit(u.Unit):
+    @classmethod
+    def from_cds(cls, unit_string):
+        # Split the unit string into components
+        components = unit_string.split('/')
+        
+        # Process each component
+        processed_components = []
+        for component in components:
+            if '^' in component:
+                base, power = component.split('^')
+                processed_components.append(f"{base}**{power}")
+            else:
+                processed_components.append(component)
+        
+        # Join the processed components
+        processed_unit_string = ' / '.join(processed_components)
+        
+        # Create the unit using the processed string
+        return cls(processed_unit_string)
\ No newline at end of file
