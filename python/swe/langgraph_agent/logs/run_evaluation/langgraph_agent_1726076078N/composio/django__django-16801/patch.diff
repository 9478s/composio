diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7f8eb128..a1d4c4e3 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -441,9 +441,11 @@ class ImageField(FileField):
         # after their corresponding image field don't stay cleared by
         # Model.__init__, see bug #11196.
         # Only run post-initialization dimension update on non-abstract models
-        if not cls._meta.abstract:
+        # and only if width_field or height_field is set.
+        # This optimization prevents unnecessary signal connections and method calls
+        # when dimension fields are not used, improving model initialization performance.
+        if not cls._meta.abstract and (self.width_field or self.height_field):
             signals.post_init.connect(self.update_dimension_fields, sender=cls)
-
     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
         """
         Update field's width and height fields, if defined.
@@ -457,11 +459,16 @@ class ImageField(FileField):
         Dimensions can be forced to update with force=True, which is how
         ImageFileDescriptor.__set__ calls this method.
         """
+        # Return early if both width_field and height_field are None
+        if not self.width_field and not self.height_field:
+            return
+
         # Nothing to update if the field doesn't have dimension fields or if
         # the field is deferred.
         has_dimension_fields = self.width_field or self.height_field
         if not has_dimension_fields or self.attname not in instance.__dict__:
             return
+            return
 
         # getattr will call the ImageFileDescriptor's __get__ method, which
         # coerces the assigned value into an instance of self.attr_class
