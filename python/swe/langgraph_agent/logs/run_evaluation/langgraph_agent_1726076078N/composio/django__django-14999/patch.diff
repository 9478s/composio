diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be..38212bee 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,6 +320,15 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
+            
+            # Check if db_table is explicitly set and the same for both models
+            old_db_table = old_model._meta.db_table
+            new_db_table = new_model._meta.db_table
+            
+            if old_db_table == new_db_table and old_model._meta.db_table_set and new_model._meta.db_table_set:
+                # If db_table is explicitly set and the same for both models, skip renaming
+                return
+
             # Move the main table
             schema_editor.alter_db_table(
                 new_model,
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index 11961a1f..9a9bafc3 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -650,6 +650,45 @@ class OperationTests(OperationTestBase):
         self.assertEqual(definition[0], "RenameModel")
         self.assertEqual(definition[1], [])
         self.assertEqual(definition[2], {'old_name': "Pony", 'new_name': "Horse"})
+    def test_rename_model_with_db_table(self):
+        """
+        Tests the RenameModel operation with explicitly set db_table.
+        """
+        project_state = self.set_up_test_model("test_rnmo")
+        operation = migrations.RenameModel("Pony", "Horse")
+
+        # Test the state alteration
+        new_state = project_state.clone()
+        operation.state_forwards("test_rnmo", new_state)
+        self.assertNotIn(("test_rnmo", "pony"), new_state.models)
+        self.assertIn(("test_rnmo", "horse"), new_state.models)
+
+        # Test the database alteration
+        self.assertTableExists("test_rnmo_pony")
+        self.assertTableNotExists("test_rnmo_horse")
+
+        # Manually set db_table for both old and new models
+        project_state.models["test_rnmo", "pony"].options["db_table"] = "custom_pony_table"
+        new_state.models["test_rnmo", "horse"].options["db_table"] = "custom_pony_table"
+
+        with connection.schema_editor() as editor:
+            operation.database_forwards("test_rnmo", editor, project_state, new_state)
+
+        # Table name should remain unchanged
+        self.assertTableExists("custom_pony_table")
+        self.assertTableNotExists("test_rnmo_pony")
+        self.assertTableNotExists("test_rnmo_horse")
+
+        # And test reversal
+        with connection.schema_editor() as editor:
+            operation.database_backwards("test_rnmo", editor, new_state, project_state)
+
+        # Table name should still remain unchanged
+        self.assertTableExists("custom_pony_table")
+        self.assertTableNotExists("test_rnmo_pony")
+        self.assertTableNotExists("test_rnmo_horse")
+
+    
 
     def test_rename_model_state_forwards(self):
         """
