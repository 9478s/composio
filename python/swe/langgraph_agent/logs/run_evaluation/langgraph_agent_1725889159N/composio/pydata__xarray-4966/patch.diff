diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..e8cac11 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -285,21 +285,27 @@ class CFScaleOffsetCoder(VariableCoder):
 
 
 class UnsignedIntegerCoder(VariableCoder):
+    def decode(self, variable, name=None):
+        dims, data, attrs, encoding = unpack_for_decoding(variable)
+        unsigned = pop_to(attrs, encoding, "_Unsigned")
+        if unsigned is not None:
+            unsigned = unsigned.lower() == "true"
+            if unsigned and data.dtype.kind == "i":
+                # Convert signed to unsigned
+                data = np.asarray(data, dtype=f"u{data.dtype.itemsize}")
+            elif not unsigned and data.dtype.kind == "u":
+                # Convert unsigned to signed
+                data = np.asarray(data, dtype=f"i{data.dtype.itemsize}")
+        return Variable(dims, data, attrs, encoding)
+
     def encode(self, variable, name=None):
         dims, data, attrs, encoding = unpack_for_encoding(variable)
-
-        # from netCDF best practices
-        # https://www.unidata.ucar.edu/software/netcdf/docs/BestPractices.html
-        #     "_Unsigned = "true" to indicate that
-        #      integer data should be treated as unsigned"
-        if encoding.get("_Unsigned", "false") == "true":
+        if encoding.get("_Unsigned", "false").lower() == "true":
             pop_to(encoding, attrs, "_Unsigned")
-            signed_dtype = np.dtype("i%s" % data.dtype.itemsize)
+            signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
             if "_FillValue" in attrs:
-                new_fill = signed_dtype.type(attrs["_FillValue"])
-                attrs["_FillValue"] = new_fill
+                attrs["_FillValue"] = signed_dtype.type(attrs["_FillValue"])
             data = duck_array_ops.around(data).astype(signed_dtype)
-
         return Variable(dims, data, attrs, encoding)
 
     def decode(self, variable, name=None):
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
index e0df778..493a281 100644
--- a/xarray/tests/test_coding.py
+++ b/xarray/tests/test_coding.py
@@ -116,4 +116,207 @@ def test_scaling_offset_as_list(scale_factor, add_offset):
     coder = variables.CFScaleOffsetCoder()
     encoded = coder.encode(original)
     roundtripped = coder.decode(encoded)
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.int8), attrs={"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8), attrs={"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_encode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8), attrs={"_Unsigned": "true"})
+    coder = variables.UnsignedIntegerCoder()
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+    original = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.int8), attrs={"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8), attrs={"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_encode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8), attrs={"_Unsigned": "true"})
+    coder = variables.UnsignedIntegerCoder()
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+    original = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.int8), attrs={"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8), attrs={"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_encode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8), attrs={"_Unsigned": "true"})
+    coder = variables.UnsignedIntegerCoder()
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+    original = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.int8), attrs={"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8), attrs={"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_encode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8), attrs={"_Unsigned": "true"})
+    coder = variables.UnsignedIntegerCoder()
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+    original = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.int8), {"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8), {"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_encode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8), {"_Unsigned": "true"})
+    coder = variables.UnsignedIntegerCoder()
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+    original = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.int8), {"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8), {"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_encode():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8), {"_Unsigned": "true"})
+    coder = variables.UnsignedIntegerCoder()
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+    original = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    expected = xr.Variable(("x",), np.array([0, -128, -1], dtype=np.int8))
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype=np.uint8))
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), [0, 128, 255], {"_Unsigned": "true"}, {"dtype": np.int8})
+    expected = xr.Variable(("x",), [0, 128, 255], dtype=np.uint8)
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    original = xr.Variable(("x",), [0, 128, 255], {"_Unsigned": "false"}, {"dtype": np.uint8})
+    expected = xr.Variable(("x",), [0, -128, -1], dtype=np.int8)
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_encode():
+    original = xr.Variable(("x",), [0, 128, 255], dtype=np.uint8)
+    expected = xr.Variable(("x",), [0, -128, -1], {"_Unsigned": "true"}, {"dtype": np.int8})
+    coder = variables.UnsignedIntegerCoder()
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+    original = xr.Variable(("x",), [0, -128, -1], dtype=np.int8)
+    expected = xr.Variable(("x",), [0, -128, -1], {}, {"dtype": np.int8})
+    encoded = coder.encode(original)
+    assert_identical(expected, encoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), [0, 128, 255], dtype=np.uint8)
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
     assert_allclose(original, roundtripped)
