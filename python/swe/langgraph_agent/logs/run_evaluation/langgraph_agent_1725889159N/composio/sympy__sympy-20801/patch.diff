diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 79f6a7d..7274dd8 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1389,7 +1389,7 @@ def __eq__(self, other):
         if not self:
             return not other
         if isinstance(other, Boolean):
-            return False
+            return (self == 1.0) == (other is S.true)
         if other.is_NumberSymbol:
             if other.is_irrational:
                 return False
diff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py
index fbcba1f..d5dca84 100644
--- a/sympy/logic/boolalg.py
+++ b/sympy/logic/boolalg.py
@@ -95,6 +95,50 @@ def __lshift__(self, other):
     __rrshift__ = __lshift__
     __rlshift__ = __rshift__
 
+    @sympify_return([('other', 'Boolean')], NotImplemented)
+    def __xor__(self, other):
+        return Xor(self, other)
+
+    def __eq__(self, other):
+        from sympy import Float
+        if isinstance(other, Float):
+            return (self is S.true) == (other == 1.0)
+        return super().__eq__(other)
+
+    __rxor__ = __xor__
+    """A boolean object is an object for which logic operations make sense."""
+
+    __slots__ = ()
+
+    kind = BooleanKind
+
+    @sympify_return([('other', 'Boolean')], NotImplemented)
+    def __and__(self, other):
+        return And(self, other)
+
+    __rand__ = __and__
+
+    @sympify_return([('other', 'Boolean')], NotImplemented)
+    def __or__(self, other):
+        return Or(self, other)
+
+    __ror__ = __or__
+
+    def __invert__(self):
+        """Overloading for ~"""
+        return Not(self)
+
+    @sympify_return([('other', 'Boolean')], NotImplemented)
+    def __rshift__(self, other):
+        return Implies(self, other)
+
+    @sympify_return([('other', 'Boolean')], NotImplemented)
+    def __lshift__(self, other):
+        return Implies(other, self)
+
+    __rrshift__ = __lshift__
+    __rlshift__ = __rshift__
+
     @sympify_return([('other', 'Boolean')], NotImplemented)
     def __xor__(self, other):
         return Xor(self, other)
