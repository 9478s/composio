diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a86..98641a68 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -250,12 +250,24 @@ class MigrationExecutor:
         if not fake:
             with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
                 state = migration.unapply(state, schema_editor)
-        # For replacement migrations, record individual statuses
+        
+        # For replacement migrations, check if all replaced migrations are unapplied
         if migration.replaces:
-            for app_label, name in migration.replaces:
-                self.recorder.record_unapplied(app_label, name)
+            all_unapplied = all(
+                not self.recorder.is_applied(app_label, name)
+                for app_label, name in migration.replaces
+            )
+            if all_unapplied:
+                # If all replaced migrations are unapplied, mark the squashed migration as unapplied
+                self.recorder.record_unapplied(migration.app_label, migration.name)
+            else:
+                # Otherwise, only mark the individual replaced migrations as unapplied
+                for app_label, name in migration.replaces:
+                    self.recorder.record_unapplied(app_label, name)
         else:
+            # For non-replacement migrations, mark as unapplied as before
             self.recorder.record_unapplied(migration.app_label, migration.name)
+        
         # Report progress
         if self.progress_callback:
             self.progress_callback("unapply_success", migration, fake)
diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7..3e6f28de 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -94,3 +94,7 @@ class MigrationRecorder:
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
         self.migration_qs.all().delete()
+
+    def is_applied(self, app, name):
+        """Check if a migration has been applied."""
+        return self.migration_qs.filter(app=app, name=name).exists()
