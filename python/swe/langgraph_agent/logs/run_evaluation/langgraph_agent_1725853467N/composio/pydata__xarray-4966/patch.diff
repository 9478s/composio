diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..2db22a7 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -308,20 +308,121 @@ class UnsignedIntegerCoder(VariableCoder):
         if "_Unsigned" in attrs:
             unsigned = pop_to(attrs, encoding, "_Unsigned")
 
-            if data.dtype.kind == "i":
-                if unsigned == "true":
-                    unsigned_dtype = np.dtype("u%s" % data.dtype.itemsize)
+            if data.dtype.kind in ["i", "u"]:
+                if unsigned == "true" and data.dtype.kind == "i":
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
                     transform = partial(np.asarray, dtype=unsigned_dtype)
                     data = lazy_elemwise_func(data, transform, unsigned_dtype)
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+                elif unsigned == "false" and data.dtype.kind == "u":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
+            else:
+                warnings.warn(
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Ignoring attribute.",
+                    SerializationWarning,
+                    stacklevel=3,
+                )
+
+        return Variable(dims, data, attrs, encoding)
+
+    def encode(self, variable, name=None):
+        dims, data, attrs, encoding = unpack_for_encoding(variable)
+
+        if "_Unsigned" in attrs:
+            unsigned = pop_to(attrs, encoding, "_Unsigned")
+
+            if data.dtype.kind in ["i", "u"]:
+                if unsigned == "true" and data.dtype.kind == "i":
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=unsigned_dtype)
+                    data = lazy_elemwise_func(data, transform, unsigned_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = unsigned_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
+                elif unsigned == "false" and data.dtype.kind == "u":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
+            else:
+                warnings.warn(
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Ignoring attribute.",
+                    SerializationWarning,
+                    stacklevel=3,
+                )
+
+        return Variable(dims, data, attrs, encoding)
+    def decode(self, variable, name=None):
+        dims, data, attrs, encoding = unpack_for_decoding(variable)
+
+        if "_Unsigned" in attrs:
+            unsigned = pop_to(attrs, encoding, "_Unsigned")
+
+            if data.dtype.kind in ["i", "u"]:
+                if unsigned == "true" and data.dtype.kind == "i":
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=unsigned_dtype)
+                    data = lazy_elemwise_func(data, transform, unsigned_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = unsigned_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
+                elif unsigned == "false" and data.dtype.kind == "u":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
             else:
                 warnings.warn(
-                    "variable %r has _Unsigned attribute but is not "
-                    "of integer type. Ignoring attribute." % name,
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Ignoring attribute.",
                     SerializationWarning,
                     stacklevel=3,
                 )
 
         return Variable(dims, data, attrs, encoding)
+
+    def encode(self, variable, name=None):
+        dims, data, attrs, encoding = unpack_for_encoding(variable)
+
+        if "_Unsigned" in attrs:
+            unsigned = pop_to(attrs, encoding, "_Unsigned")
+
+            if data.dtype.kind in ["i", "u"]:
+                if unsigned == "true" and data.dtype.kind == "i":
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=unsigned_dtype)
+                    data = lazy_elemwise_func(data, transform, unsigned_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = unsigned_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
+                elif unsigned == "false" and data.dtype.kind == "u":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
+            else:
+                warnings.warn(
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Ignoring attribute.",
+                    SerializationWarning,
+                    stacklevel=3,
+                )
+
+        return Variable(dims, data, attrs, encoding)
+    def encode(self, variable, name=None):
+        dims, data, attrs, encoding = unpack_for_encoding(variable)
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
index e0df778..dab4ef8 100644
--- a/xarray/tests/test_coding.py
+++ b/xarray/tests/test_coding.py
@@ -116,4 +116,69 @@ def test_scaling_offset_as_list(scale_factor, add_offset):
     coder = variables.CFScaleOffsetCoder()
     encoded = coder.encode(original)
     roundtripped = coder.decode(encoded)
-    assert_allclose(original, roundtripped)
+def test_UnsignedIntegerCoder_decode():
+    # Test unsigned to signed conversion
+    original_unsigned = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"), {"_Unsigned": "false"})
+    expected_signed = xr.Variable(("x",), np.array([0, -128, -1], dtype="i1"))
+    coder = variables.UnsignedIntegerCoder()
+    decoded_signed = coder.decode(original_unsigned)
+    assert_identical(expected_signed, decoded_signed)
+
+    # Test signed to unsigned conversion
+    original_signed = xr.Variable(("x",), np.array([0, -128, -1], dtype="i1"), {"_Unsigned": "true"})
+    expected_unsigned = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"))
+    decoded_unsigned = coder.decode(original_signed)
+    assert_identical(expected_unsigned, decoded_unsigned)
+
+    # Test no conversion for unsigned without _Unsigned attribute
+    original_unsigned_no_attr = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"))
+    decoded_no_change = coder.decode(original_unsigned_no_attr)
+    assert_identical(original_unsigned_no_attr, decoded_no_change)
+
+    # Test warning for non-integer type
+    with pytest.warns(variables.SerializationWarning):
+        original_float = xr.Variable(("x",), np.array([0.0, 1.0, 2.0]), {"_Unsigned": "true"})
+        decoded_float = coder.decode(original_float)
+        assert_identical(original_float, decoded_float)
+def test_UnsignedIntegerCoder_encode():
+    # Test signed to unsigned conversion
+    original_signed = xr.Variable(("x",), np.array([0, -128, -1], dtype="i1"), {"_Unsigned": "true"})
+    expected_unsigned = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"), {"_Unsigned": "true"})
+    coder = variables.UnsignedIntegerCoder()
+    encoded_unsigned = coder.encode(original_signed)
+    assert_identical(expected_unsigned, encoded_unsigned)
+
+    # Test unsigned to signed conversion
+    original_unsigned = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"), {"_Unsigned": "false"})
+    expected_signed = xr.Variable(("x",), np.array([0, -128, -1], dtype="i1"), {"_Unsigned": "false"})
+    encoded_signed = coder.encode(original_unsigned)
+    assert_identical(expected_signed, encoded_signed)
+
+    # Test no conversion for unsigned without _Unsigned attribute
+    original_unsigned_no_attr = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"))
+    encoded_no_change = coder.encode(original_unsigned_no_attr)
+    assert_identical(original_unsigned_no_attr, encoded_no_change)
+
+    # Test no conversion for signed without _Unsigned attribute
+    original_signed_no_attr = xr.Variable(("x",), np.array([0, -128, -1], dtype="i1"))
+    encoded_signed_no_change = coder.encode(original_signed_no_attr)
+    assert_identical(original_signed_no_attr, encoded_signed_no_change)
+
+    # Test warning for non-integer type
+    with pytest.warns(variables.SerializationWarning):
+        original_float = xr.Variable(("x",), np.array([0.0, 1.0, 2.0]), {"_Unsigned": "true"})
+        encoded_float = coder.encode(original_float)
+        assert_identical(original_float, encoded_float)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    # Test roundtrip unsigned to signed and back
+    original = xr.Variable(("x",), np.array([0, 128, 255], dtype="u1"), {"_Unsigned": "false"})
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.encode(coder.decode(original))
+    assert_identical(original, roundtripped)
+
+    # Test roundtrip signed to unsigned and back
+    original = xr.Variable(("x",), np.array([0, -128, -1], dtype="i1"), {"_Unsigned": "true"})
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+
