diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b9eb3332..549b7e2e 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -52,10 +52,15 @@ class ReadOnlyPasswordHashWidget(forms.Widget):
 
 
 class ReadOnlyPasswordHashField(forms.Field):
+    """
+    A form field that displays a hashed password and is disabled by default.
+    This field prevents accidental changes to the password hash in forms.
+    """
     widget = ReadOnlyPasswordHashWidget
 
     def __init__(self, *args, **kwargs):
         kwargs.setdefault("required", False)
+        kwargs.setdefault("disabled", True)
         super().__init__(*args, **kwargs)
 
     def bound_data(self, data, initial):
@@ -143,12 +148,24 @@ class UserChangeForm(forms.ModelForm):
     password = ReadOnlyPasswordHashField(
         label=_("Password"),
         help_text=_(
-            'Raw passwords are not stored, so there is no way to see this '
-            'userâ€™s password, but you can change the password using '
-            '<a href="{}">this form</a>.'
+            "Raw passwords are not stored, so there is no way to see this "
+            "user's password, but you can change the password using "
+            "<a href=\"{}\">this form</a>."
         ),
     )
 
+    class Meta:
+        model = User
+        fields = '__all__'
+        field_classes = {'username': UsernameField}
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        password = self.fields.get('password')
+        if password:
+            password.help_text = password.help_text.format('../password/')
+
+
     class Meta:
         model = User
         fields = '__all__'
diff --git a/docs/topics/auth/customizing.txt b/docs/topics/auth/customizing.txt
index 6ab83054..675463cc 100644
--- a/docs/topics/auth/customizing.txt
+++ b/docs/topics/auth/customizing.txt
@@ -1131,7 +1131,14 @@ code would be required in the app's ``admin.py`` file::
         the user, but replaces the password field with admin's
         password hash display field.
         """
-        password = ReadOnlyPasswordHashField()
+    password = ReadOnlyPasswordHashField(
+        help_text=_(
+            "Raw passwords are not stored, so there is no way to see this "
+            "user's password, but you can change the password using "
+            "<a href=\"{}\">this form</a>."
+        ),
+    )
+    # Note: The ReadOnlyPasswordHashField is now disabled by default to prevent accidental changes.
 
         class Meta:
             model = MyUser
diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py
index 88b4b326..5186668a 100644
--- a/tests/auth_tests/test_forms.py
+++ b/tests/auth_tests/test_forms.py
@@ -1086,3 +1086,19 @@ class AdminPasswordChangeFormTest(TestDataMixin, TestCase):
         for field_name, autocomplete in tests:
             with self.subTest(field_name=field_name, autocomplete=autocomplete):
                 self.assertEqual(form.fields[field_name].widget.attrs['autocomplete'], autocomplete)
+
+
+class ReadOnlyPasswordHashFieldTest(SimpleTestCase):
+    def test_disabled_by_default(self):
+        field = ReadOnlyPasswordHashField()
+        self.assertTrue(field.disabled)
+
+    def test_can_be_enabled(self):
+        field = ReadOnlyPasswordHashField(disabled=False)
+        self.assertFalse(field.disabled)
+
+    def test_widget_rendering(self):
+        field = ReadOnlyPasswordHashField()
+        widget = field.widget
+        self.assertIsInstance(widget, ReadOnlyPasswordHashWidget)
+        self.assertTrue(widget.read_only)
