diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928..beaeb843 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -98,6 +98,7 @@ class Aggregate(Func):
 
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
+    allow_distinct = True
     name = 'Avg'
 
 
@@ -120,11 +121,13 @@ class Count(Aggregate):
 
 class Max(Aggregate):
     function = 'MAX'
+    allow_distinct = True
     name = 'Max'
 
 
 class Min(Aggregate):
     function = 'MIN'
+    allow_distinct = True
     name = 'Min'
 
 
@@ -141,6 +144,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):
 
 class Sum(FixDurationInputMixin, Aggregate):
     function = 'SUM'
+    allow_distinct = True
     name = 'Sum'
 
 
diff --git a/docs/topics/db/aggregation.txt b/docs/topics/db/aggregation.txt
index 505b3adf..a1def23e 100644
--- a/docs/topics/db/aggregation.txt
+++ b/docs/topics/db/aggregation.txt
@@ -97,6 +97,57 @@ In a hurry? Here's how to do common aggregate queries, assuming the models above
     >>> pubs[0].num_books
     1323
 
+Generating aggregates over a ``QuerySet``
+=====================================
+
+Django provides two ways to generate aggregates. The first way is to generate summary values over an entire ``QuerySet``. For example, say you wanted to calculate the average price of all books available for sale. Django's query syntax provides a means for describing the set of all books::
+
+    >>> Book.objects.all()
+
+What we need is a way to calculate summary values over the objects that belong to this ``QuerySet``. This is done by appending an ``aggregate()`` clause onto the ``QuerySet``::
+
+    >>> from django.db.models import Avg
+    >>> Book.objects.all().aggregate(Avg('price'))
+    {'price__avg': 34.35}
+
+The ``all()`` is redundant in this example, so this could be simplified to::
+
+    >>> Book.objects.aggregate(Avg('price'))
+    {'price__avg': 34.35}
+
+The argument to the ``aggregate()`` clause describes the aggregate value that we want to compute - in this case, the average of the ``price`` field on the ``Book`` model. A list of the aggregate functions that are available can be found in the :ref:`QuerySet reference <aggregation-functions>`.
+
+``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, returns a dictionary of name-value pairs. The name is an identifier for the aggregate value; the value is the computed aggregate. The name is automatically generated from the name of the field and the aggregate function. If you want to manually specify a name for the aggregate value, you can do so by providing that name when you specify the aggregate clause::
+
+    >>> Book.objects.aggregate(average_price=Avg('price'))
+    {'average_price': 34.35}
+
+If you want to generate more than one aggregate, you add another argument to the ``aggregate()`` clause. So, if we also wanted to know the maximum and minimum price of all books, we would issue the query::
+
+    >>> from django.db.models import Avg, Max, Min
+    >>> Book.objects.aggregate(Avg('price'), Max('price'), Min('price'))
+    {'price__avg': 34.35, 'price__max': Decimal('81.20'), 'price__min': Decimal('12.99')}
+
+Using DISTINCT with aggregates
+------------------------------
+
+As of Django 2.2, the ``Avg``, ``Sum``, ``Min``, and ``Max`` aggregates support the ``distinct`` argument. This allows you to force the aggregate to only consider distinct values of the field:
+
+    >>> from django.db.models import Avg, Sum, Min, Max
+    >>> Book.objects.aggregate(
+    ...     avg_price=Avg('price', distinct=True),
+    ...     sum_pages=Sum('pages', distinct=True),
+    ...     min_rating=Min('rating', distinct=True),
+    ...     max_rating=Max('rating', distinct=True)
+    ... )
+    {'avg_price': 34.35, 'sum_pages': 3245, 'min_rating': 3.5, 'max_rating': 4.9}
+
+Using ``distinct=True`` can be particularly useful when you want to avoid counting duplicate values, such as when working with Many-to-Many relationships or when you have duplicate entries that you want to ignore for the calculation.
+
+Generating aggregates for each item in a QuerySet
+=================================================
+
+The second way to generate summary values is to generate an independent summary
 Generating aggregates over a ``QuerySet``
 =========================================
 
diff --git a/tests/postgres_tests/test_aggregates.py b/tests/postgres_tests/test_aggregates.py
index 9bd5b70a..1fb209e3 100644
--- a/tests/postgres_tests/test_aggregates.py
+++ b/tests/postgres_tests/test_aggregates.py
@@ -1,6 +1,6 @@
 import json
 
-from django.db.models import CharField
+from django.db.models import CharField, Avg, Sum, Min, Max
 from django.db.models.expressions import F, OuterRef, Subquery, Value
 from django.db.models.functions import Cast, Concat, Substr
 from django.test.utils import Approximate
@@ -411,5 +411,42 @@ class TestStatisticsAggregate(PostgreSQLTestCase):
         This is more complex test to check if JOIN on field and
         number as argument works as expected.
         """
+    def test_distinct_aggregates(self):
+        AggregateTestModel.objects.create(integer_field=1, float_field=1.5)
+        AggregateTestModel.objects.create(integer_field=1, float_field=2.5)
+        AggregateTestModel.objects.create(integer_field=2, float_field=1.5)
+        AggregateTestModel.objects.create(integer_field=2, float_field=2.5)
+
+        tests = [
+            (Avg, 1.5),
+            (Sum, 3),
+            (Min, 1),
+            (Max, 2),
+        ]
+
+        for aggregate, expected_result in tests:
+            with self.subTest(aggregate=aggregate.__name__):
+                result = AggregateTestModel.objects.aggregate(
+                    result=aggregate('integer_field', distinct=True)
+                )
+                self.assertEqual(result['result'], expected_result)
+
+        # Test with float field
+        result = AggregateTestModel.objects.aggregate(
+            result=Avg('float_field', distinct=True)
+        )
+        self.assertEqual(result['result'], 2.0)
+
+    def test_distinct_aggregates_empty_result(self):
+        AggregateTestModel.objects.all().delete()
+
+        tests = [Avg, Sum, Min, Max]
+
+        for aggregate in tests:
+            with self.subTest(aggregate=aggregate.__name__):
+                result = AggregateTestModel.objects.aggregate(
+                    result=aggregate('integer_field', distinct=True)
+                )
+                self.assertIsNone(result['result'])
         values = StatTestModel.objects.aggregate(complex_regravgx=RegrAvgX(y=5, x='related_field__integer_field'))
         self.assertEqual(values, {'complex_regravgx': 1.0})
