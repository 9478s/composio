diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 64be087b..0e2f9ef8 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -269,7 +269,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                         "class": get_ul_class(self.radio_fields[db_field.name]),
                     }
                 )
-                kwargs["empty_label"] = _("None") if db_field.blank else None
+                # Respect custom empty_label if provided, otherwise use default behavior
+                kwargs["empty_label"] = kwargs.get("empty_label") or (_("None") if db_field.blank else None)
 
         if "queryset" not in kwargs:
             queryset = self.get_field_queryset(db, db_field, request)
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 0e4a6b10..34452bba 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -8313,3 +8313,22 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):
         response = self.client.get(unknown_url)
         # Does not redirect to the admin login.
         self.assertEqual(response.status_code, 404)
+
+class CustomAdminTests(TestCase):
+    def setUp(self):
+        self.site = AdminSite()
+
+    def test_custom_empty_label_respected(self):
+        class BookAdmin(ModelAdmin):
+            def formfield_for_foreignkey(self, db_field, request, **kwargs):
+                if db_field.name == "author":
+                    kwargs["empty_label"] = "Custom Empty Label"
+                return super().formfield_for_foreignkey(db_field, request, **kwargs)
+
+        ma = BookAdmin(Book, self.site)
+        form = ma.get_form(None)()
+        self.assertEqual(form.fields['author'].empty_label, "Custom Empty Label")
+
+        # Test that the default behavior is still intact
+        form = ma.get_form(None)()
+        self.assertEqual(form.fields['publisher'].empty_label, "---------")
