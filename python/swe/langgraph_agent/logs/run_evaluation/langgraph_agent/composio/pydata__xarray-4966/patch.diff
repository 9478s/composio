diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..22d5f4e 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -304,22 +304,37 @@ class UnsignedIntegerCoder(VariableCoder):
 
     def decode(self, variable, name=None):
         dims, data, attrs, encoding = unpack_for_decoding(variable)
-
+    # The UnsignedIntegerCoder handles the _Unsigned attribute for integer data types.
+    # It supports two cases:
+    # 1. Signed integers with _Unsigned="true" are converted to unsigned integers.
+    # 2. Unsigned integers with _Unsigned="false" are converted to signed integers.
+    # This implementation addresses the handling of signed bytes from OPeNDAP via pydap,
+    # where OPeNDAP uses _Unsigned="false" to represent signed bytes.
+    # For more information, see:
+    # https://github.com/Unidata/netcdf-c/pull/1317
         if "_Unsigned" in attrs:
             unsigned = pop_to(attrs, encoding, "_Unsigned")
 
             if data.dtype.kind == "i":
-                if unsigned == "true":
-                    unsigned_dtype = np.dtype("u%s" % data.dtype.itemsize)
+                if unsigned.lower() == "true":
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
                     transform = partial(np.asarray, dtype=unsigned_dtype)
                     data = lazy_elemwise_func(data, transform, unsigned_dtype)
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+            elif data.dtype.kind == "u":
+                if unsigned.lower() == "false":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
             else:
                 warnings.warn(
-                    "variable %r has _Unsigned attribute but is not "
-                    "of integer type. Ignoring attribute." % name,
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    f"of integer type. Ignoring attribute.",
                     SerializationWarning,
                     stacklevel=3,
                 )
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
index e0df778..763544f 100644
--- a/xarray/tests/test_coding.py
+++ b/xarray/tests/test_coding.py
@@ -93,6 +93,39 @@ def test_coder_roundtrip():
     roundtripped = coder.decode(coder.encode(original))
     assert_identical(original, roundtripped)
 
+def test_UnsignedIntegerCoder_decode():
+    original_signed = xr.Variable(("x",), np.array([0, -1, 1], dtype="i1"), {"_Unsigned": "false"})
+    expected_signed = xr.Variable(("x",), np.array([0, -1, 1], dtype="i1"))
+    
+    original_unsigned = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"), {"_Unsigned": "true"})
+    expected_unsigned = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"))
+    
+    coder = variables.UnsignedIntegerCoder()
+    
+    decoded_signed = coder.decode(original_signed)
+    assert_identical(expected_signed, decoded_signed)
+    assert decoded_signed.dtype == np.dtype("i1")
+    
+    decoded_unsigned = coder.decode(original_unsigned)
+    assert_identical(expected_unsigned, decoded_unsigned)
+    assert decoded_unsigned.dtype == np.dtype("u1")
+
+def test_UnsignedIntegerCoder_encode():
+    original_signed = xr.Variable(("x",), np.array([0, -1, 1], dtype="i1"), {"_Unsigned": "false"})
+    expected_signed = xr.Variable(("x",), np.array([0, -1, 1], dtype="i1"), {"_Unsigned": "false"})
+    
+    original_unsigned = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"))
+    expected_unsigned = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"), {"_Unsigned": "true"})
+    
+    coder = variables.UnsignedIntegerCoder()
+    
+    encoded_signed = coder.encode(original_signed)
+    assert_identical(expected_signed, encoded_signed)
+    
+    encoded_unsigned = coder.encode(original_unsigned)
+    assert_identical(expected_unsigned, encoded_unsigned)
+
+
 
 @pytest.mark.parametrize("dtype", "u1 u2 i1 i2 f2 f4".split())
 def test_scaling_converts_to_float32(dtype):
