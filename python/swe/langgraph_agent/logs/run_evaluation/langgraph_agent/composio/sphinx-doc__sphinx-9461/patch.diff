diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 1cecb1f..c8cc34b 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -2066,23 +2066,28 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
     member_order = 50
     priority = 1  # must be more than FunctionDocumenter
 
+    @classmethod
     @classmethod
     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
                             ) -> bool:
-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)
+        return (inspect.isroutine(member) or
+                isinstance(member, (classmethod, property)) or
+                (inspect.isdatadescriptor(member) and not isinstance(parent, ModuleDocumenter)))
 
     def import_object(self, raiseerror: bool = False) -> bool:
         ret = super().import_object(raiseerror)
         if not ret:
             return ret
 
+        # Handle classmethods and properties
+        if isinstance(self.object, (classmethod, property)):
+            self.object = self.object.__func__
+            # Update other attributes as needed
+
         # to distinguish classmethod/staticmethod
         obj = self.parent.__dict__.get(self.object_name)
         if obj is None:
             obj = self.object
-
-        if (inspect.isclassmethod(obj) or
-                inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name)):
             # document class and static members before ordinary ones
             self.member_order = self.member_order - 1
 
