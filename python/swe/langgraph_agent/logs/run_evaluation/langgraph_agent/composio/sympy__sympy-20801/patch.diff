diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 79f6a7d..457399f 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -2579,25 +2579,34 @@ def __new__(cls):
 
 
 class Zero(IntegerConstant, metaclass=Singleton):
-    """The number zero.
-
-    Zero is a singleton, and can be accessed by ``S.Zero``
+    p = 0
+    q = 1
+    is_positive = False
+    is_negative = False
+    is_zero = True
+    is_number = True
+    is_comparable = True
+    __slots__ = ()
 
-    Examples
-    ========
+    @staticmethod
+    def __abs__():
+        return S.Zero
 
-    >>> from sympy import S, Integer
-    >>> Integer(0) is S.Zero
-    True
-    >>> 1/S.Zero
-    zoo
+    @staticmethod
+    def __neg__():
+        return S.Zero
 
-    References
-    ==========
+    def __bool__(self):
+        return False
 
-    .. [1] https://en.wikipedia.org/wiki/Zero
-    """
+    def __eq__(self, other):
+        from sympy.logic.boolalg import Boolean
+        if isinstance(other, Boolean):
+            return False
+        return super().__eq__(other)
 
+    def __getnewargs__(self):
+        return ()
     p = 0
     q = 1
     is_positive = False
diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py
index 8b3e991..4e6bfbb 100644
--- a/sympy/core/tests/test_numbers.py
+++ b/sympy/core/tests/test_numbers.py
@@ -2026,3 +2026,8 @@ def test_abc():
 
 def test_floordiv():
     assert S(2)//S.Half == 4
+def test_zero_boolean_comparison():
+    assert S(0.0) != S.false
+    assert S.false != S(0.0)
+    assert S(0) != S.false
+    assert S.false != S(0)
diff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py
index fbcba1f..5594ef8 100644
--- a/sympy/logic/boolalg.py
+++ b/sympy/logic/boolalg.py
@@ -68,6 +68,11 @@ class Boolean(Basic):
 
     kind = BooleanKind
 
+    def __eq__(self, other):
+        from sympy.core.numbers import Zero
+        if isinstance(other, (int, float, Zero)):
+            return False
+        return super().__eq__(other)
     @sympify_return([('other', 'Boolean')], NotImplemented)
     def __and__(self, other):
         return And(self, other)
