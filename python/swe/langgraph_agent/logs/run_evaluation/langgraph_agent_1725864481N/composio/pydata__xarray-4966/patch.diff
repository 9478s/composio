diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..ba12b9d 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -180,6 +180,15 @@ class CFMaskCoder(VariableCoder):
     def decode(self, variable, name=None):
         dims, data, attrs, encoding = unpack_for_decoding(variable)
 
+        # Check for _Unsigned attribute
+        unsigned = attrs.get('_Unsigned', None)
+        if unsigned is not None:
+            unsigned = unsigned.lower() == 'true'
+            if not unsigned and data.dtype.kind == 'u':
+                # Convert unsigned to signed
+                data = data.astype(f'i{data.dtype.itemsize}')
+                attrs.pop('_Unsigned', None)  # Remove the _Unsigned attribute
+
         raw_fill_values = [
             pop_to(attrs, encoding, attr, name=name)
             for attr in ("missing_value", "_FillValue")
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
index e0df778..82a6987 100644
--- a/xarray/tests/test_coding.py
+++ b/xarray/tests/test_coding.py
@@ -81,6 +81,29 @@ def test_CFMaskCoder_decode_dask():
     encoded = coder.decode(original)
     assert isinstance(encoded.data, da.Array)
     assert_identical(expected, encoded)
+def test_CFMaskCoder_decode_unsigned():
+    # Test with _Unsigned=False
+    original = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"), {"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -1, 1], dtype="i1"))
+    coder = variables.CFMaskCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+    assert "_Unsigned" not in decoded.attrs
+
+    # Test with _Unsigned=True (should not change the data)
+    original = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"), {"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+    assert decoded.attrs["_Unsigned"] == "true"
+
+    # Test without _Unsigned attribute (should not change the data)
+    original = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"))
+    expected = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+# TODO(shoyer): port other fill-value tests
 
 
 # TODO(shoyer): port other fill-value tests
