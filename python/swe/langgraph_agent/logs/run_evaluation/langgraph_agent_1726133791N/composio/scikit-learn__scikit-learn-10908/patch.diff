diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index 9b1ebd6..fa6c6c8 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -272,32 +272,41 @@ class VectorizerMixin(object):
 
     def _validate_vocabulary(self):
         vocabulary = self.vocabulary
-        if vocabulary is not None:
-            if isinstance(vocabulary, set):
-                vocabulary = sorted(vocabulary)
-            if not isinstance(vocabulary, Mapping):
-                vocab = {}
-                for i, t in enumerate(vocabulary):
-                    if vocab.setdefault(t, i) != i:
-                        msg = "Duplicate term in vocabulary: %r" % t
-                        raise ValueError(msg)
-                vocabulary = vocab
-            else:
-                indices = set(six.itervalues(vocabulary))
-                if len(indices) != len(vocabulary):
-                    raise ValueError("Vocabulary contains repeated indices.")
-                for i in xrange(len(vocabulary)):
-                    if i not in indices:
-                        msg = ("Vocabulary of size %d doesn't contain index "
-                               "%d." % (len(vocabulary), i))
-                        raise ValueError(msg)
-            if not vocabulary:
-                raise ValueError("empty vocabulary passed to fit")
-            self.fixed_vocabulary_ = True
-            self.vocabulary_ = dict(vocabulary)
-        else:
+        if vocabulary is None:
             self.fixed_vocabulary_ = False
-
+            return None
+        if isinstance(vocabulary, set):
+            vocabulary = sorted(vocabulary)
+        if isinstance(vocabulary, Mapping):
+            vocab = {}
+            for k, i in vocabulary.items():
+                if not isinstance(i, numbers.Integral):
+                    raise ValueError("Vocabulary values should be integers.")
+                vocab[k] = int(i)
+            vocabulary = vocab
+        elif isinstance(vocabulary, (list, tuple)):
+            vocab = {}
+            for i, t in enumerate(vocabulary):
+                if vocab.setdefault(t, i) != i:
+                    msg = "Duplicate term in vocabulary: %r" % t
+                    raise ValueError(msg)
+            vocabulary = vocab
+        else:
+            raise ValueError("Vocabulary should be either a dictionary or an iterable")
+        
+        indices = set(six.itervalues(vocabulary))
+        if len(indices) != len(vocabulary):
+            raise ValueError("Vocabulary contains repeated indices.")
+        for i in xrange(len(vocabulary)):
+            if i not in indices:
+                msg = ("Vocabulary of size %d doesn't contain index "
+                       "%d." % (len(vocabulary), i))
+                raise ValueError(msg)
+        if not vocabulary:
+            raise ValueError("empty vocabulary passed to fit")
+        self.fixed_vocabulary_ = True
+        self.vocabulary_ = dict(vocabulary)
+        return vocabulary
     def _check_vocabulary(self):
         """Check if vocabulary is empty or missing (not fit-ed)"""
         msg = "%(name)s - Vocabulary wasn't fitted."
@@ -469,8 +478,8 @@ class HashingVectorizer(BaseEstimator, VectorizerMixin, TransformerMixin):
                  lowercase=True, preprocessor=None, tokenizer=None,
                  stop_words=None, token_pattern=r"(?u)\b\w\w+\b",
                  ngram_range=(1, 1), analyzer='word', n_features=(2 ** 20),
-                 binary=False, norm='l2', alternate_sign=True,
-                 non_negative=False, dtype=np.float64):
+                 binary=False, dtype=np.int64, max_df=1.0, min_df=1,
+                 max_features=None, vocabulary=None):
         self.input = input
         self.encoding = encoding
         self.decode_error = decode_error
@@ -484,10 +493,16 @@ class HashingVectorizer(BaseEstimator, VectorizerMixin, TransformerMixin):
         self.n_features = n_features
         self.ngram_range = ngram_range
         self.binary = binary
-        self.norm = norm
-        self.alternate_sign = alternate_sign
-        self.non_negative = non_negative
         self.dtype = dtype
+        self.max_df = max_df
+        self.min_df = min_df
+        self.max_features = max_features
+        self.vocabulary = vocabulary
+        self.fixed_vocabulary_ = False
+        self.vocabulary_ = None
+        if self.vocabulary is not None:
+            self.fixed_vocabulary_ = True
+            self.vocabulary_ = self._validate_vocabulary()
 
     def partial_fit(self, X, y=None):
         """Does nothing: this transformer is stateless.
@@ -993,10 +1008,14 @@ class CountVectorizer(BaseEstimator, VectorizerMixin):
 
     def get_feature_names(self):
         """Array mapping from feature integer indices to feature name"""
-        self._check_vocabulary()
-
-        return [t for t, i in sorted(six.iteritems(self.vocabulary_),
-                                     key=itemgetter(1))]
+        if self.vocabulary_ is not None:
+            return [t for t, i in sorted(six.iteritems(self.vocabulary_),
+                                         key=itemgetter(1))]
+        elif self.vocabulary is not None:
+            return [t for t, i in sorted(six.iteritems(self.vocabulary),
+                                         key=itemgetter(1))]
+        else:
+            raise ValueError("Vocabulary wasn't fitted or provided.")
 
 
 def _make_int_array():
