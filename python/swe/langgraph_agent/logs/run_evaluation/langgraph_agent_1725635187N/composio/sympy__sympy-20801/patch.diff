diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 79f6a7d..0009f14 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -3966,4 +3966,41 @@ def _register_classes():
     numbers.Rational.register(Rational)
     numbers.Rational.register(Integer)
 
+class Float(Number):
+    __slots__ = ('_mpf_', 'precision')
+
+    def __new__(cls, num, precision=None):
+        if isinstance(num, str):
+            num = num.replace(' ', '')
+            if num.startswith('.') and len(num) > 1:
+                num = '0' + num
+            elif num.startswith('-.') and len(num) > 2:
+                num = '-0.' + num[2:]
+        try:
+            mpf = mpmath.mpf(num)
+        except ValueError:
+            raise ValueError("Invalid literal for Float(): %s" % num)
+        
+        obj = Number.__new__(cls)
+        obj._mpf_ = mpf._mpf_
+        obj.precision = precision
+        return obj
+
+    def __eq__(self, other):
+        if isinstance(other, (float, int)):
+            return float(self) == other
+        if isinstance(other, Number):
+            return float(self) == float(other)
+        return NotImplemented
+
+    def __float__(self):
+        return mpmath.mpf(self._mpf_)._mpf_[1]
+
+    def __str__(self):
+        return str(float(self))
+
+    def __repr__(self):
+        return "Float('%s', precision=%s)" % (str(self), self.precision)
+
+S.Float = Float
 _register_classes()
diff --git a/sympy/logic/boolalg.py b/sympy/logic/boolalg.py
index fbcba1f..06dd3c3 100644
--- a/sympy/logic/boolalg.py
+++ b/sympy/logic/boolalg.py
@@ -3088,4 +3088,26 @@ def simplify_patterns_xor():
                      (Xor(Lt(a, b), Lt(a, c)),
                       And(Lt(a, Max(b, c)), Ge(a, Min(b, c)))),
                      )
+class BooleanFalse(Boolean, metaclass=Singleton):
+    """Singleton representing the boolean False value."""
+
+    def __eq__(self, other):
+        if isinstance(other, (float, int)):
+            return False
+        return super().__eq__(other)
+
+    def __bool__(self):
+        return False
+
+    def __hash__(self):
+        return hash(False)
+
+    def __str__(self):
+        return "False"
+
+    __repr__ = __str__
+
+S.false = BooleanFalse()
+
+def _matchers_xor():
     return _matchers_xor
