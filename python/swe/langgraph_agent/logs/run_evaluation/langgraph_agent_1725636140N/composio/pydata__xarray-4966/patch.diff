diff --git a/xarray/coding/variables.py b/xarray/coding/variables.py
index b035ff8..d0b4b47 100644
--- a/xarray/coding/variables.py
+++ b/xarray/coding/variables.py
@@ -294,15 +294,61 @@ class UnsignedIntegerCoder(VariableCoder):
         #      integer data should be treated as unsigned"
         if encoding.get("_Unsigned", "false") == "true":
             pop_to(encoding, attrs, "_Unsigned")
-            signed_dtype = np.dtype("i%s" % data.dtype.itemsize)
+class UnsignedIntegerCoder(VariableCoder):
+    """
+    Handles encoding and decoding of unsigned integers according to CF conventions.
+
+    This coder supports two scenarios:
+    1. Converting signed integers to unsigned integers when _Unsigned="true".
+    2. Converting unsigned integers to signed integers when _Unsigned="false".
+
+    The second scenario is particularly useful for handling the OPeNDAP hack
+    used to represent signed bytes, as OPeNDAP only supports unsigned bytes.
+
+    Methods:
+    --------
+    encode(variable, name=None):
+        Encodes the variable based on the _Unsigned attribute.
+
+    decode(variable, name=None):
+        Decodes the variable based on the _Unsigned attribute.
+    """
+
+    def encode(self, variable, name=None):
+        dims, data, attrs, encoding = unpack_for_encoding(variable)
+        if data.dtype.kind == "u":
+            signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
             if "_FillValue" in attrs:
                 new_fill = signed_dtype.type(attrs["_FillValue"])
                 attrs["_FillValue"] = new_fill
             data = duck_array_ops.around(data).astype(signed_dtype)
+            attrs["_Unsigned"] = "true"
 
         return Variable(dims, data, attrs, encoding)
 
     def decode(self, variable, name=None):
+        """
+        Decode unsigned integers according to the CF conventions.
+
+        This method handles two cases:
+        1. Signed integers with _Unsigned="true" are converted to unsigned integers.
+        2. Unsigned integers with _Unsigned="false" are converted to signed integers.
+
+        The second case is a hack used by OPeNDAP to represent signed bytes,
+        as OPeNDAP only supports unsigned bytes.
+
+        Parameters
+        ----------
+        variable : Variable
+            The variable to be decoded
+        name : str, optional
+            Name of the variable for error reporting purposes
+
+        Returns
+        -------
+        Variable
+            The decoded variable
+        """
         dims, data, attrs, encoding = unpack_for_decoding(variable)
 
         if "_Unsigned" in attrs:
@@ -310,16 +356,24 @@ class UnsignedIntegerCoder(VariableCoder):
 
             if data.dtype.kind == "i":
                 if unsigned == "true":
-                    unsigned_dtype = np.dtype("u%s" % data.dtype.itemsize)
+                    unsigned_dtype = np.dtype(f"u{data.dtype.itemsize}")
                     transform = partial(np.asarray, dtype=unsigned_dtype)
                     data = lazy_elemwise_func(data, transform, unsigned_dtype)
                     if "_FillValue" in attrs:
                         new_fill = unsigned_dtype.type(attrs["_FillValue"])
                         attrs["_FillValue"] = new_fill
+            elif data.dtype.kind == "u":
+                if unsigned == "false":
+                    signed_dtype = np.dtype(f"i{data.dtype.itemsize}")
+                    transform = partial(np.asarray, dtype=signed_dtype)
+                    data = lazy_elemwise_func(data, transform, signed_dtype)
+                    if "_FillValue" in attrs:
+                        new_fill = signed_dtype.type(attrs["_FillValue"])
+                        attrs["_FillValue"] = new_fill
             else:
                 warnings.warn(
-                    "variable %r has _Unsigned attribute but is not "
-                    "of integer type. Ignoring attribute." % name,
+                    f"variable {name!r} has _Unsigned attribute but is not "
+                    "of integer type. Ignoring attribute.",
                     SerializationWarning,
                     stacklevel=3,
                 )
diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py
index e0df778..b985331 100644
--- a/xarray/tests/test_coding.py
+++ b/xarray/tests/test_coding.py
@@ -116,4 +116,27 @@ def test_scaling_offset_as_list(scale_factor, add_offset):
     coder = variables.CFScaleOffsetCoder()
     encoded = coder.encode(original)
     roundtripped = coder.decode(encoded)
+
+def test_UnsignedIntegerCoder_decode():
+    original = xr.Variable(("x",), np.array([0, 255, 128], dtype="u1"), {"_Unsigned": "false"})
+    expected = xr.Variable(("x",), np.array([0, -1, -128], dtype="i1"))
+    coder = variables.UnsignedIntegerCoder()
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+    # Test with _Unsigned="true" (existing behavior)
+    original = xr.Variable(("x",), np.array([0, -1, 1], dtype="i1"), {"_Unsigned": "true"})
+    expected = xr.Variable(("x",), np.array([0, 255, 1], dtype="u1"))
+    decoded = coder.decode(original)
+    assert_identical(expected, decoded)
+
+def test_UnsignedIntegerCoder_roundtrip():
+    original = xr.Variable(("x",), np.array([0, 255, 128], dtype="u1"), {"_Unsigned": "false"})
+    coder = variables.UnsignedIntegerCoder()
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
+
+    original = xr.Variable(("x",), np.array([0, -1, 1], dtype="i1"), {"_Unsigned": "true"})
+    roundtripped = coder.decode(coder.encode(original))
+    assert_identical(original, roundtripped)
     assert_allclose(original, roundtripped)
