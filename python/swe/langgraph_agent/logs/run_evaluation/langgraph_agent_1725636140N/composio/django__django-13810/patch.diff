diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da0..a3d42056 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -49,6 +49,11 @@ class BaseHandler:
                 middleware_is_async = False
             else:
                 middleware_is_async = middleware_can_async
+            # Store the current state of handler and handler_is_async
+            # This allows us to restore the previous state if MiddlewareNotUsed is raised,
+            # preventing incompatible handlers from remaining in the chain
+            previous_handler = handler
+            previous_handler_is_async = handler_is_async
             try:
                 # Adapt handler, if needed.
                 handler = self.adapt_method_mode(
@@ -62,6 +67,9 @@ class BaseHandler:
                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
                     else:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
+                # Restore previous handler state
+                handler = previous_handler
+                handler_is_async = previous_handler_is_async
                 continue
 
             if mw_instance is None:
diff --git a/docs/releases/3.2.txt b/docs/releases/3.2.txt
index 8cd77ffa..47d7a1a5 100644
--- a/docs/releases/3.2.txt
+++ b/docs/releases/3.2.txt
@@ -723,4 +723,11 @@ Miscellaneous
 * The ``django.core.cache.backends.memcached.MemcachedCache`` backend is
   deprecated as ``python-memcached`` has some problems and seems to be
   unmaintained. Use ``django.core.cache.backends.memcached.PyMemcacheCache``
-  or ``django.core.cache.backends.memcached.PyLibMCCache`` instead.
+
+Middleware
+----------
+
+* Fixed a bug in middleware handling where raising ``MiddlewareNotUsed`` could
+  leave incompatible handlers in the middleware chain, particularly in
+  asynchronous contexts. Django now ensures proper removal of unused middleware
+  while preserving the integrity of the request/response cycle.
diff --git a/docs/topics/http/middleware.txt b/docs/topics/http/middleware.txt
index 1626d169..8d3b2351 100644
--- a/docs/topics/http/middleware.txt
+++ b/docs/topics/http/middleware.txt
@@ -99,6 +99,12 @@ method may raise :exc:`~django.core.exceptions.MiddlewareNotUsed`. Django will
 then remove that middleware from the middleware process and log a debug message
 to the :ref:`django-request-logger` logger when :setting:`DEBUG` is ``True``.
 
+When a middleware raises :exc:`~django.core.exceptions.MiddlewareNotUsed`, Django
+ensures that the middleware is properly removed from the middleware chain, both
+in synchronous and asynchronous contexts. This means that any changes made to the
+request or response by middleware that comes before the removed middleware in the
+chain are preserved, maintaining the integrity of the request/response cycle.
+
 Activating middleware
 =====================
 
