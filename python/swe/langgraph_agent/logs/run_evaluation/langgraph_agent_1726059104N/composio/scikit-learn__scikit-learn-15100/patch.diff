diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py
index 7b7697f..1be3f9f 100644
--- a/sklearn/feature_extraction/tests/test_text.py
+++ b/sklearn/feature_extraction/tests/test_text.py
@@ -97,6 +97,18 @@ def test_strip_accents():
     expected = 'this is a test'
     assert strip_accents_unicode(a) == expected
 
+def test_strip_accents_unicode_nfkd():
+    # Test that strip_accents_unicode works correctly on strings already in NFKD form
+    s1 = chr(241)  # ñ
+    s2 = chr(110) + chr(771)  # n + ̃
+
+    assert strip_accents_unicode(s1) == 'n'
+    assert strip_accents_unicode(s2) == 'n'
+
+    # Test with a mix of regular and pre-normalized characters
+    mixed = 'piñata' + chr(110) + chr(771) + 'colada'
+    assert strip_accents_unicode(mixed) == 'pinatacolada'
+
 
 def test_to_ascii():
     # check some classical latin accentuated symbols
diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py
index bb5a9d6..7299a47 100644
--- a/sklearn/feature_extraction/text.py
+++ b/sklearn/feature_extraction/text.py
@@ -114,15 +114,19 @@ def _analyze(doc, analyzer=None, tokenizer=None, ngrams=None,
 def strip_accents_unicode(s):
     """Transform accentuated unicode symbols into their simple counterpart
 
-    Warning: the python-level loop and join operations make this
-    implementation 20 times slower than the strip_accents_ascii basic
-    normalization.
+    This function always applies the transformation, even if the input string
+    is already in NFKD form.
 
     Parameters
     ----------
     s : string
         The string to strip
 
+    Returns
+    -------
+    transformed : string
+        The transformed string without accents
+
     See also
     --------
     strip_accents_ascii
@@ -130,10 +134,7 @@ def strip_accents_unicode(s):
         ASCII equivalent.
     """
     normalized = unicodedata.normalize('NFKD', s)
-    if normalized == s:
-        return s
-    else:
-        return ''.join([c for c in normalized if not unicodedata.combining(c)])
+    return ''.join([c for c in normalized if not unicodedata.combining(c)])
 
 
 def strip_accents_ascii(s):
