diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 0caa165e..d240bda4 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -217,6 +217,7 @@ class RegisterLookupMixin:
         if lookup_name is None:
             lookup_name = lookup.lookup_name
         del cls.class_lookups[lookup_name]
+        cls._clear_cached_lookups()  # Add this line to clear the lookup cache
 
 
 def select_related_descend(field, restricted, requested, load_fields, reverse=False):
diff --git a/tests/lookup/test_unregister_lookup.py b/tests/lookup/test_unregister_lookup.py
new file mode 100644
index 00000000..209fe9b9
--- /dev/null
+++ b/tests/lookup/test_unregister_lookup.py
@@ -0,0 +1,29 @@
+from django.db import models
+from django.test import SimpleTestCase
+
+class UnregisterLookupTests(SimpleTestCase):
+    def test_unregister_lookup_clears_cache(self):
+        class CustomLookup(models.Lookup):
+            lookup_name = 'custom_lookup'
+
+        class TestModel(models.Model):
+            name = models.CharField(max_length=100)
+
+        # Register the lookup
+        models.CharField.register_lookup(CustomLookup)
+
+        # Ensure the lookup is registered
+        self.assertIn('custom_lookup', models.CharField.class_lookups)
+
+        # Unregister the lookup
+        models.CharField._unregister_lookup(CustomLookup)
+
+        # Check that the lookup is unregistered
+        self.assertNotIn('custom_lookup', models.CharField.class_lookups)
+
+        # Check that the cache is cleared by registering the lookup again
+        models.CharField.register_lookup(CustomLookup)
+        self.assertIn('custom_lookup', models.CharField.class_lookups)
+
+        # Clean up
+        models.CharField._unregister_lookup(CustomLookup)
\ No newline at end of file
