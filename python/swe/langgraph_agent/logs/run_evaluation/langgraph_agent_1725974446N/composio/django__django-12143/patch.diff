diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 137e6faa..149f8077 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1630,8 +1630,12 @@ class ModelAdmin(BaseModelAdmin):
         return self.changeform_view(request, object_id, form_url, extra_context)
 
     def _get_edited_object_pks(self, request, prefix):
-        """Return POST data values of list_editable primary keys."""
-        pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, self.model._meta.pk.name))
+        """
+        Return POST data values of list_editable primary keys.
+        Safely handles prefixes containing regex special characters.
+        """
+        # Escape special regex characters in prefix and pk name to avoid potential data loss
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), re.escape(self.model._meta.pk.name)))
         return [value for key, value in request.POST.items() if pk_pattern.match(key)]
 
     def _get_list_editable_queryset(self, request, prefix):
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index c9ca6409..0b76c4a4 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -6344,4 +6344,63 @@ class GetFormsetsWithInlinesArgumentTest(TestCase):
 
         post_data = {'name': '2'}
         response = self.client.post(reverse('admin:admin_views_implicitlygeneratedpk_change', args=(1,)), post_data)
+class SpecialCharPrefixTest(TestCase):
+    def setUp(self):
+        self.client.force_login(User.objects.get_or_create(username='super', is_superuser=True)[0])
+
+    def test_get_edited_object_pks_with_special_chars(self):
+        class SpecialCharModelAdmin(admin.ModelAdmin):
+            list_editable = ['name']
+
+        model_admin = SpecialCharModelAdmin(Article, admin.site)
+        request = self.client.post('/', data={
+            'form-0-id': '1',
+            'form-0-name': 'test',
+            'form-1-id': '2',
+            'form-1-name': 'test2',
+        })
+        request.POST['_save'] = 'Save'
+        
+        # Test with a prefix containing regex special characters
+        prefix = r'form[.*+?^${}()|[\]\\]'
+        pks = model_admin._get_edited_object_pks(request, prefix)
+        self.assertEqual(pks, ['1', '2'])
+class SpecialCharPrefixTest(TestCase):
+    def setUp(self):
+        self.client.force_login(User.objects.get_or_create(username='super', is_superuser=True)[0])
+
+    def test_get_edited_object_pks_with_special_chars(self):
+        class SpecialCharModelAdmin(admin.ModelAdmin):
+            list_editable = ['name']
+
+        model_admin = SpecialCharModelAdmin(Article, admin.site)
+        request = self.client.post('/', data={
+            'form-0-id': '1',
+            'form-0-name': 'test',
+            'form-1-id': '2',
+            'form-1-name': 'test2',
+        })
+        request.POST['_save'] = 'Save'
+        
+        # Test with a prefix containing regex special characters
+        prefix = r'form[.*+?^${}()|[\]\\]'
+        pks = model_admin._get_edited_object_pks(request, prefix)
+        self.assertEqual(pks, ['1', '2'])
+    def test_get_edited_object_pks_with_special_chars(self):
+        class SpecialCharModelAdmin(admin.ModelAdmin):
+            list_editable = ['name']
+
+        model_admin = SpecialCharModelAdmin(Article, admin.site)
+        request = self.client.post('/', data={
+            'form-0-id': '1',
+            'form-0-name': 'test',
+            'form-1-id': '2',
+            'form-1-name': 'test2',
+        })
+        request.POST['_save'] = 'Save'
+        
+        # Test with a prefix containing regex special characters
+        prefix = 'form[.*+?^${}()|[\]\\]'
+        pks = model_admin._get_edited_object_pks(request, prefix)
+        self.assertEqual(pks, ['1', '2'])
         self.assertEqual(response.status_code, 302)
