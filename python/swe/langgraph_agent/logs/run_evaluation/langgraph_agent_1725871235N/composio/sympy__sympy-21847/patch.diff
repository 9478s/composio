diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403..e1dc4ff 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -25,6 +25,10 @@ def itermonomials(variables, max_degrees, min_degrees=None):
     ``min_degrees[i] <= degree_list(monom)[i] <= max_degrees[i]``,
     for all ``i``.
 
+    When ``max_degrees`` and ``min_degrees`` are integers, the total degree of
+    each monomial is considered. When they are lists, individual degree
+    constraints are applied to each variable.
+
     Case I. ``max_degrees`` and ``min_degrees`` are both integers
     =============================================================
 
@@ -127,9 +131,10 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                total_degree = sum(powers.values())
+                if min_degree <= total_degree <= max_degree:
                     monomials_list_comm.append(Mul(*item))
-            yield from set(monomials_list_comm)
+            yield from monomials_list_comm
         else:
             monomials_list_non_comm = []
             for item in product(variables, repeat=max_degree):
@@ -139,9 +144,10 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                total_degree = sum(powers.values())
+                if min_degree <= total_degree <= max_degree:
                     monomials_list_non_comm.append(Mul(*item))
-            yield from set(monomials_list_non_comm)
+            yield from monomials_list_non_comm
     else:
         if any(min_degrees[i] > max_degrees[i] for i in range(n)):
             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')
diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py
index 482cbee..3497d51 100644
--- a/sympy/polys/tests/test_monomials.py
+++ b/sympy/polys/tests/test_monomials.py
@@ -252,3 +252,17 @@ def test_Monomial():
     raises(ValueError, lambda: m**-1)
     raises(TypeError, lambda: m.gcd(3))
     raises(TypeError, lambda: m.lcm(3))
+def test_itermonomials_min_max():
+    assert set(itermonomials([x, y], 2, 1)) == {x, y, x**2, x*y, y**2}
+    assert set(itermonomials([x, y], 3, 2)) == {x**2, y**2, x**3, x**2*y, x*y**2, y**3}
+    assert set(itermonomials([x, y, z], 2, 1)) == {x, y, z, x**2, x*y, x*z, y**2, y*z, z**2}
+
+def test_itermonomials_with_generators():
+    gens = [x, y]
+    assert set(itermonomials(gens, 2, 1)) == {x, y, x**2, x*y, y**2}
+    assert set(itermonomials(gens, 3, 2)) == {x**2, y**2, x**3, x**2*y, x*y**2, y**3}
+
+def test_itermonomials_noncommutative():
+    p, q = symbols('p q', commutative=False)
+    assert set(itermonomials([p, q], 2, 1)) == {p, q, p**2, p*q, q*p, q**2}
+    assert set(itermonomials([p, q], 3, 2)) == {p**2, q**2, p**3, p**2*q, p*q*p, q*p**2, p*q**2, q*p*q, q**2*p, q**3}
