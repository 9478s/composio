diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py
index da4ff928..bb735e13 100644
--- a/django/db/models/aggregates.py
+++ b/django/db/models/aggregates.py
@@ -99,6 +99,11 @@ class Aggregate(Func):
 class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):
     function = 'AVG'
     name = 'Avg'
+    allow_distinct = True
+
+    def __init__(self, expression, distinct=False, **extra):
+        super().__init__(expression, distinct=distinct, **extra)
+    name = 'Avg'
 
 
 class Count(Aggregate):
@@ -121,13 +126,26 @@ class Count(Aggregate):
 class Max(Aggregate):
     function = 'MAX'
     name = 'Max'
+    allow_distinct = True
+
+    def __init__(self, expression, distinct=False, **extra):
+        super().__init__(expression, distinct=distinct, **extra)
 
 
 class Min(Aggregate):
     function = 'MIN'
     name = 'Min'
+    allow_distinct = True
 
+    def __init__(self, expression, distinct=False, **extra):
+        super().__init__(expression, distinct=distinct, **extra)
+class Sum(FixDurationInputMixin, Aggregate):
+    function = 'SUM'
+    name = 'Sum'
+    allow_distinct = True
 
+    def __init__(self, expression, distinct=False, **extra):
+        super().__init__(expression, distinct=distinct, **extra)
 class StdDev(NumericOutputFieldMixin, Aggregate):
     name = 'StdDev'
 
diff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt
index f84097ae..bd362772 100644
--- a/docs/ref/models/querysets.txt
+++ b/docs/ref/models/querysets.txt
@@ -3313,27 +3313,27 @@ SQL equivalents:
 .. _aggregation-functions:
 
 Aggregation functions
----------------------
-
-.. currentmodule:: django.db.models
+----------------------
 
 Django provides the following aggregation functions in the
 ``django.db.models`` module. For details on how to use these
-aggregate functions, see :doc:`the topic guide on aggregation
-</topics/db/aggregation>`. See the :class:`~django.db.models.Aggregate`
-documentation to learn how to create your aggregates.
+aggregate functions, see :ref:`topics-db-aggregation`.
 
-.. warning::
+.. note::
 
-    SQLite can't handle aggregation on date/time fields out of the box.
-    This is because there are no native date/time fields in SQLite and Django
-    currently emulates these features using a text field. Attempts to use
-    aggregation on date/time fields in SQLite will raise
-    ``NotImplementedError``.
+    Aggregation functions return ``None`` when used with an empty
+    queryset. All aggregates over an empty queryset return ``None`` except
+    for ``Count``, which returns ``0``.
 
-.. admonition:: Note
+    All aggregates also return ``None`` when a ``QuerySet`` is used as
+    a sub-expression in an aggregation and it contains no rows.
 
-    Aggregation functions return ``None`` when used with an empty
+    The ``Avg`` and ``Sum`` aggregates ignore ``None`` values. To avoid
+    inconsistent results, add an explicit filter to exclude ``None`` values,
+    e.g. ``.filter(price__isnull=False).aggregate(Avg('price'))``.
+
+    The ``Avg``, ``Sum``, ``Min``, and ``Max`` aggregates support the ``distinct`` 
+    argument, which can be used to remove duplicate values from the calculation.
     ``QuerySet``. For example, the ``Sum`` aggregation function returns ``None``
     instead of ``0`` if the ``QuerySet`` contains no entries. An exception is
     ``Count``, which does return ``0`` if the ``QuerySet`` is empty.
