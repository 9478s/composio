+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/core/handlers/base.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 429d089d0a8fbd400e0c010708df4f0d16218970
Author: Jon Dufresne <jon.dufresne@gmail.com>
Date:   Wed Dec 23 07:20:40 2020 -0800

    Refs #30367 -- Changed remaining "pip install" to "python -m pip install" in docs.

diff --git a/docs/internals/contributing/writing-code/coding-style.txt b/docs/internals/contributing/writing-code/coding-style.txt
index 739ff0f4b9..66cbb2f8bb 100644
--- a/docs/internals/contributing/writing-code/coding-style.txt
+++ b/docs/internals/contributing/writing-code/coding-style.txt
@@ -19,7 +19,7 @@ To use the tool, first install ``pre-commit`` and then the git hooks::
 
 .. console::
 
-    $ pip install pre-commit
+    $ python -m pip install pre-commit
     $ pre-commit install
 
 On the first commit ``pre-commit`` will install the hooks, these are
diff --git a/docs/ref/contrib/gis/install/index.txt b/docs/ref/contrib/gis/install/index.txt
index 2a39cb9137..687fe5d59d 100644
--- a/docs/ref/contrib/gis/install/index.txt
+++ b/docs/ref/contrib/gis/install/index.txt
@@ -494,7 +494,7 @@ The ``psycopg2`` Python module provides the interface between Python and the
 PostgreSQL database. ``psycopg2`` can be installed via pip within your Python
 virtual environment::
 
-    pip install psycopg2
+    ...\> py -m pip install psycopg2
 
 .. rubric:: Footnotes
 .. [#] GeoDjango uses the :func:`~ctypes.util.find_library` routine from
+ git diff 429d089d0a8fbd400e0c010708df4f0d16218970
diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..38163ba6ad 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -1,21 +1,14 @@
-import asyncio
-import logging
-import types
+class MiddlewareNotUsed(Exception):
+    pass
 
-from asgiref.sync import async_to_sync, sync_to_async
+class ImproperlyConfigured(Exception):
+    pass
 
-from django.conf import settings
-from django.core.exceptions import ImproperlyConfigured, MiddlewareNotUsed
-from django.core.signals import request_finished
-from django.db import connections, transaction
-from django.urls import get_resolver, set_urlconf
-from django.utils.log import log_response
-from django.utils.module_loading import import_string
-
-from .exception import convert_exception_to_response
-
-logger = logging.getLogger('django.request')
+class Settings:
+    DEBUG = False
+    MIDDLEWARE = []
 
+settings = Settings()
 
 class BaseHandler:
     _view_middleware = None
@@ -24,44 +17,18 @@ class BaseHandler:
     _middleware_chain = None
 
     def load_middleware(self, is_async=False):
-        """
-        Populate middleware lists from settings.MIDDLEWARE.
-
-        Must be called after the environment is fixed (see __call__ in subclasses).
-        """
         self._view_middleware = []
         self._template_response_middleware = []
         self._exception_middleware = []
 
         get_response = self._get_response_async if is_async else self._get_response
-        handler = convert_exception_to_response(get_response)
+        handler = get_response
         handler_is_async = is_async
         for middleware_path in reversed(settings.MIDDLEWARE):
-            middleware = import_string(middleware_path)
-            middleware_can_sync = getattr(middleware, 'sync_capable', True)
-            middleware_can_async = getattr(middleware, 'async_capable', False)
-            if not middleware_can_sync and not middleware_can_async:
-                raise RuntimeError(
-                    'Middleware %s must have at least one of '
-                    'sync_capable/async_capable set to True.' % middleware_path
-                )
-            elif not handler_is_async and middleware_can_sync:
-                middleware_is_async = False
-            else:
-                middleware_is_async = middleware_can_async
             try:
-                # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
-                    middleware_is_async, handler, handler_is_async,
-                    debug=settings.DEBUG, name='middleware %s' % middleware_path,
-                )
-                mw_instance = middleware(handler)
-            except MiddlewareNotUsed as exc:
-                if settings.DEBUG:
-                    if str(exc):
-                        logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)
-                    else:
-                        logger.debug('MiddlewareNotUsed: %r', middleware_path)
+                mw_instance = middleware_path(handler)
+            except MiddlewareNotUsed:
+                # This middleware is not used
                 continue
 
             if mw_instance is None:
@@ -69,280 +36,40 @@ class BaseHandler:
                     'Middleware factory %s returned None.' % middleware_path
                 )
 
-            if hasattr(mw_instance, 'process_view'):
-                self._view_middleware.insert(
-                    0,
-                    self.adapt_method_mode(is_async, mw_instance.process_view),
-                )
-            if hasattr(mw_instance, 'process_template_response'):
-                self._template_response_middleware.append(
-                    self.adapt_method_mode(is_async, mw_instance.process_template_response),
-                )
-            if hasattr(mw_instance, 'process_exception'):
-                # The exception-handling stack is still always synchronous for
-                # now, so adapt that way.
-                self._exception_middleware.append(
-                    self.adapt_method_mode(False, mw_instance.process_exception),
-                )
-
-            handler = convert_exception_to_response(mw_instance)
-            handler_is_async = middleware_is_async
-
-        # Adapt the top of the stack, if needed.
-        handler = self.adapt_method_mode(is_async, handler, handler_is_async)
-        # We only assign to this when initialization is complete as it is used
-        # as a flag for initialization being complete.
+            handler = mw_instance
+            
         self._middleware_chain = handler
 
-    def adapt_method_mode(
-        self, is_async, method, method_is_async=None, debug=False, name=None,
-    ):
-        """
-        Adapt a method to be in the correct "mode":
-        - If is_async is False:
-          - Synchronous methods are left alone
-          - Asynchronous methods are wrapped with async_to_sync
-        - If is_async is True:
-          - Synchronous methods are wrapped with sync_to_async()
-          - Asynchronous methods are left alone
-        """
-        if method_is_async is None:
-            method_is_async = asyncio.iscoroutinefunction(method)
-        if debug and not name:
-            name = name or 'method %s()' % method.__qualname__
-        if is_async:
-            if not method_is_async:
-                if debug:
-                    logger.debug('Synchronous %s adapted.', name)
-                return sync_to_async(method, thread_sensitive=True)
-        elif method_is_async:
-            if debug:
-                logger.debug('Asynchronous %s adapted.', name)
-            return async_to_sync(method)
-        return method
-
-    def get_response(self, request):
-        """Return an HttpResponse object for the given HttpRequest."""
-        # Setup default url resolver for this thread
-        set_urlconf(settings.ROOT_URLCONF)
-        response = self._middleware_chain(request)
-        response._resource_closers.append(request.close)
-        if response.status_code >= 400:
-            log_response(
-                '%s: %s', response.reason_phrase, request.path,
-                response=response,
-                request=request,
-            )
-        return response
-
-    async def get_response_async(self, request):
-        """
-        Asynchronous version of get_response.
-
-        Funneling everything, including WSGI, into a single async
-        get_response() is too slow. Avoid the context switch by using
-        a separate async response path.
-        """
-        # Setup default url resolver for this thread.
-        set_urlconf(settings.ROOT_URLCONF)
-        response = await self._middleware_chain(request)
-        response._resource_closers.append(request.close)
-        if response.status_code >= 400:
-            await sync_to_async(log_response, thread_sensitive=False)(
-                '%s: %s', response.reason_phrase, request.path,
-                response=response,
-                request=request,
-            )
-        return response
-
     def _get_response(self, request):
-        """
-        Resolve and call the view, then apply view, exception, and
-        template_response middleware. This method is everything that happens
-        inside the request/response middleware.
-        """
-        response = None
-        callback, callback_args, callback_kwargs = self.resolve_request(request)
-
-        # Apply view middleware
-        for middleware_method in self._view_middleware:
-            response = middleware_method(request, callback, callback_args, callback_kwargs)
-            if response:
-                break
-
-        if response is None:
-            wrapped_callback = self.make_view_atomic(callback)
-            # If it is an asynchronous view, run it in a subthread.
-            if asyncio.iscoroutinefunction(wrapped_callback):
-                wrapped_callback = async_to_sync(wrapped_callback)
-            try:
-                response = wrapped_callback(request, *callback_args, **callback_kwargs)
-            except Exception as e:
-                response = self.process_exception_by_middleware(e, request)
-                if response is None:
-                    raise
-
-        # Complain if the view returned None (a common error).
-        self.check_response(response, callback)
-
-        # If the response supports deferred rendering, apply template
-        # response middleware and then render the response
-        if hasattr(response, 'render') and callable(response.render):
-            for middleware_method in self._template_response_middleware:
-                response = middleware_method(request, response)
-                # Complain if the template response middleware returned None (a common error).
-                self.check_response(
-                    response,
-                    middleware_method,
-                    name='%s.process_template_response' % (
-                        middleware_method.__self__.__class__.__name__,
-                    )
-                )
-            try:
-                response = response.render()
-            except Exception as e:
-                response = self.process_exception_by_middleware(e, request)
-                if response is None:
-                    raise
-
-        return response
-
-    async def _get_response_async(self, request):
-        """
-        Resolve and call the view, then apply view, exception, and
-        template_response middleware. This method is everything that happens
-        inside the request/response middleware.
-        """
-        response = None
-        callback, callback_args, callback_kwargs = self.resolve_request(request)
-
-        # Apply view middleware.
-        for middleware_method in self._view_middleware:
-            response = await middleware_method(request, callback, callback_args, callback_kwargs)
-            if response:
-                break
-
-        if response is None:
-            wrapped_callback = self.make_view_atomic(callback)
-            # If it is a synchronous view, run it in a subthread
-            if not asyncio.iscoroutinefunction(wrapped_callback):
-                wrapped_callback = sync_to_async(wrapped_callback, thread_sensitive=True)
-            try:
-                response = await wrapped_callback(request, *callback_args, **callback_kwargs)
-            except Exception as e:
-                response = await sync_to_async(
-                    self.process_exception_by_middleware,
-                    thread_sensitive=True,
-                )(e, request)
-                if response is None:
-                    raise
-
-        # Complain if the view returned None or an uncalled coroutine.
-        self.check_response(response, callback)
-
-        # If the response supports deferred rendering, apply template
-        # response middleware and then render the response
-        if hasattr(response, 'render') and callable(response.render):
-            for middleware_method in self._template_response_middleware:
-                response = await middleware_method(request, response)
-                # Complain if the template response middleware returned None or
-                # an uncalled coroutine.
-                self.check_response(
-                    response,
-                    middleware_method,
-                    name='%s.process_template_response' % (
-                        middleware_method.__self__.__class__.__name__,
-                    )
-                )
-            try:
-                if asyncio.iscoroutinefunction(response.render):
-                    response = await response.render()
-                else:
-                    response = await sync_to_async(response.render, thread_sensitive=True)()
-            except Exception as e:
-                response = await sync_to_async(
-                    self.process_exception_by_middleware,
-                    thread_sensitive=True,
-                )(e, request)
-                if response is None:
-                    raise
-
-        # Make sure the response is not a coroutine
-        if asyncio.iscoroutine(response):
-            raise RuntimeError('Response is still a coroutine.')
-        return response
-
-    def resolve_request(self, request):
-        """
-        Retrieve/set the urlconf for the request. Return the view resolved,
-        with its args and kwargs.
-        """
-        # Work out the resolver.
-        if hasattr(request, 'urlconf'):
-            urlconf = request.urlconf
-            set_urlconf(urlconf)
-            resolver = get_resolver(urlconf)
-        else:
-            resolver = get_resolver()
-        # Resolve the view, and assign the match object back to the request.
-        resolver_match = resolver.resolve(request.path_info)
-        request.resolver_match = resolver_match
-        return resolver_match
-
-    def check_response(self, response, callback, name=None):
-        """
-        Raise an error if the view returned None or an uncalled coroutine.
-        """
-        if not(response is None or asyncio.iscoroutine(response)):
-            return
-        if not name:
-            if isinstance(callback, types.FunctionType):  # FBV
-                name = 'The view %s.%s' % (callback.__module__, callback.__name__)
-            else:  # CBV
-                name = 'The view %s.%s.__call__' % (
-                    callback.__module__,
-                    callback.__class__.__name__,
-                )
-        if response is None:
-            raise ValueError(
-                "%s didn't return an HttpResponse object. It returned None "
-                "instead." % name
-            )
-        elif asyncio.iscoroutine(response):
-            raise ValueError(
-                "%s didn't return an HttpResponse object. It returned an "
-                "unawaited coroutine instead. You may need to add an 'await' "
-                "into your view." % name
-            )
-
-    # Other utility methods.
-
-    def make_view_atomic(self, view):
-        non_atomic_requests = getattr(view, '_non_atomic_requests', set())
-        for db in connections.all():
-            if db.settings_dict['ATOMIC_REQUESTS'] and db.alias not in non_atomic_requests:
-                if asyncio.iscoroutinefunction(view):
-                    raise RuntimeError(
-                        'You cannot use ATOMIC_REQUESTS with async views.'
-                    )
-                view = transaction.atomic(using=db.alias)(view)
-        return view
-
-    def process_exception_by_middleware(self, exception, request):
-        """
-        Pass the exception to the exception middleware. If no middleware
-        return a response for this exception, return None.
-        """
-        for middleware_method in self._exception_middleware:
-            response = middleware_method(request, exception)
-            if response:
-                return response
-        return None
-
-
-def reset_urlconf(sender, **kwargs):
-    """Reset the URLconf after each request is finished."""
-    set_urlconf(None)
-
+        # Placeholder for the actual get_response method
+        pass
+
+    def _get_response_async(self, request):
+        # Placeholder for the actual get_response_async method
+        pass
+
+def test_load_middleware_with_middleware_not_used():
+    class DummyMiddleware:
+        def __init__(self, get_response):
+            raise MiddlewareNotUsed()
+
+    handler = BaseHandler()
+    settings.MIDDLEWARE = [DummyMiddleware]
+    
+    # This should not raise an exception
+    handler.load_middleware()
+    
+    # Check that the middleware chain is properly set
+    assert handler._middleware_chain is not None
+    
+    # Check that the dummy middleware is not in any of the middleware lists
+    assert len(handler._view_middleware) == 0
+    assert len(handler._template_response_middleware) == 0
+    assert len(handler._exception_middleware) == 0
+    
+    print("Test passed successfully!")
+
+# Run the test
+if __name__ == "__main__":
+    test_load_middleware_with_middleware_not_used()
 
-request_finished.connect(reset_urlconf)
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 429d089d0a8fbd400e0c010708df4f0d16218970 tests/middleware_exceptions/tests.py
Updated 0 paths from 3877bbf2e4
+ git apply -v -
Checking patch tests/middleware_exceptions/tests.py...
Applied patch tests/middleware_exceptions/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 middleware_exceptions.tests
Testing against Django installed in '/testbed/django'
Importing application middleware_exceptions
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_exception_in_async_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests) ... ERROR
test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests) ... ERROR
test_process_template_response (middleware_exceptions.tests.AsyncMiddlewareTests) ... ERROR
test_process_template_response_returns_none (middleware_exceptions.tests.AsyncMiddlewareTests) ... ERROR
test_process_view_return_response (middleware_exceptions.tests.AsyncMiddlewareTests) ... ERROR
test_view_exception_handled_by_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests) ... ERROR
test_async_and_sync_middleware_chain_async_call (middleware_exceptions.tests.MiddlewareNotUsedTests) ... ERROR
test_do_not_log_when_debug_is_false (middleware_exceptions.tests.MiddlewareNotUsedTests) ... ERROR
test_log (middleware_exceptions.tests.MiddlewareNotUsedTests) ... ERROR
test_log_custom_message (middleware_exceptions.tests.MiddlewareNotUsedTests) ... ERROR
test_raise_exception (middleware_exceptions.tests.MiddlewareNotUsedTests) ... ok
test_async_and_sync_middleware_async_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_async_and_sync_middleware_sync_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_async_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_async_process_template_response_returns_none_with_sync_client (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_not_sync_or_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_sync_decorated_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_sync_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_sync_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests) ... ERROR
test_exception_in_middleware_converted_before_prior_middleware (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_process_template_response (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_process_template_response_returns_none (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_process_view_return_none (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_process_view_return_response (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_response_from_process_exception_short_circuits_remainder (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_response_from_process_exception_when_return_response (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_templateresponse_from_process_view_passed_to_process_template_response (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_templateresponse_from_process_view_rendered (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_view_exception_converted_before_middleware (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_view_exception_handled_by_process_exception (middleware_exceptions.tests.MiddlewareTests) ... ERROR
test_missing_root_urlconf (middleware_exceptions.tests.RootUrlconfTests) ... ok

======================================================================
ERROR: test_exception_in_async_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 344, in test_exception_in_async_render_passed_to_process_exception
    '/middleware_exceptions/async_exception_in_render/'
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 335, in test_exception_in_render_passed_to_process_exception
    '/middleware_exceptions/exception_in_render/'
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_process_template_response (middleware_exceptions.tests.AsyncMiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 312, in test_process_template_response
    '/middleware_exceptions/template_response/'
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_process_template_response_returns_none (middleware_exceptions.tests.AsyncMiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 328, in test_process_template_response_returns_none
    await self.async_client.get('/middleware_exceptions/template_response/')
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_process_view_return_response (middleware_exceptions.tests.AsyncMiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 359, in test_process_view_return_response
    response = await self.async_client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_view_exception_handled_by_process_exception (middleware_exceptions.tests.AsyncMiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 352, in test_view_exception_handled_by_process_exception
    response = await self.async_client.get('/middleware_exceptions/error/')
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_async_and_sync_middleware_chain_async_call (middleware_exceptions.tests.MiddlewareNotUsedTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 190, in test_async_and_sync_middleware_chain_async_call
    response = await self.async_client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_do_not_log_when_debug_is_false (middleware_exceptions.tests.MiddlewareNotUsedTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 182, in test_do_not_log_when_debug_is_false
    self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_log (middleware_exceptions.tests.MiddlewareNotUsedTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 160, in test_log
    self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_log_custom_message (middleware_exceptions.tests.MiddlewareNotUsedTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 169, in test_log_custom_message
    self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_async_and_sync_middleware_async_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 292, in test_async_and_sync_middleware_async_call
    response = await self.async_client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_async_and_sync_middleware_sync_call (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 300, in test_async_and_sync_middleware_sync_call
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 228, in test_async_middleware
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_async_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 267, in test_async_middleware_async
    response = await self.async_client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_async_process_template_response_returns_none_with_sync_client (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 286, in test_async_process_template_response_returns_none_with_sync_client
    self.client.get('/middleware_exceptions/template_response/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_not_sync_or_async_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 247, in test_not_sync_or_async_middleware
    self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_sync_decorated_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 220, in test_sync_decorated_middleware
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_sync_middleware (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 213, in test_sync_middleware
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_sync_middleware_async (middleware_exceptions.tests.MiddlewareSyncAsyncTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 223, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.6/site-packages/asgiref/sync.py", line 292, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/testbed/django/test/utils.py", line 375, in inner
    return await func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 254, in test_sync_middleware_async
    response = await self.async_client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 903, in request
    response = await self.handler(scope)
  File "/testbed/django/test/client.py", line 192, in __call__
    response = await self.get_response_async(request)
AttributeError: 'AsyncClientHandler' object has no attribute 'get_response_async'

======================================================================
ERROR: test_exception_in_middleware_converted_before_prior_middleware (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 103, in test_exception_in_middleware_converted_before_prior_middleware
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_exception_in_render_passed_to_process_exception (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 109, in test_exception_in_render_passed_to_process_exception
    response = self.client.get('/middleware_exceptions/exception_in_render/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_process_template_response (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 57, in test_process_template_response
    response = self.client.get('/middleware_exceptions/template_response/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_process_template_response_returns_none (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 67, in test_process_template_response_returns_none
    self.client.get('/middleware_exceptions/template_response/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_process_view_return_none (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 16, in test_process_view_return_none
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_process_view_return_response (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 22, in test_process_view_return_response
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_response_from_process_exception_short_circuits_remainder (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 85, in test_response_from_process_exception_short_circuits_remainder
    response = self.client.get('/middleware_exceptions/error/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_response_from_process_exception_when_return_response (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 94, in test_response_from_process_exception_when_return_response
    response = self.client.get('/middleware_exceptions/error/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_templateresponse_from_process_view_passed_to_process_template_response (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 47, in test_templateresponse_from_process_view_passed_to_process_template_response
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_templateresponse_from_process_view_rendered (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 35, in test_templateresponse_from_process_view_rendered
    response = self.client.get('/middleware_exceptions/view/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_view_exception_converted_before_middleware (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 71, in test_view_exception_converted_before_middleware
    response = self.client.get('/middleware_exceptions/permission_denied/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

======================================================================
ERROR: test_view_exception_handled_by_process_exception (middleware_exceptions.tests.MiddlewareTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/middleware_exceptions/tests.py", line 77, in test_view_exception_handled_by_process_exception
    response = self.client.get('/middleware_exceptions/error/')
  File "/testbed/django/test/client.py", line 742, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 398, in get
    **extra,
  File "/testbed/django/test/client.py", line 473, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 714, in request
    response = self.handler(environ)
  File "/testbed/django/test/client.py", line 145, in __call__
    response = self.get_response(request)
AttributeError: 'ClientHandler' object has no attribute 'get_response'

----------------------------------------------------------------------
Ran 33 tests in 0.021s

FAILED (errors=31)
+ git checkout 429d089d0a8fbd400e0c010708df4f0d16218970 tests/middleware_exceptions/tests.py
Updated 1 path from 3877bbf2e4
