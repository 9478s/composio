diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py
index dc44ed3..8da4403 100644
--- a/sphinx/directives/code.py
+++ b/sphinx/directives/code.py
@@ -220,42 +220,46 @@ class LiteralIncludeReader:
         if 'diff' in self.options:
             lines = self.show_diff()
         else:
-            filters = [self.pyobject_filter,
-                       self.start_filter,
-                       self.end_filter,
-                       self.lines_filter,
-                       self.prepend_filter,
-                       self.append_filter,
-                       self.dedent_filter]
             lines = self.read_file(self.filename, location=location)
-            for func in filters:
-                lines = func(lines, location=location)
-
+            
+        lines = self.start_filter(lines, location=location)
+        lines = self.end_filter(lines, location=location)
+        lines = self.pyobject_filter(lines, location=location)
+        lines = self.lines_filter(lines, location=location)
+        
+        lines = self.dedent_filter(lines, location=location)
+        
+        lines = self.prepend_filter(lines, location=location)
+        lines = self.append_filter(lines, location=location)
+        
         return ''.join(lines), len(lines)
 
     def show_diff(self, location: Tuple[str, int] = None) -> List[str]:
         new_lines = self.read_file(self.filename)
         old_filename = self.options.get('diff')
         old_lines = self.read_file(old_filename)
-        diff = unified_diff(old_lines, new_lines, old_filename, self.filename)
-        return list(diff)
-
-    def pyobject_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
-        pyobject = self.options.get('pyobject')
-        if pyobject:
-            from sphinx.pycode import ModuleAnalyzer
-            analyzer = ModuleAnalyzer.for_file(self.filename, '')
-            tags = analyzer.find_tags()
-            if pyobject not in tags:
-                raise ValueError(__('Object named %r not found in include file %r') %
-                                 (pyobject, self.filename))
-            else:
-                start = tags[pyobject][1]
-                end = tags[pyobject][2]
-                lines = lines[start - 1:end]
-                if 'lineno-match' in self.options:
-                    self.lineno_start = start
+    def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
+        if 'dedent' in self.options:
+            return dedent_lines(lines, self.options.get('dedent'), location=location)
+        else:
+            return lines
+
+    def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
+        if 'prepend' in self.options:
+            prepend_lines = self.options['prepend'].splitlines()
+            if lines:
+                indent = len(lines[0]) - len(lines[0].lstrip())
+                prepend_lines = [' ' * indent + line if line.strip() else line for line in prepend_lines]
+            lines = prepend_lines + lines
+        return lines
 
+    def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
+        if 'append' in self.options:
+            append_lines = self.options['append'].splitlines()
+            if lines:
+                indent = len(lines[-1]) - len(lines[-1].lstrip())
+                append_lines = [' ' * indent + line if line.strip() else line for line in append_lines]
+            lines = lines + append_lines
         return lines
 
     def lines_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:
@@ -265,7 +269,6 @@ class LiteralIncludeReader:
             if any(i >= len(lines) for i in linelist):
                 logger.warning(__('line number spec is out of range(1-%d): %r') %
                                (len(lines), linespec), location=location)
-
             if 'lineno-match' in self.options:
                 # make sure the line list is not "disjoint".
                 first = linelist[0]
