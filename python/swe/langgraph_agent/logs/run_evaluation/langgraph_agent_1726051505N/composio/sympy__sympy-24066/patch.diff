diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index 3daf84c..34bea7f 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -154,6 +154,8 @@ def _collect_factor_and_dimension(self, expr):
         Return tuple with scale factor expression and dimension expression.
         """
         from sympy.physics.units import Quantity
+        from sympy.functions import exp
+        from sympy.core.add import Add
         if isinstance(expr, Quantity):
             return expr.scale_factor, expr.dimension
         elif isinstance(expr, Mul):
@@ -171,17 +173,11 @@ def _collect_factor_and_dimension(self, expr):
                 exp_dim = 1
             return factor ** exp_factor, dim ** (exp_factor * exp_dim)
         elif isinstance(expr, Add):
-            factor, dim = self._collect_factor_and_dimension(expr.args[0])
-            for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
-                    raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
-                factor += addend_factor
-            return factor, dim
+            terms = [self._collect_factor_and_dimension(arg) for arg in expr.args]
+            factors, dims = zip(*terms)
+            if not all(dim == dims[0] for dim in dims):
+                raise ValueError('All terms in Add should have the same dimension')
+            return Add(*factors), dims[0]
         elif isinstance(expr, Derivative):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for independent, count in expr.variable_count:
@@ -189,11 +185,16 @@ def _collect_factor_and_dimension(self, expr):
                 factor /= ifactor**count
                 dim /= idim**count
             return factor, dim
+        elif isinstance(expr, exp):
+            factor, dim = self._collect_factor_and_dimension(expr.args[0])
+            if not self.get_dimension_system().is_dimensionless(dim):
+                raise ValueError(f"Dimension of exp argument must be dimensionless, got {dim}")
+            return exp(factor), Dimension(1)
         elif isinstance(expr, Function):
             fds = [self._collect_factor_and_dimension(
                 arg) for arg in expr.args]
             return (expr.func(*(f[0] for f in fds)),
-                    *(d[1] for d in fds))
+                    Dimension(1))
         elif isinstance(expr, Dimension):
             return S.One, expr
         else:
